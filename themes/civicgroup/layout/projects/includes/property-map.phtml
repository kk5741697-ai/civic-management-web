<?php
  // 1) Determine title, URL & shapes JSON
  $location_name = $project->name
                 ?? $project->location
                 ?? 'Property Location';

  // Pull raw shapes‚Äîmight already be array or JSON string
  $rawShapes = $project_data['location_shapes'] ?? '';

  // Normalize into $shapes[]
  $shapes = [];
  if (is_array($rawShapes)) {
      // already decoded
      $shapes = $rawShapes;
  }
  elseif (is_string($rawShapes) && trim($rawShapes) !== '') {
      // decode JSON
      $decoded = json_decode($rawShapes, true);
      if (json_last_error() === JSON_ERROR_NONE && is_array($decoded)) {
          $shapes = $decoded;
      }
  }

  // 2) Only show map if at least one shape exists
  $hasPolygon   = !empty($shapes['polygon'])   && is_array($shapes['polygon']);
  $hasRectangle = !empty($shapes['rectangle']) && is_array($shapes['rectangle']);
  $hasMarker    = !empty($shapes['marker'])    && is_array($shapes['marker']);
  if (!($hasPolygon || $hasRectangle || $hasMarker)) {
      // no shapes ‚Üí don‚Äôt render anything
      return;
  }

  // 3) Choose center point: marker ‚Üí polygon[0] ‚Üí rectangle[0] ‚Üí fallback
  if ($hasMarker && count($shapes['marker'])===2) {
      list($lat,$lng) = $shapes['marker'];
  }
  elseif ($hasPolygon && isset($shapes['polygon'][0][0])) {
      list($lat,$lng) = $shapes['polygon'][0];
  }
  elseif ($hasRectangle && isset($shapes['rectangle'][0][0])) {
      list($lat,$lng) = $shapes['rectangle'][0];
  }
  else {
      $lat = 23.8103;
      $lng = 90.4125;
  }

  // 4) Marker icon URL
  $marker_icon = $wo['config']['theme_url'] . '/icons/single-family-home-map-icon.png';
?>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@^3.2.12/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet-routing-machine@^3.2.12/dist/leaflet-routing-machine.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css" />
<script src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>

<?php
  // ‚Ä¶ your PHP setup to extract $lat, $lng, $shapes etc ‚Ä¶
  $marker_icon = $wo['config']['theme_url'] . '/icons/single-family-home-map-icon.png';
?>
<span id="google_location"></span>
<div class="rh_property__map_wrap margin-bottom-40px">
    <h4 class="rh_property__heading">Property on Map</h4>
    <div id="property_map" style="height:400px;width:100%"></div>
</div>

<script>
jQuery(function($) {
    const street = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OSM'
    });
    const satellite = L.tileLayer(
        'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{x}/{y}', {
            attribution: '&copy; Esri'
        });

    const map = L.map('property_map', {
        layers: [street],
        fullscreenControl: true
    }).setView([<?= $lat ?>, <?= $lng ?>], 13);

    L.control.layers({
        Street: street,
        Satellite: satellite
    }).addTo(map);
    L.control.locate({
        position: 'topleft',
        strings: {
            title: "Show me where I am"
        },
        flyTo: true,
        keepCurrentZoomLevel: true
    }).addTo(map);

    // Icon for your property
    const homeIcon = L.icon({
        iconUrl: '<?= addslashes($marker_icon) ?>',
        iconSize: [42, 57],
        iconAnchor: [21, 57],
        popupAnchor: [0, -60]
    });

    // Add shapes
    // bindPopup("<?= htmlspecialchars($location_name, ENT_QUOTES) ?>");
    const group = L.featureGroup().addTo(map);
    <?php if($hasPolygon): ?>
    L.polygon(<?= json_encode($shapes['polygon']) ?>, {
        color: '#ff6600',
        fillColor: '#ff6600',
        fillOpacity: 0.3
    }).addTo(group);
    <?php endif; ?>
    <?php if($hasRectangle): ?>
    L.rectangle(<?= json_encode($shapes['rectangle']) ?>, {
        color: '#0066ff',
        weight: 2,
        dashArray: '4,4',
        fillOpacity: 0
    }).addTo(group);
    <?php endif; ?>
    <?php if($hasMarker): ?>
    L.marker(<?= json_encode($shapes['marker']) ?>, {
        icon: homeIcon
    }).addTo(group).openPopup();
    <?php endif; ?>
    if (group.getLayers().length) map.fitBounds(group.getBounds().pad(0.2));

    // Directions Button + Segment Handling
    let routingControl = null;
    let segmentLayers = [];

    const Directions = L.Control.extend({
        options: {
            position: 'topright'
        },
        onAdd: function() {
            const btn = L.DomUtil.create('a', 'leaflet-bar leaflet-control leaflet-control-custom');
            btn.href = '#';
            btn.innerHTML =
                `<span class="dir-icon" style="font-size:32px;line-height:44px;">üó∫Ô∏è</span><span class="dir-label">Get Directions</span>`;
            L.DomEvent.on(btn, 'click', L.DomEvent.stop)
                .on(btn, 'click', () => {
                    btn.querySelector('.dir-label').classList.add('hidden');
                    map.locate({
                        setView: false
                    });
                    map.once('locationfound', e => {
                        const user = e.latlng;
                        if (routingControl) map.removeControl(routingControl);
                        segmentLayers.forEach(l => map.removeLayer(l));
                        segmentLayers = [];

                        routingControl = L.Routing.control({
                            waypoints: [user, L.latLng(<?= $lat ?>,
                                <?= $lng ?>)],
                            router: L.Routing.osrmv1({
                                serviceUrl: 'https://router.project-osrm.org/route/v1'
                            }),
                            fitSelectedRoutes: true,
                            show: false,
                            showAlternatives: true,
                            addWaypoints: false,
                            lineOptions: {
                                styles: [{
                                    color: 'blue',
                                    opacity: 0.6,
                                    weight: 6
                                }]
                            },
                            createMarker: () => null
                        }).addTo(map);

                        routingControl.on('routesfound', function(ev) {
                            const routes = ev.routes;
                            routes.forEach((route, routeIndex) => {
                                const instr = route.instructions;
                                for (let i = 0; i < instr.length; i++) {
                                    const step = instr[i];
                                    const nextIndex = (i + 1 < instr
                                            .length) ? instr[i + 1]
                                        .index : route.coordinates
                                        .length;
                                    const segmentCoords = route
                                        .coordinates.slice(step.index,
                                            nextIndex).map(c => [c.lat,
                                            c.lng
                                        ]);

                                    const poly = L.polyline(
                                        segmentCoords, {
                                            color: routeIndex ===
                                                0 ? '#0078ff' :
                                                '#00aa00',
                                            weight: 6,
                                            opacity: 0.5 + (
                                                routeIndex * 0.1
                                            )
                                        }).addTo(map);

                                    poly.on('mouseover', e => {
                                        L.popup({
                                                offset: [0,
                                                    -4
                                                ],
                                                closeButton: false,
                                                autoClose: true,
                                                className: 'route-hover-popup'
                                            }).setLatLng(e
                                                .latlng)
                                            .setContent(
                                                `<strong>${step.text}</strong><br/>${(step.distance / 1000).toFixed(2)} km`
                                            )
                                            .openOn(map);
                                    });
                                    poly.on('mouseout', () => map
                                        .closePopup());

                                    // ‚úÖ Only show time label if step time is 60 sec (1 min) or more
                                    if (step.time >= 60) {
                                        const mid = segmentCoords[Math
                                            .floor(segmentCoords
                                                .length / 2)];
                                        const mins = Math.round(step
                                            .time / 60);
                                        const timeLabel = L.marker(
                                            mid, {
                                                icon: L.divIcon({
                                                    className: 'route-time-label',
                                                    html: `<div>${mins}&nbsp;min</div>`
                                                })
                                            }).addTo(map);

                                        segmentLayers.push(poly,
                                            timeLabel);
                                    } else {
                                        segmentLayers.push(poly);
                                    }
                                }

                                // Total time at the destination
                                const totalMins = Math.round(route
                                    .summary.totalTime / 60);
                                if (totalMins > 0) {
                                    const endLatLng = route.coordinates[
                                        route.coordinates.length - 1
                                    ];
                                    const totalTimeMarker = L.marker([
                                        endLatLng.lat, endLatLng
                                        .lng
                                    ], {
                                        icon: L.divIcon({
                                            className: 'route-time-label',
                                            html: `<div class="map_total_time"><strong>Total: ${totalMins} min</strong></div>`
                                        })
                                    }).addTo(map);
                                    segmentLayers.push(totalTimeMarker);
                                }
                            });
                        });

                    });
                });
            return btn;
        }
    });

    map.addControl(new Directions());
});
</script>
<style>
.map_total_time {
    background: rgb(0 141 24) !important;
    color: #fff;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 11px;
    pointer-events: none;
    width: max-content;
}

.leaflet-control-custom {
    background: white;
    position: relative;
    cursor: pointer;
}

.leaflet-control-custom .dir-label {
    position: absolute;
    bottom: 14px;
    right: 11px;
    transform: translateX(-50%);
    background: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 11px;
    white-space: nowrap;
    pointer-events: none;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);
}

.route-time-label div {
    background: rgba(0, 0, 0, 0.7);
    color: #fff;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 11px;
    pointer-events: none;
}

.leaflet-popup.route-hover-popup .leaflet-popup-content-wrapper {
    background: #333;
    color: #fff;
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 4px;
}

.leaflet-popup.route-hover-popup .leaflet-popup-tip {
    background: #333;
}

.leaflet-control-custom .dir-label.hidden {
    display: none;
}

.leaflet-marker-icon.leaflet-interactive {
    display: grid;
}
</style>