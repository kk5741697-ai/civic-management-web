<!-- Add Purchase Form Component -->
<!-- Add Purchase Button -->
<div class="p-3 border-top bg-light">
  <button class="btn btn-success btn-sm" id="addPurchaseBtn">
    <i class="lni lni-plus me-1"></i> Add Purchase
  </button>
</div>

<!-- Add Purchase Form -->
<div id="addPurchaseForm" class="card mx-3 mb-3 border" style="display:none;">
  <div class="card-header bg-light border-0">
    <h6 class="mb-0 fw-semibold text-dark">
      <i class="lni lni-plus me-2"></i>Add New Purchase
    </h6>
  </div>
  <div class="card-body">
    <div class="row g-2">
      <!-- Select project -->
      <div class="col-md-4 d-flex flex-column">
        <label for="projectSelect" class="form-label fw-medium">Project</label>
        <select id="projectSelect" class="form-control">
          <option value="">Select Project</option>
          <?php 
          global $db;
          foreach ($db->orderBy('id', 'ASC')->get(T_PROJECTS) as $proj): ?>
            <option value="<?= htmlspecialchars($proj->slug, ENT_QUOTES) ?>"><?= htmlspecialchars($proj->name) ?></option>
          <?php endforeach; ?>
        </select>
      </div>

      <!-- Select plot -->
      <div class="col-md-8 d-flex flex-column">
        <label for="purchaseSelect" class="form-label fw-medium">Plot</label>
        <select id="purchaseSelect" class="form-control"></select>
        <small class="form-text text-muted mt-1">Search by: block, plot number, katha, road (e.g., "A p12", "3k", "r25")</small>
      </div>
    </div>

    <!-- Hidden details shown after plot selected -->
    <div id="purchaseDetails" class="mt-3" style="display:none;">
      <div class="alert alert-info">
        <strong>Plot Details:</strong> Review the information below and fill in the required fields.
      </div>
      
      <div class="row g-2">
        <div class="col-md-2">
          <label for="detailBlock" class="form-label fw-medium">Block</label>
          <input type="text" id="detailBlock" class="form-control" readonly tabindex="-1">
        </div>
        <div class="col-md-2">
          <label for="detailPlot" class="form-label fw-medium">Plot</label>
          <input type="text" id="detailPlot" class="form-control" readonly tabindex="-1">
        </div>
        <div class="col-md-3">
          <label for="detailRoad" class="form-label fw-medium">Road</label>
          <input type="text" id="detailRoad" class="form-control" readonly tabindex="-1">
        </div>
        <div class="col-md-2">
          <label for="detailStatus" class="form-label fw-medium">Status</label>
          <input type="text" id="detailStatus" class="form-control" readonly tabindex="-1">
        </div>
        <div class="col-md-3">
          <label for="purchaseDate" class="form-label fw-medium">Booking Date</label>
          <input type="date" id="purchaseDate" class="form-control" value="<?= date('Y-m-d') ?>">
        </div>
      </div>
      
      <div class="row g-2 mt-1">
        <div class="col-md-2">
          <label for="detailFacing" class="form-label fw-medium">Facing</label>
          <input type="text" id="detailFacing" class="form-control" readonly tabindex="-1">
        </div>
        <div class="col-md-2">
          <label for="detailKatha" class="form-label fw-medium">Katha</label>
          <input type="text" id="detailKatha" class="form-control" readonly tabindex="-1">
        </div>
      </div>

      <div class="row g-2 mt-2">
        <div class="col-md-3">
          <label for="file_num" class="form-label fw-medium">File Number <span class="text-danger">*</span></label>
          <input type="text" id="file_num" class="form-control" placeholder="Enter file number" required>
        </div>
        <div class="col-md-3">
          <label for="perKathaPrice" class="form-label fw-medium">Price per Katha <span class="text-danger">*</span></label>
          <div class="input-group">
            <span class="input-group-text">৳</span>
            <input type="number" id="perKathaPrice" class="form-control" placeholder="0.00" step="0.01" required>
          </div>
        </div>
        <div class="col-md-3">
          <label for="bookingMoney" class="form-label fw-medium">Booking Money</label>
          <div class="input-group">
            <span class="input-group-text">৳</span>
            <input type="number" id="bookingMoney" class="form-control" placeholder="0.00" value="0" step="0.01">
          </div>
        </div>
        <div class="col-md-3">
          <label for="downPayment" class="form-label fw-medium">Down Payment <span class="text-danger">*</span></label>
          <div class="input-group">
            <span class="input-group-text">৳</span>
            <input type="number" id="downPayment" class="form-control" placeholder="0.00" step="0.01" required>
          </div>
        </div>
      </div>

      <div class="row g-2 mt-2">
        <div class="col-md-6">
          <label for="totalPrice" class="form-label fw-medium">Total Price</label>
          <input type="text" id="totalPrice" class="form-control bg-light" readonly tabindex="-1">
        </div>
        <div class="col-md-6">
          <label for="duePrice" class="form-label fw-medium">Due After Advance</label>
          <input type="text" id="duePrice" class="form-control bg-light" readonly tabindex="-1">
        </div>
      </div>

      <!-- Enhanced Nominees multi-select -->
      <div class="row g-2 mt-3">
        <div class="col-md-12">
          <label for="nomineeSelect" class="form-label fw-medium">
            <i class="lni lni-users me-1"></i>Nominees (Optional)
          </label>
          <select id="nomineeSelect" name="nominee_ids[]" class="form-select" multiple="multiple" data-placeholder="Select nominee(s)">
            <?php if (!empty($get_nominees) && is_array($get_nominees)): foreach ($get_nominees as $nom): ?>
              <option value="<?= (int)$nom->id ?>"><?= htmlspecialchars($nom->name . (!empty($nom->relation) ? ' — ' . $nom->relation : '')) ?></option>
            <?php endforeach; endif; ?>
          </select>
          <small class="form-text text-muted">Choose one or more nominees for this purchase. Leave blank if not applicable.</small>
        </div>
      </div>
    </div>

    <div class="mt-4 d-flex gap-2 justify-content-between">
      <button class="btn btn-secondary" id="cancelPurchaseBtn">
        <i class="lni lni-close me-1"></i>Cancel
      </button>
      <button class="btn btn-primary" id="savePurchaseBtn">
        <i class="lni lni-save me-1"></i>Save Purchase
      </button>
    </div>
  </div>
</div>

<style>
#addPurchaseForm .form-control:read-only {
  background-color: #f8f9fa;
  border-color: #dee2e6;
}

#addPurchaseForm .input-group-text {
  background-color: #e9ecef;
  border-color: #ced4da;
  font-weight: 600;
}

.purchase-warning {
  border-left: 4px solid #f39c12;
}

.select2-container--default .select2-selection--multiple {
  border: 1px solid #ced4da;
  border-radius: 0.375rem;
  min-height: 38px;
}

.select2-container--default.select2-container--focus .select2-selection--multiple {
  border-color: #667eea;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

/* Enhanced Select2 result styling */
.select2-result-item {
  padding: 8px 12px !important;
  border-bottom: 1px solid #f0f0f0;
}

.select2-result-item:hover {
  background-color: #f8f9fa !important;
}

.select2-main-text {
  font-weight: 500;
  color: #495057;
}

.select2-result-badge {
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.75em;
  font-weight: 600;
  text-transform: uppercase;
}

.select2-result-badge.available {
  background-color: #d4edda;
  color: #155724;
}

.select2-result-badge.sold {
  background-color: #f8d7da;
  color: #721c24;
}

.select2-result-badge.cancelled {
  background-color: #f1c6c7;
  color: #6c757d;
}

.select2-result-badge.completed {
  background-color: #d1ecf1;
  color: #0c5460;
}

.select2-result-badge.other {
  background-color: #e2e3e5;
  color: #6c757d;
}

.select2-result--disabled {
  opacity: 0.6;
  pointer-events: none;
}
</style>

<script>
jQuery(function($){
  'use strict';

  var AJAX_TIMEOUT = 15000;
  var searchCache = {};
  var select2Instances = {};

  // Enhanced Select2 configuration with robust error handling
  function buildSelect2AjaxOpts(projectId) {
    return {
      dropdownParent: $('#viewClient-modal'),
      placeholder: 'Search plots (block/plot/katha/road)...',
      allowClear: true,
      minimumInputLength: 0,
      maximumSelectionLength: 1,
      closeOnSelect: true,
      escapeMarkup: function(markup) { return markup; },
      ajax: {
        url: function() {
          return Wo_Ajax_Requests_File() + '?f=manage_inventory&s=search_purchases';
        },
        dataType: 'json',
        delay: 300,
        timeout: AJAX_TIMEOUT,
        cache: true,
        data: function (params) {
          var cacheKey = projectId + '_' + (params.term || '') + '_' + (params.page || 1);
          if (searchCache[cacheKey] && (Date.now() - searchCache[cacheKey].timestamp < 30000)) {
            return false;
          }
          
          return {
            q: params.term || '',
            page: params.page || 1,
            per_page: 30,
            project_id: projectId,
            timestamp: Date.now()
          };
        },
        processResults: function (data, params) {
          params.page = params.page || 1;
          var cacheKey = projectId + '_' + (params.term || '') + '_' + params.page;
          
          try {
            var rows = [];
            var more = false;
            
            if (!data) {
              rows = [];
              more = false;
            } else if (Array.isArray(data)) {
              rows = data;
              more = false;
            } else if (data.results && Array.isArray(data.results)) {
              rows = data.results;
              more = !!data.more;
            } else if (data.status === 200 && Array.isArray(data.data)) {
              rows = data.data;
              more = !!data.more;
            } else {
              rows = [];
              more = false;
            }

            var mapped = rows.map(function(item) {
              return normalizePlotItem(item);
            }).filter(Boolean);

            searchCache[cacheKey] = {
              data: { results: mapped, more: more },
              timestamp: Date.now()
            };

            return {
              results: mapped,
              pagination: { more: !!more }
            };
          } catch (e) {
            console.error('processResults error:', e);
            return { results: [], pagination: { more: false } };
          }
        },
        error: function(xhr, status, error) {
          console.warn('Select2 AJAX error:', status, error);
          return { results: [], pagination: { more: false } };
        }
      },
      templateResult: select2TemplateResult,
      templateSelection: select2TemplateSelection,
      matcher: advancedMatcher
    };
  }

  // Normalize plot data
  function normalizePlotItem(item) {
    if (!item) return null;
    
    var id = item.id || item.purchase_id || '';
    var plot = item.plot || item.plot_number || '';
    var katha = (item.katha !== undefined) ? String(item.katha) : '';
    var block = item.block || item.block_name || '';
    var road = item.road || item.road_name || '';
    var facing = item.facing || '';
    var status = item.status || '';
    var statusLabel = item.status_label || getStatusLabel(status);
    var available = item.available === 1 || item.available === true;

    var parts = [];
    if (block) parts.push('Block ' + String(block).toUpperCase());
    if (plot) parts.push('Plot ' + String(plot));
    if (katha) parts.push(String(katha) + ' katha');
    if (road) parts.push('Road ' + String(road));
    if (facing) parts.push('Facing ' + String(facing));

    return {
      id: id,
      text: parts.join(' • ') || String(id),
      plot: plot,
      katha: katha,
      block: block,
      road: road,
      facing: facing,
      status: status,
      status_label: statusLabel,
      available: available,
      blocked: !available,
      raw: item
    };
  }

  function getStatusLabel(status) {
    var s = String(status).toLowerCase();
    if (s === '0' || s === '1' || s === 'available') return 'Available';
    if (s === '2' || s === 'sold' || s === 'booked') return 'Sold';
    if (s === '3' || s === 'complete') return 'Complete';
    if (s === '4' || s.indexOf('cancel') !== -1) return 'Cancelled';
    return s ? (s.charAt(0).toUpperCase() + s.slice(1)) : '';
  }

  // Enhanced template functions
  function select2TemplateResult(item) {
    if (!item || !item.id) return item && item.text ? item.text : null;
    
    var $wrap = $('<div class="select2-result-item d-flex justify-content-between align-items-center"></div>');
    var $label = $('<div class="select2-main-text flex-grow-1"></div>').text(item.text);
    $wrap.append($label);

    if (item.status_label) {
      var badgeClass = getBadgeClass(item.status);
      var $badge = $('<span class="select2-result-badge ' + badgeClass + '"></span>').text(item.status_label);
      $wrap.append($badge);
    }

    if (item.blocked) {
      $wrap.addClass('select2-result--disabled');
      $label.append(' <small class="text-muted">(Not Available)</small>');
    }

    return $wrap;
  }

  function select2TemplateSelection(item) {
    if (!item || !item.id) return item && item.text ? item.text : null;
    return item.text;
  }

  function getBadgeClass(status) {
    var s = String(status || '').toLowerCase();
    if (/(sold|2|booked)/.test(s)) return 'sold';
    if (/(cancel|4)/.test(s)) return 'cancelled';
    if (/(complete|3)/.test(s)) return 'completed';
    if (/(available|0|1)/.test(s)) return 'available';
    return 'other';
  }

  // Advanced matcher for intelligent search
  function advancedMatcher(params, data) {
    if (!params || !params.term) return data;

    var term = params.term.toLowerCase().trim();
    var searchable = [
      data.text || '',
      data.block || '',
      data.plot || '',
      data.katha || '',
      data.road || '',
      data.facing || '',
      data.status_label || ''
    ].join(' ').toLowerCase();

    if (searchable.indexOf(term) !== -1) return data;

    var patterns = [
      /(\d+)\s*k/i,
      /r(\d+)/i,
      /p(\d+)/i,
      /b([a-z])/i
    ];

    for (var i = 0; i < patterns.length; i++) {
      var match = term.match(patterns[i]);
      if (match && searchable.indexOf(match[1]) !== -1) return data;
    }

    return null;
  }

  // Utility functions
  function formatCurrencyNumber(n) {
    if (isNaN(n) || n === null) return '৳0';
    return '৳' + Number(Math.round(n * 10) / 10).toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 1
    });
  }

  function computeAndUpdateTotals(plotItem) {
    var perKatha = parseFloat($('#perKathaPrice').val()) || 0;
    var downPayment = parseFloat($('#downPayment').val()) || 0;
    var bookingMoney = parseFloat($('#bookingMoney').val()) || 0;
    var katha = 0;

    if (plotItem && plotItem.katha) {
      katha = parseFloat(String(plotItem.katha).replace(/[^0-9.-]/g, '')) || 0;
    }

    var total = perKatha * katha;
    var due = Math.max(0, total - (bookingMoney + downPayment));

    $('#totalPrice').val(formatCurrencyNumber(total));
    $('#duePrice').val(formatCurrencyNumber(due));
  }

  function showSelectionWarning(item) {
    var $container = $('#purchaseDetails');
    var $warn = $container.find('.purchase-warning');
    
    if (!$warn.length) {
      $warn = $('<div class="alert alert-warning purchase-warning mt-2" style="display:none;"></div>');
      $container.prepend($warn);
    }

    if (!item || item.available !== false) {
      $warn.hide();
      return;
    }

    var msg = '<strong>Warning:</strong> This plot is currently ' + (item.status_label || 'unavailable') + '. ';
    msg += 'Continuing will require administrative override.';
    
    $warn.html(msg).show();
  }

  function populateDetailFields(plotItem) {
    if (!plotItem) {
      $('#purchaseDetails').hide();
      return;
    }

    $('#detailBlock').val(plotItem.block || '');
    $('#detailPlot').val(plotItem.plot || '');
    $('#detailRoad').val(plotItem.road || '');
    $('#detailFacing').val(plotItem.facing || '');
    $('#detailKatha').val(plotItem.katha || '');
    $('#detailStatus').val(plotItem.status_label || '');

    if (plotItem.raw && plotItem.raw.default_rate && !$('#perKathaPrice').data('userEdited')) {
      $('#perKathaPrice').val(plotItem.raw.default_rate);
    }

    $('#purchaseDetails').show();
    computeAndUpdateTotals(plotItem);
    showSelectionWarning(plotItem);
  }

  function getSelectedPlotObject() {
    var $select = $('#purchaseSelect');
    try {
      var data = $select.select2('data');
      return (Array.isArray(data) && data.length) ? data[0] : null;
    } catch(e) {
      return null;
    }
  }

  function safeDestroySelect2($element) {
    try {
      if ($element.data('select2')) {
        $element.select2('destroy');
      }
    } catch(e) {
      console.warn('Select2 destroy error:', e);
    }
  }

  function safeInitSelect2($element, options) {
    try {
      safeDestroySelect2($element);
      $element.select2(options);
      return true;
    } catch(e) {
      console.error('Select2 init error:', e);
      return false;
    }
  }

  function checkPlotBooking(plotId, callback) {
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=check_plot_booking', {
      plot_id: plotId
    })
    .done(function(response){
      var data = typeof response === 'string' ? JSON.parse(response) : response;
      callback(data);
    })
    .fail(function(){
      callback({ status: 500, message: 'Server error while checking plot availability' });
    });
  }

  // Initialize Add Purchase Form functionality
  window.initAddPurchaseForm = function() {
    // Add Purchase UI toggle
    $('#addPurchaseBtn').off('click').on('click', function(){
      $('#addPurchaseForm').slideDown();
      $(this).hide();
      
      var modalContent = $('#viewClient-modal');
      
      // Initialize project select
      if (!safeInitSelect2($('#projectSelect'), {
        dropdownParent: modalContent,
        placeholder: 'Select Project',
        allowClear: true,
        width: '100%'
      })) {
        console.warn('Failed to initialize project select');
      }

      // Initialize nominee select
      if (!safeInitSelect2($('#nomineeSelect'), {
        dropdownParent: modalContent,
        placeholder: 'Select nominee(s)',
        allowClear: true,
        multiple: true,
        width: '100%'
      })) {
        console.warn('Failed to initialize nominee select');
      }

      $('#purchaseDetails').hide();
      $('#perKathaPrice').removeData('userEdited');
    });

    $('#cancelPurchaseBtn').off('click').on('click', function(){
      $('#addPurchaseForm').slideUp();
      $('#addPurchaseBtn').show();
      
      // Safe cleanup
      safeDestroySelect2($('#projectSelect'));
      safeDestroySelect2($('#purchaseSelect'));
      safeDestroySelect2($('#nomineeSelect'));
      
      $('#projectSelect, #purchaseSelect, #nomineeSelect').val(null);
      $('#purchaseDetails').hide();
      $('#file_num, #perKathaPrice, #downPayment').val('');
      $('#bookingMoney').val('0');
      $('#perKathaPrice').removeData('userEdited');
    });

    // Project change handler
    $('#projectSelect').off('change').on('change', function(){
      var projectId = $(this).val();
      $('#purchaseDetails').hide();
      
      safeDestroySelect2($('#purchaseSelect'));

      if (!projectId) {
        return;
      }

      // Initialize AJAX-backed plot selection
      if (!safeInitSelect2($('#purchaseSelect'), buildSelect2AjaxOpts(projectId))) {
        console.error('Failed to initialize purchase select');
        return;
      }

      // Load default rate
      $.getJSON(Wo_Ajax_Requests_File() + '?f=manage_clients&s=default_rate&project_id=' + encodeURIComponent(projectId))
        .done(function(response){
          if (response && response.status == 200 && response.default_rate) {
            if (!$('#perKathaPrice').data('userEdited')) {
              $('#perKathaPrice').val(response.default_rate);
            }
          }
        });
    });

    // Plot selection handler
    $('#purchaseSelect').off('select2:select').on('select2:select', function(e){
      var item = e.params && e.params.data ? e.params.data : getSelectedPlotObject();
      populateDetailFields(item);
    });

    // Input handlers
    $('#perKathaPrice').off('input').on('input', function(){
      $(this).data('userEdited', true);
      computeAndUpdateTotals(getSelectedPlotObject());
    });

    $('#downPayment, #bookingMoney').off('input').on('input', function(){
      computeAndUpdateTotals(getSelectedPlotObject());
    });

    // Save purchase with conflict checking
    $('#savePurchaseBtn').off('click').on('click', function(){
      var projectId = $('#projectSelect').val();
      var purchaseId = $('#purchaseSelect').val();
      var fileNum = $('#file_num').val().trim();
      var perKatha = parseFloat($('#perKathaPrice').val()) || 0;
      var downPayment = parseFloat($('#downPayment').val()) || 0;
      var bookingMoney = parseFloat($('#bookingMoney').val()) || 0;
      var purchaseDate = $('#purchaseDate').val();
      var nomineeIds = $('#nomineeSelect').val() || [];

      // Validation
      var errors = [];
      if (!projectId) errors.push('Please select a project.');
      if (!purchaseId) errors.push('Please select a plot.');
      if (!fileNum) errors.push('File Number is required.');
      if (perKatha <= 0) errors.push('Price per Katha must be greater than 0.');
      if (downPayment < 0) errors.push('Down Payment cannot be negative.');
      if (bookingMoney < 0) errors.push('Booking Money cannot be negative.');

      if (errors.length > 0) {
        alert(errors.join('\n'));
        return;
      }

      var $btn = $(this);
      $btn.prop('disabled', true).html('<i class="spinner-border spinner-border-sm me-1"></i>Checking...');

      // First check plot booking status
      checkPlotBooking(purchaseId, function(checkResult) {
        if (checkResult.status === 200 && checkResult.available === false) {
          // Plot is not available, ask for confirmation
          var confirmMsg = 'This plot is currently ' + (checkResult.status_label || 'unavailable') + '. ';
          confirmMsg += 'Do you want to force assign this plot?';
          
          if (!confirm(confirmMsg)) {
            $btn.prop('disabled', false).html('<i class="lni lni-save me-1"></i>Save Purchase');
            return;
          }
        }

        // Proceed with registration
        var payload = {
          s: 'register_purchase',
          client_id: <?= (int)$wo['client']['id'] ?>,
          project_id: projectId,
          purchase_id: purchaseId,
          file_num: fileNum,
          per_katha: perKatha,
          down_payment: downPayment,
          booking_money: bookingMoney,
          purchase_date: purchaseDate,
          nominee_ids: Array.isArray(nomineeIds) ? nomineeIds : [nomineeIds],
          force: checkResult.status === 200 && checkResult.available === false ? 1 : 0
        };

        $btn.html('<i class="spinner-border spinner-border-sm me-1"></i>Saving...');

        $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory', payload)
          .done(function(response){
            var data = typeof response === 'string' ? JSON.parse(response) : response;
            
            if (data.status === 200) {
              alert('Purchase added successfully!');
              location.reload();
            } else if (data.status === 409) {
              if (confirm(data.message + '\n\nDo you want to force assign this plot?')) {
                payload.force = 1;
                $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory', payload)
                  .done(function(response2){
                    var data2 = typeof response2 === 'string' ? JSON.parse(response2) : response2;
                    if (data2.status === 200) {
                      alert('Purchase added successfully!');
                      location.reload();
                    } else {
                      alert(data2.message || 'Failed to force assign plot.');
                    }
                  })
                  .fail(function(){
                    alert('Server error occurred while forcing assignment.');
                  });
              }
            } else {
              alert(data.message || 'Failed to add purchase.');
            }
          })
          .fail(function(){
            alert('Server error occurred. Please try again.');
          })
          .always(function(){
            $btn.prop('disabled', false).html('<i class="lni lni-save me-1"></i>Save Purchase');
          });
      });
    });
  };

  // Add to global initialization
  if (typeof window.initViewClientComponents !== 'function') {
    window.initViewClientComponents = function() {
      initAddPurchaseForm();
    };
  } else {
    var originalInit = window.initViewClientComponents;
    window.initViewClientComponents = function() {
      originalInit();
      initAddPurchaseForm();
    };
  }

  // Cleanup when modal closes
  $('#viewClient-modal').on('hidden.bs.modal', function(){
    // Destroy all Select2 instances
    safeDestroySelect2($('#projectSelect'));
    safeDestroySelect2($('#purchaseSelect'));
    safeDestroySelect2($('#nomineeSelect'));
    
    // Clear cache
    searchCache = {};
    select2Instances = {};
  });

});
</script>