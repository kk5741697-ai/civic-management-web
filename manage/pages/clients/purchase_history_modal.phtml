<!-- Purchase History Modal Component -->
<div class="modal fade" id="purchaseHistoryModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-info text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-calendar me-2"></i>Purchase History & Timeline
        </h5>
        <div class="d-flex gap-2">
          <button type="button" class="btn btn-outline-light btn-sm" id="refresh_history">
            <i class="lni lni-reload"></i>
          </button>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
      </div>

      <div class="modal-body p-4">
        <input type="hidden" id="history_purchase_id" value="">
        
        <!-- Filter Controls -->
        <div class="row g-3 mb-4">
          <div class="col-md-3">
            <label class="form-label fw-medium">Filter by Type</label>
            <select id="history_filter_type" class="form-control">
              <option value="">All Activities</option>
              <option value="created">Purchase Created</option>
              <option value="payment">Payments</option>
              <option value="schedule">Schedule Changes</option>
              <option value="status">Status Updates</option>
              <option value="transfer">Transfers</option>
              <option value="notes">Notes & Comments</option>
            </select>
          </div>
          <div class="col-md-3">
            <label class="form-label fw-medium">Date Range</label>
            <select id="history_date_range" class="form-control">
              <option value="">All Time</option>
              <option value="today">Today</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
              <option value="quarter">This Quarter</option>
              <option value="year">This Year</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>
          <div class="col-md-3 d-none" id="custom_date_range">
            <label class="form-label fw-medium">From Date</label>
            <input type="date" id="history_date_from" class="form-control">
          </div>
          <div class="col-md-3 d-none" id="custom_date_range_to">
            <label class="form-label fw-medium">To Date</label>
            <input type="date" id="history_date_to" class="form-control">
          </div>
        </div>
        
        <!-- History Content -->
        <div id="history_content">
          <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading purchase history...</p>
          </div>
        </div>
      </div>

      <div class="modal-footer border-0 bg-light d-flex justify-content-between">
        <div class="text-muted small">
          <i class="lni lni-information me-1"></i>Timeline shows all activities in chronological order
        </div>
        <div class="btn-group">
          <button id="export_history" class="btn btn-info text-white">
            <i class="lni lni-download me-1"></i>Export History
          </button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="lni lni-close me-1"></i>Close
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Enhanced Timeline Styles */
.timeline {
  position: relative;
  padding-left: 30px;
}

.timeline::before {
  content: '';
  position: absolute;
  left: 15px;
  top: 0;
  bottom: 0;
  width: 2px;
  background: linear-gradient(to bottom, #007bff, #6c757d);
}

.timeline-item {
  position: relative;
  margin-bottom: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.timeline-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.timeline-marker {
  position: absolute;
  left: -23px;
  top: 20px;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  border: 3px solid white;
  box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.timeline-marker.bg-success { background-color: #28a745; }
.timeline-marker.bg-info { background-color: #17a2b8; }
.timeline-marker.bg-warning { background-color: #ffc107; }
.timeline-marker.bg-danger { background-color: #dc3545; }
.timeline-marker.bg-primary { background-color: #007bff; }
.timeline-marker.bg-secondary { background-color: #6c757d; }

.timeline-content {
  padding: 20px;
}

.timeline-header {
  display: flex;
  justify-content: between;
  align-items: center;
  margin-bottom: 10px;
}

.timeline-title {
  margin: 0;
  font-size: 1.1em;
  font-weight: 600;
  color: #2c3e50;
}

.timeline-date {
  font-size: 0.9em;
  color: #6c757d;
  font-weight: 500;
}

.timeline-description {
  color: #495057;
  margin-bottom: 10px;
  line-height: 1.6;
}

.timeline-meta {
  display: flex;
  gap: 15px;
  align-items: center;
  flex-wrap: wrap;
  margin-top: 15px;
  padding-top: 15px;
  border-top: 1px solid #e9ecef;
}

.timeline-badge {
  padding: 4px 12px;
  border-radius: 15px;
  font-size: 0.8em;
  font-weight: 600;
  text-transform: uppercase;
}

.timeline-user {
  color: #6c757d;
  font-size: 0.9em;
}

.timeline-amount {
  font-weight: 700;
  font-size: 1.1em;
}

.amount-positive { color: #28a745; }
.amount-negative { color: #dc3545; }
.amount-neutral { color: #17a2b8; }

/* Filter Controls */
.filter-controls {
  background: #f8f9fa;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
}

/* Empty State */
.empty-timeline {
  text-align: center;
  padding: 60px 20px;
  color: #6c757d;
}

.empty-timeline i {
  font-size: 4rem;
  margin-bottom: 20px;
  opacity: 0.5;
}

/* Loading State */
.timeline-loading {
  text-align: center;
  padding: 40px;
}

.timeline-loading .spinner-border {
  margin-bottom: 15px;
}
</style>

<script>
jQuery(function($){
  'use strict';

  var currentPurchaseId = null;
  var historyData = [];
  var bsHistoryModal = null;

  // Initialize purchase history functionality
  function initPurchaseHistory() {
    // Initialize Bootstrap modal
    try {
      var modalEl = document.getElementById('purchaseHistoryModal');
      if (modalEl) {
        bsHistoryModal = new bootstrap.Modal(modalEl);
      }
    } catch(e) {
      console.warn('Bootstrap modal initialization failed:', e);
    }

    // Global view history function
    window.viewPurchaseHistory = function(purchaseId) {
      currentPurchaseId = purchaseId;
      $('#history_purchase_id').val(purchaseId);
      
      // Reset filters
      $('#history_filter_type, #history_date_range').val('');
      $('#custom_date_range, #custom_date_range_to').addClass('d-none');
      
      // Show modal and load data
      if (bsHistoryModal) {
        bsHistoryModal.show();
      } else {
        $('#purchaseHistoryModal').modal('show');
      }
      loadPurchaseHistory(purchaseId);
    };

    // Filter handlers
    $('#history_filter_type, #history_date_range').on('change', function(){
      if (currentPurchaseId) {
        filterAndDisplayHistory();
      }
    });

    $('#history_date_range').on('change', function(){
      if ($(this).val() === 'custom') {
        $('#custom_date_range, #custom_date_range_to').removeClass('d-none');
      } else {
        $('#custom_date_range, #custom_date_range_to').addClass('d-none');
      }
      
      if (currentPurchaseId) {
        filterAndDisplayHistory();
      }
    });

    $('#history_date_from, #history_date_to').on('change', function(){
      if (currentPurchaseId) {
        filterAndDisplayHistory();
      }
    });

    // Refresh handler
    $('#refresh_history').on('click', function(){
      if (currentPurchaseId) {
        loadPurchaseHistory(currentPurchaseId, true);
      }
    });

    // Export handler
    $('#export_history').on('click', function(){
      if (currentPurchaseId) {
        exportPurchaseHistory(currentPurchaseId);
      }
    });
  }

  function loadPurchaseHistory(purchaseId, forceRefresh = false) {
    $('#history_content').html(`
      <div class="timeline-loading">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading purchase history...</p>
      </div>
    `);

    var url = Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_history&purchase_id=' + purchaseId;
    if (forceRefresh) url += '&refresh=1';

    $.get(url)
      .done(function(response){
        var data = typeof response === 'string' ? JSON.parse(response) : response;
        
        if (data && data.status === 200) {
          historyData = data.history || [];
          filterAndDisplayHistory();
        } else {
          showHistoryError('Failed to load purchase history: ' + (data.message || 'Unknown error'));
        }
      })
      .fail(function(){
        showHistoryError('Server error occurred while loading history.');
      });
  }

  function filterAndDisplayHistory() {
    var filtered = historyData.slice();
    
    // Filter by type
    var typeFilter = $('#history_filter_type').val();
    if (typeFilter) {
      filtered = filtered.filter(function(item){
        return item.type === typeFilter;
      });
    }
    
    // Filter by date range
    var rangeFilter = $('#history_date_range').val();
    if (rangeFilter) {
      var today = new Date();
      var fromDate = null;
      var toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);
      
      switch(rangeFilter) {
        case 'today':
          fromDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
          break;
        case 'week':
          fromDate = new Date(today.getTime() - (7 * 24 * 60 * 60 * 1000));
          break;
        case 'month':
          fromDate = new Date(today.getFullYear(), today.getMonth(), 1);
          break;
        case 'quarter':
          var quarterStart = Math.floor(today.getMonth() / 3) * 3;
          fromDate = new Date(today.getFullYear(), quarterStart, 1);
          break;
        case 'year':
          fromDate = new Date(today.getFullYear(), 0, 1);
          break;
        case 'custom':
          var from = $('#history_date_from').val();
          var to = $('#history_date_to').val();
          if (from) fromDate = new Date(from);
          if (to) toDate = new Date(to + 'T23:59:59');
          break;
      }
      
      if (fromDate) {
        filtered = filtered.filter(function(item){
          var itemDate = new Date(item.created_at || item.date);
          return itemDate >= fromDate && itemDate <= toDate;
        });
      }
    }
    
    displayHistory(filtered);
  }

  function displayHistory(items) {
    if (!items || items.length === 0) {
      $('#history_content').html(`
        <div class="empty-timeline">
          <i class="lni lni-calendar"></i>
          <h5>No History Found</h5>
          <p class="text-muted">No activities match your current filters.</p>
        </div>
      `);
      return;
    }

    // Sort by date (newest first)
    items.sort(function(a, b){
      return new Date(b.created_at || b.date) - new Date(a.created_at || a.date);
    });

    var timeline = '<div class="timeline">';
    
    items.forEach(function(item){
      var markerClass = getMarkerClass(item.type);
      var badgeClass = getBadgeClass(item.type);
      var date = new Date(item.created_at || item.date);
      var formattedDate = date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      
      timeline += `
        <div class="timeline-item">
          <div class="timeline-marker ${markerClass}"></div>
          <div class="timeline-content">
            <div class="timeline-header">
              <h6 class="timeline-title">${item.title || 'Activity'}</h6>
              <span class="timeline-date">${formattedDate}</span>
            </div>
            <div class="timeline-description">${item.description || 'No description available'}</div>
            <div class="timeline-meta">
              <span class="timeline-badge ${badgeClass}">${item.type || 'activity'}</span>
              ${item.user ? '<span class="timeline-user"><i class="lni lni-user me-1"></i>' + item.user + '</span>' : ''}
              ${item.amount ? '<span class="timeline-amount ' + getAmountClass(item.amount) + '">৳' + formatMoney(item.amount) + '</span>' : ''}
            </div>
          </div>
        </div>
      `;
    });
    
    timeline += '</div>';
    $('#history_content').html(timeline);
  }

  function getMarkerClass(type) {
    switch(type) {
      case 'created': return 'bg-success';
      case 'payment': return 'bg-info';
      case 'schedule': return 'bg-warning';
      case 'status': return 'bg-primary';
      case 'transfer': return 'bg-danger';
      case 'notes': return 'bg-secondary';
      default: return 'bg-secondary';
    }
  }

  function getBadgeClass(type) {
    switch(type) {
      case 'created': return 'badge bg-success';
      case 'payment': return 'badge bg-info';
      case 'schedule': return 'badge bg-warning';
      case 'status': return 'badge bg-primary';
      case 'transfer': return 'badge bg-danger';
      case 'notes': return 'badge bg-secondary';
      default: return 'badge bg-secondary';
    }
  }

  function getAmountClass(amount) {
    var amt = parseFloat(amount);
    if (amt > 0) return 'amount-positive';
    if (amt < 0) return 'amount-negative';
    return 'amount-neutral';
  }

  function formatMoney(amount) {
    return Number(amount).toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    });
  }

  function showHistoryError(message) {
    $('#history_content').html(`
      <div class="alert alert-danger">
        <i class="lni lni-warning me-2"></i>
        ${message}
      </div>
    `);
  }

  function exportPurchaseHistory(purchaseId) {
    var format = 'excel'; // Default format
    
    // Show format selection
    var formats = ['Excel', 'PDF', 'CSV'];
    var selectedFormat = prompt('Export format:\n' + formats.map((f, i) => (i+1) + '. ' + f).join('\n'), '1');
    
    if (!selectedFormat) return;
    
    var formatIndex = parseInt(selectedFormat) - 1;
    if (formatIndex < 0 || formatIndex >= formats.length) {
      alert('Invalid format selection.');
      return;
    }
    
    format = formats[formatIndex].toLowerCase();
    
    var $btn = $('#export_history');
    var originalText = $btn.html();
    $btn.prop('disabled', true).html('<i class="spinner-border spinner-border-sm me-1"></i>Exporting...');

    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=export_purchase_history', {
      purchase_id: purchaseId,
      format: format,
      type_filter: $('#history_filter_type').val(),
      date_range: $('#history_date_range').val(),
      date_from: $('#history_date_from').val(),
      date_to: $('#history_date_to').val()
    })
      .done(function(response){
        var data = typeof response === 'string' ? JSON.parse(response) : response;
        
        if (data && data.status === 200 && data.download_url) {
          // Create download link
          var link = document.createElement('a');
          link.href = data.download_url;
          link.download = data.filename || 'purchase_history.' + format;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          // Show success message
          var $alert = $('<div class="alert alert-success alert-dismissible fade show mt-3">' +
            '<i class="lni lni-checkmark me-2"></i>History exported successfully!' +
            '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
            '</div>');
          $('.modal-body').prepend($alert);
          
          setTimeout(function(){ $alert.remove(); }, 5000);
          
        } else {
          alert(data.message || 'Failed to export history');
        }
      })
      .fail(function(){
        alert('Server error while exporting history');
      })
      .always(function(){
        $btn.prop('disabled', false).html(originalText);
      });
  }

  // Add to global initialization
  if (typeof window.initViewClientComponents !== 'function') {
    window.initViewClientComponents = function() {
      initPurchaseHistory();
    };
  } else {
    var originalInit = window.initViewClientComponents;
    window.initViewClientComponents = function() {
      originalInit();
      initPurchaseHistory();
    };
  }

  // Cleanup
  $('#viewClient-modal').on('hidden.bs.modal.purchaseHistory', function(){
    if (bsHistoryModal) {
      try {
        bsHistoryModal.dispose();
        bsHistoryModal = null;
      } catch(e) {}
    }
    currentPurchaseId = null;
    historyData = [];
    $(document).off('.purchaseHistory');
  });

});
</script>