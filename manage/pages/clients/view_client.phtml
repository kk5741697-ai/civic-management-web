<?php
/* view_client.phtml
   Complete client view with enhanced payment schedule functionality and all dropdown actions
*/
Global $project_mapping;
global $db, $wo;

// Fetch users
$get_users = $db->orderBy('position', 'ASC')->where('active', '1')->where('banned', '0')->get(T_USERS);

// Totals - Fixed calculations
$clientId = $wo['client']['id'];

// Fixed total amount calculation - sum of (per_katha * katha) from booking_helper with proper joins
$total_amount = 0;
$total_purchase = 0;
try {
    $helpers = $db->rawQuery("
        SELECT bh.per_katha, b.katha 
        FROM `" . T_BOOKING_HELPER . "` bh
        JOIN `" . T_BOOKING . "` b ON b.id = bh.booking_id
        WHERE bh.client_id = ? AND bh.status != '4'
    ", [$clientId]);
    
    foreach ($helpers as $helper) {
        $per_katha = (float)($helper->per_katha ?? 0);
        $katha = (float)($helper->katha ?? 0);
        $total_amount += ($per_katha * $katha);
        $total_purchase++;
    }
} catch (Exception $e) {
    $total_amount = 0;
    $total_purchase = 0;
}

$total_paid    = (float) $db->where('customer_id', $clientId)->getValue(T_INVOICE, 'SUM(pay_amount)') ?: 0;
$total_due     = $total_amount - $total_paid;
$total_invoice = (int)   $db->where('customer_id', $clientId)->getValue(T_INVOICE, 'COUNT(*)');

//crm_nominees -> T_CRM_NOMINEES
$get_nominees = $db->where('customer_id', $clientId)->orderBy('name', 'ASC')->get(T_CRM_NOMINEES);
?>

<div class="modal fade full_screen" id="viewClient-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content border-0 shadow-lg">

      <!-- Header with modern styling -->
      <div class="modal-header no-print bg-gradient-primary text-white border-0">
        <div class="d-flex align-items-center gap-3">
          <div class="avatar rounded-circle bg-white text-primary d-flex align-items-center justify-content-center" style="width:48px;height:48px;font-weight:700;font-size:18px;">
            <?= strtoupper(substr($wo['client']['name'],0,1)) ?>
          </div>
          <div>
            <h4 class="mb-0 text-white"><?= htmlspecialchars($wo['client']['name']) ?></h4>
            <div class="text-white-50 small"><?= htmlspecialchars($wo['client']['email'] ?? '') ?></div>
          </div>
        </div>

        <div class="d-flex align-items-center gap-2">
          <button id="printButton" class="btn btn-outline-light btn-sm" title="Print booking form">
            <i class="lni lni-printer me-1"></i> Print
          </button>
          <button type="button" class="btn btn-outline-light btn-sm" data-bs-dismiss="modal" aria-label="Close">
            <i class="lni lni-close"></i>
          </button>
        </div>
      </div>

      <div class="view-container form-toggle">
        <!-- Summary Cards with modern design -->
        <section id="client_details" class="no-print mt-4 px-4">
          <div class="row g-3 mb-4">
            <?php foreach ([['Plots', number_format($total_purchase), 'cart', 'info'], ['Total', "৳".number_format($total_amount), 'bag-handle-sharp', 'primary'], ['Paid', "৳".number_format($total_paid), 'checkmark-circle', 'success'], ['Due', "৳".number_format($total_due), 'time', 'danger']] as [$title, $value, $icon, $variant]): ?>
              <div class="col-6 col-md-4 col-lg">
                <div class="card h-100 border-0 shadow-sm">
                  <div class="card-body d-flex align-items-center p-3">
                    <div class="flex-grow-1">
                      <p class="text-muted mb-1 small fw-medium"><?= htmlspecialchars($title) ?></p>
                      <h5 class="mb-0 fw-bold"><?= htmlspecialchars($value) ?></h5>
                    </div>
                    <div class="fs-2 text-<?= $variant ?>">
                      <ion-icon name="<?= htmlspecialchars($icon) ?>"></ion-icon>
                    </div>
                  </div>
                </div>
              </div>
            <?php endforeach; ?>
          </div>

          <!-- Purchase Table with modern styling -->
          <div class="card border-0 shadow-sm">
            <div class="card-header bg-light border-0 py-3">
              <h6 class="mb-0 fw-semibold text-dark">Purchase Details</h6>
            </div>
            <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-hover mb-0" id="purchaseTable">
                  <thead class="table-light">
                    <tr>
                      <th class="fw-semibold">Project</th>
                      <th class="fw-semibold">Block</th>
                      <th class="fw-semibold">Katha</th>
                      <th class="fw-semibold">Plot</th>
                      <th class="fw-semibold">Road</th>
                      <th class="fw-semibold">File</th>
                      <th class="fw-semibold">Date</th>
                      <th class="fw-semibold">Status</th>
                      <th class="fw-semibold text-center">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <?php
                    foreach ($wo['booking_helper'] as $index => $p):
                      $client = $p['client'];
                      $booking = $p['booking'];

                      $bg_url = '';
                      if ($booking['project'] === 'moon-hill') $bg_url = "/manage/pages/clients/moon-hill.jpg?version=4.4.51";
                      elseif ($booking['project'] === 'hill-town') $bg_url = "/manage/pages/clients/hill-town.jpg?version=4.4.51";

                      $proj_raw = isset($booking['project']) ? $booking['project'] : '';
                      $proj_raw = str_replace('-', ' ', $proj_raw);
                      $proj_raw = ucwords($proj_raw);
                      $proj_html = htmlspecialchars($proj_raw, ENT_QUOTES);
                      if ($proj_html === '') $proj_html = '-';
                    ?>
                    <!-- Booking Form (print area) -->
                    <section class="print_area d-none"
                             id="print_area_<?= (int)$p['id'] ?>"
                             data-purchase-id="<?= (int)$p['id'] ?>"
                             style="background: url('<?= $bg_url ?>') no-repeat center center; background-size: cover;">
                      <div class="invoice-layout">
                        <div class="changable-content" id="changable_modal_content_<?= $index ?>">
                          <?php
                            $field_positions = $db->where('project_id', $project_mapping[$booking['project']])->get('field_positions');
                            foreach ($field_positions as $fp):
                              $style = json_decode($fp->style_json, true);
                              $name = $fp->field_name;
                              $top = $style['top'] ?? '0px';
                              $left = $style['left'] ?? '0px';
                              $width = $style['width'] ?? 'auto';
                              $fontSize = $style['fontSize'] ?? '15px';
                              $letterSpacing = $style['letterSpacing'] ?? '0px';
                              $textAlign = $style['textAlign'] ?? 'left';
                              $value = '';

                              switch ($name) {
                                case 'client_id': $value = $client['id']; break;
                                case 'project_name': $value = $proj_html; break;
                                case 'applicant_name': $value = $client['name']; break;
                                case 'block': $value = $booking['block']; break;
                                case 'plot': $value = $booking['plot']; break;
                                case 'katha': $value = $booking['katha']; break;
                                case 'facing': $value = $booking['facing']; break;
                                case 'road': $value = $booking['road']; break;
                                case 'date': $value = date('d m Y', $p['time']); break;
                                case 'reference':
                                  if (!empty($wo['additional']['reference'])) {
                                    $refUser = Wo_UserData($wo['additional']['reference']);
                                    $value = $refUser['name'] ?? '';
                                  }
                                  break;
                                default:
                                  if (!empty($wo['additional'][$name])) $value = htmlspecialchars($wo['additional'][$name]);
                              }
                          ?>
                            <span class="<?= htmlspecialchars($name, ENT_QUOTES) ?>"
                                  style="position:absolute;top:<?= htmlspecialchars($top, ENT_QUOTES) ?>;left:<?= htmlspecialchars($left, ENT_QUOTES) ?>;width:<?= htmlspecialchars($width, ENT_QUOTES) ?>;font-size:<?= htmlspecialchars($fontSize, ENT_QUOTES) ?>;text-align:<?= htmlspecialchars($textAlign, ENT_QUOTES) ?>;letter-spacing:<?= htmlspecialchars($letterSpacing, ENT_QUOTES) ?>;white-space:normal;line-height:1.4;">
                              <?= htmlspecialchars($value) ?>
                            </span>
                          <?php endforeach; ?>
                        </div>
                      </div>
                    </section>

                    <!-- Purchase Row -->
                    <tr id="purchaseRow_<?= (int)$p['id'] ?>">
                      <td><?= $proj_html ?></td>
                      <td><?= ($booking['project'] == 'hill-town') ? htmlspecialchars(ucwords($booking['block'])) : 'N/A' ?></td>
                      <td><?= htmlspecialchars($booking['katha']) ?></td>
                      <td><?= htmlspecialchars($booking['plot']) ?></td>
                      <td><?= htmlspecialchars($booking['road']) ?></td>
                      <td><?= htmlspecialchars($booking['file_num']) ?></td>
                      <td><?= htmlspecialchars(date('d M Y', $p['time'])) ?></td>
                      <td>
                        <?php
                          $sr = (string)($booking['status'] ?? '');
                          if ($sr === '1') echo '<span class="badge bg-info"> Available </span>';
                          elseif ($sr === '2') echo '<span class="badge bg-success"> Sold </span>';
                          elseif ($sr === '3') echo '<span class="badge bg-success"> Complete </span>';
                          elseif ($sr === '4') echo '<span class="badge bg-danger"> Canceled </span>';
                          else echo '<span class="badge bg-info"> Available </span>';
                        ?>
                      </td>
                      <td class="text-center">
                        <!-- Enhanced Dropdown Actions -->
                        <div class="dropdown">
                          <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                                  id="dropdownMenuButton<?= (int)$p['id'] ?>" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="lni lni-more-alt"></i> More
                          </button>
                          <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="dropdownMenuButton<?= (int)$p['id'] ?>">
                            <li>
                              <h6 class="dropdown-header"><i class="lni lni-cog me-1"></i> Purchase Actions</h6>
                            </li>
                            <li>
                              <a class="dropdown-item print-booking-form" href="javascript:;" data-id="<?= (int)$p['id'] ?>">
                                <i class="lni lni-printer me-2 text-primary"></i> Print Booking Form
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item update_installment" href="javascript:;" data-id="<?= (int)$p['id'] ?>">
                                <i class="lni lni-dollar me-2 text-success"></i> Payment Schedule
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item print_payment_schedule" href="javascript:;" data-id="<?= (int)$p['id'] ?>">
                                <i class="lni lni-file-text me-2 text-info"></i> Print Payment Schedule
                              </a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                              <h6 class="dropdown-header"><i class="lni lni-layers me-1"></i> Management</h6>
                            </li>
                            <li>
                              <a class="dropdown-item change_plot_btn" href="javascript:;" data-id="<?= (int)$p['id'] ?>">
                                <i class="lni lni-shuffle me-2 text-warning"></i> Change Plot
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item" href="javascript:;" onclick="transferPurchase(<?= (int)$p['id'] ?>)">
                                <i class="lni lni-users me-2 text-info"></i> Transfer Purchase
                              </a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                              <h6 class="dropdown-header"><i class="lni lni-files me-1"></i> Reports & History</h6>
                            </li>
                            <li>
                              <a class="dropdown-item" href="javascript:;" onclick="viewPurchaseHistory(<?= (int)$p['id'] ?>)">
                                <i class="lni lni-calendar me-2 text-info"></i> Purchase History
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item" href="javascript:;" onclick="generatePurchaseReport(<?= (int)$p['id'] ?>)">
                                <i class="lni lni-stats-up me-2 text-primary"></i> Generate Report
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item" href="javascript:;" onclick="exportPurchaseData(<?= (int)$p['id'] ?>)">
                                <i class="lni lni-download me-2 text-success"></i> Export Data
                              </a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                              <h6 class="dropdown-header"><i class="lni lni-warning me-1"></i> Critical Actions</h6>
                            </li>
                            <li>
                              <a class="dropdown-item" href="javascript:;" onclick="suspendPurchase(<?= (int)$p['id'] ?>)">
                                <i class="lni lni-pause me-2 text-warning"></i> Suspend Purchase
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item cancel-purchase" href="javascript:;" data-id="<?= (int)$p['id'] ?>">
                                <i class="lni lni-close me-2 text-danger"></i> Cancel Purchase
                              </a>
                            </li>
                          </ul>
                        </div>
                      </td>
                    </tr>
                    <?php endforeach; ?>
                  </tbody>
                </table>
              </div>

              <!-- Add Purchase Button -->
              <div class="p-3 border-top bg-light">
                <button class="btn btn-success btn-sm" id="addPurchaseBtn">
                  <i class="lni lni-plus me-1"></i> Add Purchase
                </button>
              </div>

              <!-- Add Purchase Form -->
              <div id="addPurchaseForm" class="card mx-3 mb-3 border" style="display:none;">
                <div class="card-body">
                  <div class="row g-2">
                    <!-- Select project -->
                    <div class="col-md-4 d-flex flex-column">
                      <label for="projectSelect" class="form-label fw-medium">Project</label>
                      <select id="projectSelect" class="form-control">
                        <option value="">Select Project</option>
                        <?php foreach ($db->orderBy('id', 'ASC')->get(T_PROJECTS) as $proj): ?>
                          <option value="<?= htmlspecialchars($proj->slug, ENT_QUOTES) ?>"><?= htmlspecialchars($proj->name) ?></option>
                        <?php endforeach; ?>
                      </select>
                    </div>

                    <!-- Select plot -->
                    <div class="col-md-8 d-flex flex-column">
                      <label for="purchaseSelect" class="form-label fw-medium">Plot</label>
                      <select id="purchaseSelect" class="form-control"></select>
                    </div>
                  </div>

                  <!-- Hidden details shown after plot selected -->
                  <div id="purchaseDetails" class="mt-3" style="display:none;">
                    <div class="row g-2">
                      <div class="col-md-2">
                        <label for="detailBlock" class="form-label fw-medium">Block</label>
                        <input type="text" id="detailBlock" class="form-control" readonly tabindex="-1">
                      </div>
                      <div class="col-md-2">
                        <label for="detailPlot" class="form-label fw-medium">Plot</label>
                        <input type="text" id="detailPlot" class="form-control" readonly tabindex="-1">
                      </div>
                      <div class="col-md-3">
                        <label for="detailRoad" class="form-label fw-medium">Road</label>
                        <input type="text" id="detailRoad" class="form-control" readonly tabindex="-1">
                      </div>
                      <div class="col-md-2">
                        <label for="detailStatus" class="form-label fw-medium">Status</label>
                        <input type="text" id="detailStatus" class="form-control" readonly tabindex="-1">
                      </div>
                      <div class="col-md-3">
                        <label for="purchaseDate" class="form-label fw-medium">Booking Date</label>
                        <input type="date" id="purchaseDate" class="form-control" value="<?= date('Y-m-d') ?>">
                      </div>
                      <div class="col-md-2">
                        <label for="detailFacing" class="form-label fw-medium">Facing</label>
                        <input type="text" id="detailFacing" class="form-control" readonly tabindex="-1">
                      </div>
                    </div>

                    <div class="row g-2 mt-2">
                      <div class="col-md-3">
                        <label for="file_num" class="form-label fw-medium">File Number</label>
                        <input type="text" id="file_num" class="form-control" placeholder="File Number" required>
                      </div>
                      <div class="col-md-2">
                        <label for="perKathaPrice" class="form-label fw-medium">Price per Katha</label>
                        <input type="number" id="perKathaPrice" class="form-control" placeholder="৳" required>
                      </div>
                      <div class="col-md-2">
                        <label for="bookingMoney" class="form-label fw-medium">Booking Money (৳)</label>
                        <input type="number" id="bookingMoney" class="form-control" placeholder="৳" value="0" required>
                      </div>
                      <div class="col-md-2">
                        <label for="downPayment" class="form-label fw-medium">Down Payment</label>
                        <input type="number" id="downPayment" class="form-control" placeholder="৳" required>
                      </div>
                      <div class="col-md-1">
                        <label for="totalPrice" class="form-label fw-medium">Total Price</label>
                        <input type="text" id="totalPrice" class="form-control" readonly tabindex="-1">
                      </div>
                      <div class="col-md-2">
                        <label for="duePrice" class="form-label fw-medium">Due After Advance</label>
                        <input type="text" id="duePrice" class="form-control" readonly tabindex="-1">
                      </div>
                    </div>

                    <!-- Nominees multi-select -->
                    <div class="row g-2 mt-2">
                      <div class="col-md-12 d-flex flex-column">
                        <label for="nomineeSelect" class="form-label fw-medium">Nominees</label>
                        <select id="nomineeSelect" name="nominee_ids[]" class="form-select" multiple="multiple" data-placeholder="Select nominee(s)">
                          <?php if (!empty($get_nominees) && is_array($get_nominees)): foreach ($get_nominees as $nom): ?>
                            <option value="<?= (int)$nom->id ?>"><?= htmlspecialchars($nom->name . (!empty($nom->relation) ? ' — ' . $nom->relation : '')) ?></option>
                          <?php endforeach; endif; ?>
                        </select>
                        <small class="form-text text-muted">Choose one or more nominees for this purchase (optional).</small>
                      </div>
                    </div>
                  </div>

                  <div class="mt-3 d-flex gap-2">
                    <button class="btn btn-primary" id="savePurchaseBtn">Save</button>
                    <button class="btn btn-secondary" id="cancelPurchaseBtn">Cancel</button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Client Details Card -->
          <div class="card mt-4 border-0 shadow-sm">
            <div class="card-header bg-light border-0 py-3">
              <h6 class="mb-0 fw-semibold text-dark">Client Information</h6>
            </div>
            <div class="card-body">
              <div class="row g-3">
                <div class="col-md-6">
                  <div class="d-flex align-items-center mb-3">
                    <ion-icon name="person-circle" class="text-primary fs-5 me-2"></ion-icon>
                    <div>
                      <small class="text-muted">Name</small>
                      <div class="fw-medium"><?= htmlspecialchars($wo['client']['name']) ?></div>
                    </div>
                  </div>
                  
                  <div class="d-flex align-items-center mb-3">
                    <ion-icon name="location" class="text-primary fs-5 me-2"></ion-icon>
                    <div>
                      <small class="text-muted">Address</small>
                      <div class="fw-medium"><?= htmlspecialchars($wo['client']['address']) ?></div>
                    </div>
                  </div>
                  
                  <div class="d-flex align-items-center mb-3">
                    <ion-icon name="call" class="text-primary fs-5 me-2"></ion-icon>
                    <div>
                      <small class="text-muted">Phone</small>
                      <div class="fw-medium"><?= htmlspecialchars($wo['client']['phone']) ?></div>
                    </div>
                  </div>

                  <?php if (!empty($wo['additional']['reference'])): ?>
                    <div class="d-flex align-items-center mb-3">
                      <ion-icon name="link" class="text-primary fs-5 me-2"></ion-icon>
                      <div>
                        <small class="text-muted">Reference</small>
                        <div class="fw-medium"><?= htmlspecialchars(Wo_UserData($wo['additional']['reference'])['name']) ?></div>
                      </div>
                    </div>
                  <?php endif; ?>
                </div>

                <div class="col-md-6">
                  <?php if ($wo['additional']): ?>
                    <h6 class="fw-semibold mb-3">Additional Details</h6>
                    <div class="table-responsive">
                      <table class="table table-sm table-borderless mb-0">
                        <tbody>
                          <?php foreach ([
                            'spouse_name'=>'Spouse Name','fathers_name'=>'Father\'s Name','permanent_addr'=>'Permanent Address',
                            'email'=>'Email','nationality'=>'Nationality','birthday'=>'Birthday','religion'=>'Religion',
                            'nid'=>'National ID','passport'=>'Passport'
                          ] as $key=>$label): if (!empty($wo['additional'][$key])):
                            $val = htmlspecialchars($wo['additional'][$key]);
                          ?>
                            <tr>
                              <td class="text-muted small" style="width:40%"><?= $label ?></td>
                              <td class="fw-medium"><?= $val ?></td>
                            </tr>
                          <?php endif; endforeach; ?>
                        </tbody>
                      </table>
                    </div>
                  <?php endif; ?>
                </div>
              </div>

              <div class="mt-4 pt-3 border-top">
                <button class="btn btn-outline-primary show-booking-form">
                  <i class="lni lni-print me-1"></i> Print Booking Form
                </button>
              </div>
            </div>
          </div>
        </section>
      </div>
      
<!-- Cancel Purchase Modal -->
<div class="modal fade" id="cancelPurchaseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
      <div class="modal-content border-0 shadow-lg">
        <div class="modal-header border-0 bg-danger text-white">
          <h5 class="modal-title mb-0">Cancel Purchase</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body py-4">
          <p class="text-muted mb-3">Select cancellation date for this purchase</p>
          <input type="date" id="cancel_purchase_date" class="form-control" value="<?= date('Y-m-d') ?>">
          <input type="hidden" id="cancel_purchase_id" value="">
          <div id="cancelPurchaseError" class="text-danger small mt-2" style="display:none;"></div>
        </div>
        <div class="modal-footer border-0 bg-light">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" id="confirmCancelPurchaseBtn" class="btn btn-danger">Confirm Cancellation</button>
        </div>
      </div>
    </div>
</div>

<!-- Transfer Purchase Modal -->
<div class="modal fade" id="transferPurchaseModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-md modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-info text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-users me-2"></i>Transfer Purchase
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body py-4">
        <input type="hidden" id="transfer_purchase_id" value="">
        
        <div class="mb-3">
          <label class="form-label fw-medium">Select Target Client</label>
          <select id="transfer_client_select" class="form-control">
            <option value="">Choose client to transfer to...</option>
          </select>
        </div>

        <div class="mb-3">
          <label class="form-label fw-medium">Transfer Date</label>
          <input type="date" id="transfer_date" class="form-control" value="<?= date('Y-m-d') ?>">
        </div>

        <div class="mb-3">
          <label class="form-label fw-medium">Transfer Reason</label>
          <textarea id="transfer_reason" class="form-control" rows="3" placeholder="Enter reason for transfer..."></textarea>
        </div>

        <div class="alert alert-warning">
          <strong>Note:</strong> This will transfer the purchase to the selected client. The action cannot be undone.
        </div>

        <div class="alert alert-danger d-none" id="transfer_error" role="alert"></div>
      </div>

      <div class="modal-footer border-0 bg-light">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="transfer_purchase_save" class="btn btn-info text-white">
          <i class="lni lni-users me-1"></i>Transfer Purchase
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Suspend Purchase Modal -->
<div class="modal fade" id="suspendPurchaseModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-md modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-warning text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-pause me-2"></i>Suspend Purchase
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body py-4">
        <input type="hidden" id="suspend_purchase_id" value="">
        
        <div class="mb-3">
          <label class="form-label fw-medium">Suspension Date</label>
          <input type="date" id="suspend_date" class="form-control" value="<?= date('Y-m-d') ?>">
        </div>

        <div class="mb-3">
          <label class="form-label fw-medium">Suspension Duration</label>
          <select id="suspend_duration" class="form-control">
            <option value="30">30 Days</option>
            <option value="60">60 Days</option>
            <option value="90">90 Days</option>
            <option value="180">6 Months</option>
            <option value="365">1 Year</option>
            <option value="custom">Custom Duration</option>
          </select>
        </div>

        <div class="mb-3 d-none" id="custom_duration_field">
          <label class="form-label fw-medium">Custom Duration (Days)</label>
          <input type="number" id="custom_duration_days" class="form-control" min="1" placeholder="Enter number of days">
        </div>

        <div class="mb-3">
          <label class="form-label fw-medium">Suspension Reason</label>
          <textarea id="suspend_reason" class="form-control" rows="3" placeholder="Enter reason for suspension..." required></textarea>
        </div>

        <div class="alert alert-warning">
          <strong>Note:</strong> Suspended purchases will be temporarily inactive and won't appear in regular reports.
        </div>

        <div class="alert alert-danger d-none" id="suspend_error" role="alert"></div>
      </div>

      <div class="modal-footer border-0 bg-light">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="suspend_purchase_save" class="btn btn-warning text-white">
          <i class="lni lni-pause me-1"></i>Suspend Purchase
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Purchase History Modal -->
<div class="modal fade" id="purchaseHistoryModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-info text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-calendar me-2"></i>Purchase History
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <input type="hidden" id="history_purchase_id" value="">
        
        <div id="history_content">
          <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading purchase history...</p>
          </div>
        </div>
      </div>

      <div class="modal-footer border-0 bg-light">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button id="export_history" class="btn btn-info text-white">
          <i class="lni lni-download me-1"></i>Export History
        </button>
      </div>
    </div>
  </div>
</div>

    </div>
  </div>
</div>

<!-- Enhanced Update Installment Modal -->
<div class="modal fade" id="updateInstallmentModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-success text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-dollar me-2"></i>Payment Schedule — <span id="ui_project_name"></span>
        </h5>
        <div class="d-flex gap-2">
          <button type="button" class="btn btn-outline-light btn-sm" id="print_schedule_btn" title="Print Schedule">
            <i class="lni lni-printer"></i>
          </button>
          <button type="button" class="btn btn-outline-light btn-sm" id="export_schedule_xlsx" title="Export XLSX">
            <i class="lni lni-download"></i>
          </button>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
      </div>

      <div class="modal-body p-4">
        <input type="hidden" id="ui_purchase_id" value="">

        <!-- Summary Section -->
        <div class="row g-3 mb-4">
          <div class="col-md-2">
            <div class="card bg-primary text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Total Price</small>
                <div class="h6 mb-0">৳<span id="ui_total_price">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-info text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Booking Money</small>
                <div class="h6 mb-0">৳<span id="ui_booking_money">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-warning text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Down Payment</small>
                <div class="h6 mb-0">৳<span id="ui_down_payment">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-secondary text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Remaining</small>
                <div class="h6 mb-0">৳<span id="ui_remaining">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-dark text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Schedule Total</small>
                <div class="h6 mb-0">৳<span id="ui_schedule_total">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-success text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Paid Amount</small>
                <div class="h6 mb-0">৳<span id="ui_paid_amount">0</span></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Schedule Status Toggle -->
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="d-flex align-items-center gap-3">
              <label class="form-label mb-0 fw-medium">Schedule Status:</label>
              <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="schedule_status" id="schedule_paid" value="paid">
                <label class="btn btn-outline-success btn-sm" for="schedule_paid">
                  <i class="lni lni-checkmark me-1"></i>Paid
                </label>
                <input type="radio" class="btn-check" name="schedule_status" id="schedule_unpaid" value="unpaid" checked>
                <label class="btn btn-outline-warning btn-sm" for="schedule_unpaid">
                  <i class="lni lni-time me-1"></i>Unpaid
                </label>
              </div>
            </div>
          </div>
          <div class="col-md-6 text-end">
            <button class="btn btn-outline-secondary btn-sm" id="ui_change_schedule" style="display:none;">
              <i class="lni lni-edit me-1"></i>Change Schedule
            </button>
          </div>
        </div>

        <!-- Payment Configuration Section -->
        <div id="ui_configuration_section" class="card border-0 shadow-sm mb-4">
          <div class="card-header bg-light border-0">
            <h6 class="mb-0 fw-semibold">Payment Configuration</h6>
          </div>
          <div class="card-body">
            <div class="row g-3">
              <div class="col-md-3">
                <label class="form-label fw-medium">Mode of Payment</label>
                <select id="ui_mode" class="form-control">
                  <option value="1">Full Payment</option>
                  <option value="2">Installment</option>
                </select>
              </div>

              <!-- installment-specific controls -->
              <div id="ui_installment_controls" class="col-md-9 d-none">
                <div class="row g-3">
                  <div class="col-md-2">
                    <label class="form-label fw-medium">Installments</label>
                    <input type="number" id="ui_installments" class="form-control" min="1" value="12" step="1">
                  </div>

                  <div class="col-md-3">
                    <label class="form-label fw-medium">Adjustment Type</label>
                    <select id="ui_adjustment_type" class="form-control">
                      <option value="monthly">Monthly (even split)</option>
                      <option value="year_start">Year — Start</option>
                      <option value="year_middle">Year — Middle</option>
                      <option value="year_end" selected>Year — End</option>
                      <option value="custom">Custom (no yearly auto)</option>
                    </select>
                  </div>

                  <div class="col-md-3">
                    <label class="form-label fw-medium">Monthly Amount <small class="text-muted">(optional)</small></label>
                    <input type="number" id="ui_monthly_amount" class="form-control" placeholder="Auto-calc if empty">
                    <small class="text-muted">If empty, auto-calculated based on remaining amount after yearly adjustments.</small>
                  </div>

                  <div class="col-md-4">
                    <label class="form-label fw-medium">Yearly Adjustment <small class="text-muted">(optional)</small></label>
                    <input type="number" id="ui_yearly_adjustment" class="form-control" placeholder="e.g. 100000">
                    <small class="text-muted">Fixed amount added once per year (not added to monthly).</small>
                  </div>
                </div>
              </div>

              <div class="col-md-12">
                <div class="row g-2">
                  <div class="col-md-4">
                    <label class="form-label fw-medium">Start Date</label>
                    <input type="date" id="ui_start_date" class="form-control">
                  </div>
                  <div class="col-md-4">
                    <label class="form-label fw-medium">Start Option</label>
                    <select id="ui_start_option" class="form-control">
                      <option value="start">Start of month (1st)</option>
                      <option value="middle">Middle (15th)</option>
                      <option value="end">End of month (last day)</option>
                      <option value="exact">Exact (keep chosen day)</option>
                    </select>
                  </div>
                  <div class="col-md-4 d-flex align-items-end">
                    <div class="btn-group w-100" role="group">
                      <button class="btn btn-primary" id="ui_generate_schedule">
                        <i class="lni lni-plus me-1"></i>Generate Schedule
                      </button>
                      <button class="btn btn-outline-secondary" id="ui_reset_schedule">
                        <i class="lni lni-refresh me-1"></i>Reset
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Payment Schedule Table -->
        <div class="card border-0 shadow-sm">
          <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
            <h6 class="mb-0 fw-semibold">Payment Schedule</h6>
            <div class="btn-group btn-group-sm" role="group">
              <button type="button" class="btn btn-outline-success" id="ui_mark_all_paid">
                <i class="lni lni-checkmark me-1"></i>Mark All Paid
              </button>
              <button type="button" class="btn btn-outline-warning" id="ui_mark_all_unpaid">
                <i class="lni lni-time me-1"></i>Mark All Unpaid
              </button>
            </div>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive" style="max-height:420px;overflow:auto;">
              <table class="table table-hover mb-0" id="ui_schedule_table">
                <thead class="table-light sticky-top">
                  <tr>
                    <th style="width:45px">#</th>
                    <th style="width:160px">Date</th>
                    <th>Amount (৳)</th>
                    <th style="width:140px">Adjustment <small>(manual)</small></th>
                    <th style="width:120px">Payment Status</th>
                    <th style="width:90px">Action</th>
                  </tr>
                </thead>
                <tbody></tbody>
                <tfoot class="table-light">
                  <tr class="fw-semibold">
                    <td colspan="1">Total</td>
                    <td id="ui_total_date">-</td>
                    <td>৳<span id="ui_total_amount">0</span></td>
                    <td colspan="3"></td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
        </div>
      </div>

      <div class="modal-footer border-0 bg-light d-flex justify-content-between">
        <div class="text-muted small">
          <strong>Note:</strong> All amounts are in Bangladeshi Taka (৳)
        </div>
        <div class="btn-group" role="group">
          <button id="ui_save_schedule" class="btn btn-success">
            <i class="lni lni-save me-1"></i>Save Schedule
          </button>
          <button id="ui_close" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="lni lni-close me-1"></i>Close
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Change Plot Modal -->
<div class="modal fade" id="changePlotModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-md modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-warning text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-exchange me-2"></i>Change Booked Plot
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body py-4">
        <input type="hidden" id="change_plot_purchase_id" value="">
        
        <div class="mb-3">
          <label class="form-label fw-medium">Current Project</label>
          <input type="text" id="change_plot_project" class="form-control" readonly>
        </div>

        <div class="mb-3">
          <label class="form-label fw-medium">Available Plots</label>
          <select id="change_plot_select" class="form-control">
            <option value="">Select available plot</option>
          </select>
        </div>

        <div class="alert alert-danger d-none" id="change_plot_error" role="alert"></div>
      </div>

      <div class="modal-footer border-0 bg-light">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="change_plot_save" class="btn btn-warning text-white">
          <i class="lni lni-exchange me-1"></i>Change Plot
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Print Schedule Modal -->
<div id="printScheduleContent" class="d-none">
  <div class="schedule-print-template">
    <div class="print-header text-center mb-4">
      <h2 class="company-name mb-2" id="print_company_name"></h2>
      <h4 class="document-title">Payment Schedule</h4>
      <hr>
    </div>
    
    <div class="client-info row mb-4">
      <div class="col-6">
        <h5>Client Information</h5>
        <table class="table table-borderless table-sm">
          <tr><td class="fw-bold">Name:</td><td id="print_client_name">-</td></tr>
          <tr><td class="fw-bold">Phone:</td><td id="print_client_phone">-</td></tr>
          <tr><td class="fw-bold">Address:</td><td id="print_client_address">-</td></tr>
        </table>
      </div>
      <div class="col-6">
        <h5>Project Information</h5>
        <table class="table table-borderless table-sm">
          <tr><td class="fw-bold">Project:</td><td id="print_project_name">-</td></tr>
          <tr><td class="fw-bold">Plot:</td><td id="print_plot_info">-</td></tr>
          <tr><td class="fw-bold">File Number:</td><td id="print_file_number">-</td></tr>
        </table>
      </div>
    </div>

    <div class="purchase-info mb-4">
      <h5>Purchase Details</h5>
      <div class="row">
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Total Price</small>
              <div class="fw-bold">৳<span id="print_total_price">0</span></div>
            </div>
          </div>
        </div>
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Booking Money</small>
              <div class="fw-bold">৳<span id="print_booking_money">0</span></div>
            </div>
          </div>
        </div>
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Down Payment</small>
              <div class="fw-bold">৳<span id="print_down_payment">0</span></div>
            </div>
          </div>
        </div>
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Remaining</small>
              <div class="fw-bold">৳<span id="print_remaining">0</span></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="schedule-table">
      <h5>Payment Schedule</h5>
      <table class="table table-bordered table-sm">
        <thead class="table-light">
          <tr>
            <th width="5%">#</th>
            <th width="15%">Due Date</th>
            <th width="15%">Amount (৳)</th>
            <th width="10%">Status</th>
            <th width="55%">Notes</th>
          </tr>
        </thead>
        <tbody id="print_schedule_rows">
        </tbody>
        <tfoot class="table-light">
          <tr class="fw-bold">
            <td colspan="2">Total</td>
            <td>৳<span id="print_schedule_total">0</span></td>
            <td colspan="2"></td>
          </tr>
        </tfoot>
      </table>
    </div>

    <div class="print-footer mt-4">
      <div class="row">
        <div class="col-6">
          <p><strong>Generated on:</strong> <span id="print_date"></span></p>
          <p><strong>Generated by:</strong> <?= htmlspecialchars($wo['user']['name'] ?? 'System') ?></p>
        </div>
        <div class="col-6 text-end">
          <div class="signature-area">
            <p class="mb-4">_________________________</p>
            <p>Authorized Signature</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Enhanced CSS for modern styling -->
<style>
.bg-gradient-primary {
  background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
}

.bg-gradient-success {
  background: linear-gradient(45deg, #11998e 0%, #38ef7d 100%);
}

.bg-gradient-warning {
  background: linear-gradient(45deg, #f093fb 0%, #f5576c 100%);
}

.bg-gradient-info {
  background: linear-gradient(45deg, #00d4ff 0%, #090979 100%);
}

.card {
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.card:hover {
  transform: translateY(-2px);
}

.table-hover tbody tr:hover {
  background-color: rgba(0,123,255,.05);
}

.btn-group .btn {
  transition: all 0.2s ease-in-out;
}

.modal-content {
  border-radius: 15px;
}

.modal-header {
  border-radius: 15px 15px 0 0;
}

.card-header {
  border-radius: 10px 10px 0 0;
}

.form-control, .form-select {
  border: 1px solid #e0e6ed;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control:focus, .form-select:focus {
  border-color: #667eea;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

.badge {
  padding: 0.5em 0.75em;
  font-size: 0.75em;
}

.btn-outline-primary:hover {
  background-color: #667eea;
  border-color: #667eea;
}

.text-gradient {
  background: linear-gradient(45deg, #667eea, #764ba2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

#ui_schedule_table .table-light th {
  background-color: #f8f9fa !important;
}

.payment-status-paid {
  background-color: rgba(40, 167, 69, 0.1);
}

.payment-status-unpaid {
  background-color: rgba(255, 193, 7, 0.1);
}

/* Enhanced dropdown styling */
.dropdown-menu {
  border: none;
  box-shadow: 0 10px 25px rgba(0,0,0,0.15);
  border-radius: 8px;
  padding: 0;
  min-width: 220px;
}

.dropdown-header {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white !important;
  font-weight: 600;
  padding: 10px 15px;
  margin: 0;
  border-radius: 8px 8px 0 0;
}

.dropdown-header:first-child {
  border-radius: 8px 8px 0 0;
}

.dropdown-item {
  padding: 8px 15px;
  transition: all 0.2s ease-in-out;
  font-size: 0.9rem;
}

.dropdown-item:hover {
  background-color: rgba(102, 126, 234, 0.1);
  transform: translateX(3px);
}

.dropdown-item i {
  width: 18px;
  display: inline-block;
}

.dropdown-divider {
  margin: 5px 0;
  border-top: 1px solid rgba(0,0,0,0.1);
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  .schedule-print-template {
    width: 100%;
    margin: 0;
    padding: 20px;
  }
  
  .schedule-print-template .table {
    page-break-inside: auto;
  }
  
  .schedule-print-template .card {
    border: 1px solid #dee2e6 !important;
    page-break-inside: auto;
  }
}

.schedule-print-template {
  background: white;
  padding: 30px;
  font-family: Arial, sans-serif;
}

.schedule-print-template .company-name {
  color: #2c3e50;
  font-weight: bold;
}

.schedule-print-template .document-title {
  color: #34495e;
  margin-bottom: 10px;
}

.schedule-print-template .card {
  border: 1px solid #dee2e6;
  margin-bottom: 5px;
}

.schedule-print-template .signature-area {
  margin-top: 40px;
}
</style>

<!-- Enhanced JavaScript with all dropdown functions implemented -->
<script>
jQuery(function($){
  'use strict';

  var SAFETY_INSTALLMENT_CAP = 5000;

  // AJAX base — points to manage_clients.php via your central router.
  function ajaxBase() {
    if (typeof Wo_Ajax_Requests_File === 'function') {
      return Wo_Ajax_Requests_File() + '?f=manage_clients';
    }
    return '/requests.php?f=manage_clients';
  }

  function moneyVal(v){
    if (v === undefined || v === null) return 0;
    var s = String(v).replace(/,/g,'').trim();
    if (s === '') return 0;
    var n = Number(s);
    return isNaN(n) ? 0 : n;
  }

  function fmtMoney(v){
    if (v === undefined || v === null) v = 0;
    return Number(Math.round(v * 100) / 100).toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 1
    });
  }

  function clamp(n, min, max){ return Math.max(min, Math.min(max, n)); }

  function computeAlignedDate(baseDateStr, monthOffset, option) {
    var base = baseDateStr ? new Date(baseDateStr + 'T00:00:00') : new Date();
    var baseYear = base.getFullYear();
    var baseMonth = base.getMonth();
    var target = new Date(baseYear, baseMonth + monthOffset, 1);
    var day;
    if (option === 'start') day = 1;
    else if (option === 'middle') day = 15;
    else if (option === 'end') day = new Date(target.getFullYear(), target.getMonth() + 1, 0).getDate();
    else {
      var baseDay = base.getDate();
      var lastDay = new Date(target.getFullYear(), target.getMonth() + 1, 0).getDate();
      day = clamp(baseDay, 1, lastDay);
    }
    target.setDate(day);
    var yyyy = target.getFullYear();
    var mm = String(target.getMonth() + 1).padStart(2,'0');
    var dd = String(target.getDate()).padStart(2,'0');
    return yyyy + '-' + mm + '-' + dd;
  }

  function readExistingRows(){
    var arr = [];
    $('#ui_schedule_table tbody tr').each(function(){
      var $tr = $(this);
      var date = $tr.find('.ui_row_date').val() || '';
      var amount = moneyVal($tr.find('.ui_row_amount').val());
      var keep = !!$tr.find('.ui_row_adj').is(':checked');
      var paid = !!$tr.find('.ui_row_paid').is(':checked');
      arr.push({ date: date, amount: amount, adjustment: keep, paid: paid });
    });
    return arr;
  }

  function buildRowsHTML(rows){
    var out = [];
    for (var i = 0; i < rows.length; i++){
      var r = rows[i];
      var idx = i + 1;
      var checkedAdj = r.adjustment ? 'checked' : '';
      var checkedPaid = r.paid ? 'checked' : '';
      var amountVal = (typeof r.amount === 'number') ? String(r.amount) : (r.amount || 0);
      var rowClass = r.adjustment ? 'table-warning' : '';
      if (r.paid) rowClass += ' payment-status-paid';
      else rowClass += ' payment-status-unpaid';
      
      out.push(
        '<tr data-idx="'+idx+'" class="'+rowClass+'">' +
          '<td class="ui_idx">'+idx+'</td>' +
          '<td><input type="date" class="form-control form-control-sm ui_row_date" value="'+(r.date||'')+'"></td>' +
          '<td><input type="number" step="0.01" class="form-control form-control-sm ui_row_amount" value="'+(amountVal||0)+'"></td>' +
          '<td class="text-center"><label class="mb-0"><input type="checkbox" class="ui_row_adj" '+checkedAdj+'> keep</label></td>' +
          '<td class="text-center">' +
            '<div class="btn-group btn-group-sm" role="group">' +
              '<input type="radio" class="btn-check ui_row_paid" name="payment_'+idx+'" id="paid_'+idx+'" value="paid" '+(r.paid ? 'checked' : '')+'>' +
              '<label class="btn btn-outline-success" for="paid_'+idx+'"><i class="lni lni-checkmark"></i></label>' +
              '<input type="radio" class="btn-check ui_row_unpaid" name="payment_'+idx+'" id="unpaid_'+idx+'" value="unpaid" '+(!r.paid ? 'checked' : '')+'>' +
              '<label class="btn btn-outline-warning" for="unpaid_'+idx+'"><i class="lni lni-time"></i></label>' +
            '</div>' +
          '</td>' +
          '<td><button type="button" class="btn btn-sm btn-outline-danger ui_row_remove"><i class="lni lni-trash"></i></button></td>' +
        '</tr>'
      );
    }
    return out.join('');
  }

  function renumberRows(){
    $('#ui_schedule_table tbody tr').each(function(i){
      var idx = i + 1;
      $(this).attr('data-idx', idx).find('.ui_idx').text(idx);
      // Update radio button names and IDs
      $(this).find('.ui_row_paid, .ui_row_unpaid').each(function(){
        var oldName = $(this).attr('name');
        var oldId = $(this).attr('id');
        var newName = 'payment_' + idx;
        var newId = oldId.replace(/\d+$/, idx);
        $(this).attr('name', newName).attr('id', newId);
        $(this).next('label').attr('for', newId);
      });
    });
  }

  function recalcTotals(){
    var total = 0;
    var paid = 0;
    $('#ui_schedule_table tbody tr').each(function(){
      var amount = moneyVal($(this).find('.ui_row_amount').val());
      total += amount;
      if ($(this).find('.ui_row_paid').is(':checked')) {
        paid += amount;
      }
    });
    $('#ui_total_amount, #ui_schedule_total').text(fmtMoney(total));
    $('#ui_paid_amount').text(fmtMoney(paid));
    var lastDate = $('#ui_schedule_table tbody tr:last .ui_row_date').val() || '';
    $('#ui_total_date').text(lastDate);
  }

  function refreshModeUI(){
    var mode = String($('#ui_mode').val());
    if (mode === '1') {
      $('#ui_installment_controls').addClass('d-none');
      $('#ui_installments').val(1).prop('disabled', true);
      $('#ui_adjustment_type').prop('disabled', true);
      $('#ui_monthly_amount').prop('disabled', true);
      $('#ui_yearly_adjustment').prop('disabled', true);
    } else {
      $('#ui_installment_controls').removeClass('d-none');
      $('#ui_installments').prop('disabled', false);
      $('#ui_adjustment_type').prop('disabled', false);
      $('#ui_monthly_amount').prop('disabled', false);
      $('#ui_yearly_adjustment').prop('disabled', false);
    }
  }

  function toggleConfigurationSection(show) {
    if (show) {
      $('#ui_configuration_section').slideDown();
      $('#ui_change_schedule').hide();
    } else {
      $('#ui_configuration_section').slideUp();
      $('#ui_change_schedule').show();
    }
  }

  // All dropdown action functions implemented
  window.transferPurchase = function(purchaseId) {
    $('#transfer_purchase_id').val(purchaseId);
    $('#transfer_error').addClass('d-none').text('');
    
    // Load clients for transfer
    $.get(Wo_Ajax_Requests_File() + '?f=manage_clients&s=get_all_clients')
      .done(function(resp){
        var clients = resp;
        try { if (typeof resp === 'string') clients = JSON.parse(resp); } catch(e) {}
        
        $('#transfer_client_select').empty().append('<option value="">Choose client to transfer to...</option>');
        if (Array.isArray(clients) && clients.length) {
          clients.forEach(function(c){
            $('#transfer_client_select').append('<option value="'+c.id+'">'+c.name+' ('+c.phone+')</option>');
          });
        }
        
        $('#transferPurchaseModal').modal('show');
      })
      .fail(function(){
        alert('Failed to load clients');
      });
  };

  $('#transfer_purchase_save').on('click', function(){
    var purchaseId = $('#transfer_purchase_id').val();
    var targetClientId = $('#transfer_client_select').val();
    var transferDate = $('#transfer_date').val();
    var reason = $('#transfer_reason').val();
    
    if (!targetClientId) {
      $('#transfer_error').removeClass('d-none').text('Please select target client');
      return;
    }
    
    if (!reason.trim()) {
      $('#transfer_error').removeClass('d-none').text('Please enter transfer reason');
      return;
    }
    
    var payload = {
      s: 'transfer_purchase',
      purchase_id: purchaseId,
      target_client_id: targetClientId,
      transfer_date: transferDate,
      reason: reason
    };
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory', payload)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Purchase transferred successfully');
          $('#transferPurchaseModal').modal('hide');
          location.reload();
        } else {
          $('#transfer_error').removeClass('d-none').text((data && data.message) ? data.message : 'Failed to transfer purchase');
        }
      })
      .fail(function(){
        $('#transfer_error').removeClass('d-none').text('Server error');
      });
  });

  window.viewPurchaseHistory = function(purchaseId) {
    $('#history_purchase_id').val(purchaseId);
    $('#history_content').html(`
      <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading purchase history...</p>
      </div>
    `);
    
    $('#purchaseHistoryModal').modal('show');
    
    $.get(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_history&purchase_id=' + purchaseId)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200) {
          var html = '<div class="timeline">';
          if (data.history && data.history.length) {
            data.history.forEach(function(h){
              html += `
                <div class="timeline-item">
                  <div class="timeline-marker bg-${h.type === 'created' ? 'success' : (h.type === 'payment' ? 'info' : 'warning')}"></div>
                  <div class="timeline-content">
                    <h6>${h.title}</h6>
                    <p class="mb-1">${h.description}</p>
                    <small class="text-muted">${h.date}</small>
                  </div>
                </div>
              `;
            });
          } else {
            html += '<p class="text-center text-muted py-4">No history found for this purchase.</p>';
          }
          html += '</div>';
          
          $('#history_content').html(html);
        } else {
          $('#history_content').html('<div class="alert alert-warning">Failed to load purchase history.</div>');
        }
      })
      .fail(function(){
        $('#history_content').html('<div class="alert alert-danger">Server error while loading history.</div>');
      });
  };

  window.generatePurchaseReport = function(purchaseId) {
    if (confirm('Generate detailed purchase report? This may take a few moments.')) {
      var btn = $('<button>').text('Generating...').prop('disabled', true);
      
      $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=generate_purchase_report', {
        purchase_id: purchaseId,
        format: 'pdf'
      })
        .done(function(resp){
          var data = resp;
          try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
          
          if (data && data.status === 200 && data.download_url) {
            // Create download link
            var link = document.createElement('a');
            link.href = data.download_url;
            link.download = data.filename || 'purchase_report.pdf';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          } else {
            alert((data && data.message) ? data.message : 'Failed to generate report');
          }
        })
        .fail(function(){
          alert('Server error while generating report');
        });
    }
  };

  window.exportPurchaseData = function(purchaseId) {
    var format = prompt('Export format (excel/pdf/csv):', 'excel');
    if (!format) return;
    
    if (!['excel', 'pdf', 'csv'].includes(format.toLowerCase())) {
      alert('Invalid format. Please choose excel, pdf, or csv.');
      return;
    }
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=export_purchase_data', {
      purchase_id: purchaseId,
      format: format.toLowerCase()
    })
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200 && data.download_url) {
          // Create download link
          var link = document.createElement('a');
          link.href = data.download_url;
          link.download = data.filename || 'purchase_data.' + format;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          alert((data && data.message) ? data.message : 'Failed to export data');
        }
      })
      .fail(function(){
        alert('Server error while exporting data');
      });
  };

  window.suspendPurchase = function(purchaseId) {
    $('#suspend_purchase_id').val(purchaseId);
    $('#suspend_error').addClass('d-none').text('');
    $('#suspendPurchaseModal').modal('show');
  };

  $('#suspend_duration').on('change', function(){
    if ($(this).val() === 'custom') {
      $('#custom_duration_field').removeClass('d-none');
    } else {
      $('#custom_duration_field').addClass('d-none');
    }
  });

  $('#suspend_purchase_save').on('click', function(){
    var purchaseId = $('#suspend_purchase_id').val();
    var suspendDate = $('#suspend_date').val();
    var duration = $('#suspend_duration').val();
    var reason = $('#suspend_reason').val();
    
    if (!reason.trim()) {
      $('#suspend_error').removeClass('d-none').text('Please enter suspension reason');
      return;
    }
    
    var days = duration;
    if (duration === 'custom') {
      days = $('#custom_duration_days').val();
      if (!days || days <= 0) {
        $('#suspend_error').removeClass('d-none').text('Please enter valid custom duration');
        return;
      }
    }
    
    var payload = {
      s: 'suspend_purchase',
      purchase_id: purchaseId,
      suspend_date: suspendDate,
      duration_days: days,
      reason: reason
    };
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory', payload)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Purchase suspended successfully');
          $('#suspendPurchaseModal').modal('hide');
          location.reload();
        } else {
          $('#suspend_error').removeClass('d-none').text((data && data.message) ? data.message : 'Failed to suspend purchase');
        }
      })
      .fail(function(){
        $('#suspend_error').removeClass('d-none').text('Server error');
      });
  });

  // Print payment schedule functionality
  $(document).on('click', '.print_payment_schedule', function(e){
    e.preventDefault();
    var purchaseId = $(this).data('id');
    printPaymentSchedule(purchaseId);
  });

  $('#print_schedule_btn').on('click', function(){
    var purchaseId = $('#ui_purchase_id').val();
    if (purchaseId) {
      printPaymentSchedule(purchaseId);
    }
  });

  $('#export_schedule_xlsx').on('click', function(){
    var purchaseId = $('#ui_purchase_id').val();
    if (purchaseId) {
      exportScheduleXLSX(purchaseId);
    }
  });

    function printPaymentSchedule(purchaseId, closeAfterPrint = true) {
      // fetch purchase details (manage_inventory endpoint)
      $.get(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_details', { purchase_id: purchaseId })
        .done(function(resp){
          var data = resp;
          try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
    
          if (!(data && data.status === 200)) {
            alert('Failed to load schedule data');
            return;
          }
    
          // populate the hidden template in the current DOM (#printScheduleContent)
          // clientData injected server-side into the page
          var clientData = <?= json_encode($wo['client'], JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS | JSON_HEX_QUOT) ?>;
          var company_name = 'Unknown Company Name';
          if (data.project_name === 'Hill Town') company_name = 'Civic Design & Development Ltd.';
          else if (data.project_name === 'Moon Hill') company_name = 'Civic Real Estate Ltd.';
    
          $('#print_company_name').text(company_name || '-');
          $('#print_client_name').text(clientData.name || '-');
          $('#print_client_phone').text(clientData.phone || '-');
          $('#print_client_address').text(clientData.address || '-');
          $('#print_project_name').text(data.project_name || '-');
          $('#print_plot_info').text(data.plot || '-');
          $('#print_file_number').text(data.file_num || '-');
          $('#print_total_price').text(fmtMoney(data.total_price || 0));
          $('#print_booking_money').text(fmtMoney(data.booking_money || 0));
          $('#print_down_payment').text(fmtMoney(data.down_payment || 0));
          $('#print_remaining').text(fmtMoney((data.total_price || 0) - ((data.booking_money || 0) + (data.down_payment || 0))));
          $('#print_date').text(new Date().toLocaleDateString());
    
          // build schedule rows HTML
          var scheduleRows = '';
          var scheduleTotal = 0;
          if (Array.isArray(data.schedule) && data.schedule.length) {
            data.schedule.forEach(function(row, index){
              var statusBadge = (row.paid) ? '<span class="badge bg-success">Paid</span>' : '<span class="badge bg-warning">Unpaid</span>';
              var note = row.adjustment ? 'Yearly Adjustment' : 'Regular Payment';
              scheduleRows += '<tr>'
                           + '<td>' + (index + 1) + '</td>'
                           + '<td>' + (row.date || '-') + '</td>'
                           + '<td>৳' + fmtMoney(row.amount || 0) + '</td>'
                           + '<td>' + statusBadge + '</td>'
                           + '<td>' + note + '</td>'
                           + '</tr>';
              scheduleTotal += (row.amount || 0);
            });
          } else {
            scheduleRows = '<tr><td colspan="5" class="text-center">No schedule found</td></tr>';
          }
    
          $('#print_schedule_rows').html(scheduleRows);
          $('#print_schedule_total').text(fmtMoney(scheduleTotal));
    
          // Grab the filled HTML of the template
          var templateHtml = document.getElementById('printScheduleContent').innerHTML;
    
          // Build full HTML for print window — include Bootstrap link + inline critical CSS
          var printDocHtml = '<!doctype html><html><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>' +
            '<title>Payment Schedule</title>' +
            // external stylesheet (Bootstrap CDN). If your app uses a local CSS, replace this with your local URL.
            '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" />' +
            // inline critical CSS — tweak as needed
            '<style>' +
              'body{font-family:Arial,Helvetica,sans-serif;font-size:13px;color:#222;margin:18px;}' +
              '.schedule-print-template{padding:6px 12px;}' +
              '.company-name{font-weight:700;font-size:18px;color:#222;margin-bottom:4px;}' +
              '.document-title{font-size:15px;color:#444;margin-bottom:6px;}' +
              '.card{border:1px solid #e6e6e6;margin-bottom:8px;}' +
              'table{width:100%;border-collapse:collapse;margin-bottom:8px;}' +
              'th,td{padding:6px 8px;border:1px solid #e9ecef;vertical-align:middle}' +
              '.text-right{text-align:right}' +
              '@media print{body{ -webkit-print-color-adjust: exact; print-color-adjust: exact;} .no-print{display:none !important}}' +
            '</style>' +
            '</head><body>';
    
          printDocHtml += templateHtml;
          printDocHtml += '</body></html>';
    
          // open new window and write content
          var printWindow = window.open('', '_blank');
          if (!printWindow) {
            alert('Popup blocked. Allow popups for this site to use print.');
            return;
          }
    
          printWindow.document.open();
          printWindow.document.write(printDocHtml);
          printWindow.document.close();
    
          // helper to wait for stylesheets and images
          function waitForResources(win, timeoutMs) {
            return new Promise(function(resolve){
              var doc = win.document;
              var links = Array.prototype.slice.call(doc.getElementsByTagName('link'));
              var imgs = Array.prototype.slice.call(doc.getElementsByTagName('img'));
              var pending = 0;
    
              function checkDone() {
                if (pending <= 0) resolve();
              }
    
              // stylesheets: many browsers do not reliably fire onload for cross-origin CSS.
              // consider each link as 'done' if .sheet is present or after onload/onerror.
              links.forEach(function(link){
                if (!(link.rel && link.rel.toLowerCase() === 'stylesheet')) return;
                try {
                  if (link.sheet) return; // already available
                } catch(e){
                  // accessing .sheet can throw for cross-origin; treat as pending and wait for onload or timeout
                }
                pending++;
                link.onload = function(){ pending--; checkDone(); };
                link.onerror = function(){ pending--; checkDone(); };
                // As fallback, poll for sheet presence
                var pollCount = 0;
                var pollInt = setInterval(function(){
                  pollCount++;
                  try {
                    if (link.sheet) {
                      clearInterval(pollInt);
                      if (pending > 0) pending--;
                      checkDone();
                    } else if (pollCount > 40) { // ~4s
                      clearInterval(pollInt);
                      if (pending > 0) pending--;
                      checkDone();
                    }
                  } catch(e) {
                    // ignore cross-origin exceptions and fallback to timeout
                  }
                }, 100);
              });
    
              // images
              imgs.forEach(function(img){
                if (img.complete) return;
                pending++;
                img.onload = function(){ pending--; checkDone(); };
                img.onerror = function(){ pending--; checkDone(); };
              });
    
              // immediate resolve if nothing pending
              if (pending === 0) return resolve();
    
              // timeout fallback
              setTimeout(function(){ resolve(); }, timeoutMs || 3500);
            });
          }
    
          // Wait for resources then print
          waitForResources(printWindow, 3500).then(function(){
            try {
              printWindow.focus();
              // small delay to allow rendering
              setTimeout(function(){
                try {
                  printWindow.print();
                  if (closeAfterPrint) {
                    // close window after a short delay (give browser time to start print dialog)
                    setTimeout(function(){ try { printWindow.close(); } catch(e){} }, 500);
                  }
                } catch (err) {
                  console.error('Print error', err);
                }
              }, 150);
            } catch (err) {
              console.error('Focus/print error', err);
            }
          });
    
        })
        .fail(function(){
          alert('Server error while loading schedule');
        });
    }


  function exportScheduleXLSX(purchaseId) {
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=export_payment_schedule', {
      purchase_id: purchaseId,
      format: 'xlsx'
    })
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200 && data.download_url) {
          var link = document.createElement('a');
          link.href = data.download_url;
          link.download = data.filename || 'payment_schedule.xlsx';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          alert((data && data.message) ? data.message : 'Failed to export schedule');
        }
      })
      .fail(function(){
        alert('Server error while exporting schedule');
      });
  }

  // Event handlers
  $(document).on('change', '#ui_mode', refreshModeUI);
  $(document).on('shown.bs.modal', '#updateInstallmentModal', refreshModeUI);
  $(document).on('change', '.ui_row_paid, .ui_row_unpaid', function(){
    var $row = $(this).closest('tr');
    $row.removeClass('payment-status-paid payment-status-unpaid');
    if ($(this).val() === 'paid') {
      $row.addClass('payment-status-paid');
    } else {
      $row.addClass('payment-status-unpaid');
    }
    recalcTotals();
  });

  // Mark all paid/unpaid
  $('#ui_mark_all_paid').on('click', function(){
    $('#ui_schedule_table tbody .ui_row_paid').prop('checked', true).trigger('change');
  });

  $('#ui_mark_all_unpaid').on('click', function(){
    $('#ui_schedule_table tbody .ui_row_unpaid').prop('checked', true).trigger('change');
  });

  // Change schedule button
  $('#ui_change_schedule').on('click', function(){
    toggleConfigurationSection(true);
  });

  // Detect mode from existing schedule
  function detectModeFromSchedule(schedule) {
    if (!Array.isArray(schedule) || schedule.length === 0) {
      return '1'; // Full Payment by default
    }
    
    if (schedule.length === 1) {
      return '1'; // Full Payment
    }
    
    return '2'; // Installment
  }

  // Open update installment modal
  $(document).on('click', '.update_installment', function(e){
    e.preventDefault();
    var purchaseId = $(this).data('id');
    if (!purchaseId) { alert('Invalid purchase id'); return; }

    $('#ui_purchase_id').val(purchaseId);
    $('#ui_schedule_table tbody').empty();
    $('#ui_total_price,#ui_booking_money,#ui_down_payment,#ui_remaining,#ui_total_amount,#ui_schedule_total,#ui_paid_amount').text('0');
    $('#updateInstallmentModal').modal('show');

    $.get(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_details', { purchase_id: purchaseId })
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (!data || data.error) { alert(data && data.error ? data.error : 'Failed to load purchase'); return; }
        
        $('#ui_project_name').text(data.project_name || '');
        $('#ui_total_price').text(fmtMoney(data.total_price || 0));
        $('#ui_booking_money').text(fmtMoney(data.booking_money || 0));
        $('#ui_down_payment').text(fmtMoney(data.down_payment || 0));
        
        // Calculate remaining = total - (booking money + down payment)
        var remaining = (data.total_price || 0) - ((data.booking_money || 0) + (data.down_payment || 0));
        $('#ui_remaining').text(fmtMoney(Math.max(0, remaining)));
        
        $('#ui_start_date').val(data.default_start_date || new Date().toISOString().substr(0,10));
        $('#ui_installments').val(data.default_installments || 12);
        $('#ui_monthly_amount').val('');
        $('#ui_yearly_adjustment').val('');
        $('#ui_adjustment_type').val('year_end'); // Set default to Year - End
        
        // Detect mode from existing schedule
        var detectedMode = detectModeFromSchedule(data.schedule);
        $('#ui_mode').val(detectedMode);
        
        var hasExistingSchedule = Array.isArray(data.schedule) && data.schedule.length > 0;
        
        if (hasExistingSchedule) {
          var rows = data.schedule.map(function(r){ 
            return { 
              date: r.date, 
              amount: r.amount, 
              adjustment: !!r.adjustment,
              paid: !!r.paid // Include paid status
            }; 
          });
          $('#ui_schedule_table tbody').html(buildRowsHTML(rows));
          renumberRows();
          recalcTotals();
          toggleConfigurationSection(false); // Hide configuration section
        } else {
          $('#ui_schedule_table tbody').empty();
          recalcTotals();
          toggleConfigurationSection(true); // Show configuration section
        }
        refreshModeUI();
      })
      .fail(function(){ alert('Server error while fetching purchase'); });
  });

  // Generate schedule with fixed yearly adjustment logic
  $('#ui_generate_schedule').on('click', function(){
    var mode = String($('#ui_mode').val());
    var installments = Math.max(1, parseInt($('#ui_installments').val() || 1));
    installments = clamp(installments, 1, SAFETY_INSTALLMENT_CAP);
    var baseStartDate = $('#ui_start_date').val() || new Date().toISOString().substr(0,10);
    var startOption = $('#ui_start_option').val() || 'start';
    var adjustmentType = $('#ui_adjustment_type').val() || 'monthly';
    var monthlyInput = moneyVal($('#ui_monthly_amount').val());
    var yearlyAdjustInput = moneyVal($('#ui_yearly_adjustment').val());
    
    var totalPrice = moneyVal($('#ui_total_price').text());
    var bookingMoney = moneyVal($('#ui_booking_money').text());
    var downPayment = moneyVal($('#ui_down_payment').text());
    var remaining = Math.max(0, totalPrice - (bookingMoney + downPayment));
    
    $('#ui_remaining').text(fmtMoney(remaining));
    var existing = readExistingRows();
    var rows = [];

    if (mode === '1') {
      // Full payment mode
      var d0 = computeAlignedDate(baseStartDate, 0, startOption);
      if (existing[0] && existing[0].adjustment) {
        rows.push({ 
          date: existing[0].date, 
          amount: existing[0].amount, 
          adjustment: true,
          paid: existing[0].paid || false
        });
      } else {
        var amountFull = (monthlyInput > 0 && installments === 1) ? monthlyInput : Number(remaining.toFixed(2));
        rows.push({ 
          date: d0, 
          amount: amountFull, 
          adjustment: false,
          paid: false
        });
      }
    } else {
      // Installment mode with corrected yearly adjustment logic
      if (adjustmentType === 'monthly') {
        var raw = remaining / installments;
        var baseCents = Math.floor(raw * 100);
        var base = baseCents / 100;
        var amounts = new Array(installments);
        for (var i = 0; i < installments; i++) amounts[i] = base;
        var distributed = base * installments;
        var diff = Math.round((remaining - distributed) * 100) / 100;
        var dIdx = 0;
        while (Math.abs(diff) >= 0.01 && dIdx < amounts.length) {
          amounts[dIdx] = Math.round((amounts[dIdx] + 0.01) * 100) / 100;
          distributed = amounts.reduce(function(a,b){ return a + b; },0);
          diff = Math.round((remaining - distributed) * 100) / 100;
          dIdx++;
        }
        for (i = 0; i < installments; i++){
          var date = computeAlignedDate(baseStartDate, i, startOption);
          if (existing[i] && existing[i].adjustment) {
            rows.push({ 
              date: existing[i].date, 
              amount: existing[i].amount, 
              adjustment: true,
              paid: existing[i].paid || false
            });
          } else {
            rows.push({ 
              date: date, 
              amount: amounts[i], 
              adjustment: false,
              paid: false
            });
          }
        }
      } else if (adjustmentType === 'custom') {
        // Custom mode - use monthly input or divide remaining equally
        var monthlyBase = monthlyInput > 0 ? monthlyInput : (remaining / installments);
        monthlyBase = Math.round(monthlyBase * 100) / 100;
        for (i = 0; i < installments; i++){
          var date2 = computeAlignedDate(baseStartDate, i, startOption);
          if (existing[i] && existing[i].adjustment) {
            rows.push({ 
              date: existing[i].date, 
              amount: existing[i].amount, 
              adjustment: true,
              paid: existing[i].paid || false
            });
          } else {
            rows.push({ 
              date: date2, 
              amount: monthlyBase, 
              adjustment: false,
              paid: false
            });
          }
        }
      } else {
        // Yearly adjustment mode - proper calculation as per user requirements
        var baseDate = new Date(baseStartDate + 'T00:00:00');
        var startMonth = baseDate.getMonth();
        var adjMonthIndex;
        if (adjustmentType === 'year_start') adjMonthIndex = startMonth;
        else if (adjustmentType === 'year_middle') adjMonthIndex = (startMonth + 5) % 12;
        else if (adjustmentType === 'year_end') adjMonthIndex = (startMonth + 11) % 12;
        else adjMonthIndex = startMonth;
        
        var yearlyAdj = yearlyAdjustInput > 0 ? yearlyAdjustInput : 0;
        
        // Calculate total yearly adjustments over the installment period
        var yearsInInstallments = Math.floor(installments / 12);
        var totalYearlyAdjustments = yearsInInstallments * yearlyAdj;
        
        // Calculate remaining after yearly adjustments
        var remainingAfterYearly = remaining - totalYearlyAdjustments;
        var monthlyBase2;
        
        if (monthlyInput > 0) {
          monthlyBase2 = monthlyInput;
        } else {
          // Calculate monthly amount based on non-yearly adjustment installments
          var nonYearlyInstallments = installments;
          for (var j = 0; j < installments; j++) {
            var monthIndex = (startMonth + j) % 12;
            if (monthIndex === adjMonthIndex && yearlyAdj > 0) {
              nonYearlyInstallments--;
            }
          }
          monthlyBase2 = nonYearlyInstallments > 0 ? (remainingAfterYearly / nonYearlyInstallments) : 0;
        }
        
        monthlyBase2 = Math.round(monthlyBase2 * 100) / 100;
        
        for (i = 0; i < installments; i++){
          var date3 = computeAlignedDate(baseStartDate, i, startOption);
          var monthIndex = (startMonth + i) % 12;
          var isYearlyAdjRow = (monthIndex === adjMonthIndex && yearlyAdj > 0);
          var amount3;
          
          if (isYearlyAdjRow) {
            // This is a yearly adjustment row - use the yearly adjustment amount exactly
            amount3 = yearlyAdj;
          } else {
            // Regular monthly payment
            amount3 = monthlyBase2;
          }
          
          if (existing[i] && existing[i].adjustment) {
            rows.push({ 
              date: existing[i].date, 
              amount: existing[i].amount, 
              adjustment: true,
              paid: existing[i].paid || false
            });
          } else {
            rows.push({ 
              date: date3, 
              amount: amount3, 
              adjustment: isYearlyAdjRow,
              paid: false
            });
          }
        }
        
        // Adjust the last non-yearly row to balance any remaining amount
        var calculatedTotal = 0;
        for (var k = 0; k < rows.length; k++) {
          calculatedTotal += rows[k].amount;
        }
        
        var difference = remaining - calculatedTotal;
        if (Math.abs(difference) > 0.01) {
          // Find the last non-yearly, non-adjustment row to adjust
          for (var l = rows.length - 1; l >= 0; l--) {
            if (!rows[l].adjustment && rows[l].amount !== yearlyAdj) {
              rows[l].amount = Math.max(0, rows[l].amount + difference);
              break;
            }
          }
        }
      }
    }

    $('#ui_schedule_table tbody').html(buildRowsHTML(rows));
    renumberRows();
    recalcTotals();
    $('#ui_schedule_table').closest('.table-responsive').scrollTop(0);
  });

  // Row remove and input handlers
  $(document).on('click', '.ui_row_remove', function(){ 
    $(this).closest('tr').remove(); 
    renumberRows(); 
    recalcTotals(); 
  });
  
  $(document).on('input change', '.ui_row_amount, .ui_row_date', function(){ 
    recalcTotals(); 
  });
  
  $(document).on('change', '.ui_row_adj', function(){ 
    var $row = $(this).closest('tr');
    if ($(this).is(':checked')) {
      $row.addClass('table-warning');
    } else {
      $row.removeClass('table-warning');
    }
    recalcTotals(); 
  });

  // Reset schedule
  $('#ui_reset_schedule').on('click', function(){ 
    $('#ui_schedule_table tbody').empty(); 
    recalcTotals(); 
    toggleConfigurationSection(true);
  });

  // Save schedule
  $('#ui_save_schedule').on('click', function(){
    var purchaseId = $('#ui_purchase_id').val();
    if (!purchaseId) { alert('Invalid purchase id'); return; }
    var rows = [];
    $('#ui_schedule_table tbody tr').each(function(){
      var date = $(this).find('.ui_row_date').val();
      var amount = moneyVal($(this).find('.ui_row_amount').val());
      var adjustment = $(this).find('.ui_row_adj').is(':checked') ? 1 : 0;
      var paid = $(this).find('.ui_row_paid').is(':checked') ? 1 : 0;
      rows.push({ date: date, amount: amount, adjustment: adjustment, paid: paid });
    });
    if (!rows.length) { alert('No schedule to save'); return; }
    
    // Validate total matches remaining
    var totalAmount = 0;
    for (var i = 0; i < rows.length; i++) {
      totalAmount += rows[i].amount;
    }
    var remaining = moneyVal($('#ui_remaining').text());
    if (Math.abs(totalAmount - remaining) > 0.01) {
      if (confirm('Schedule total (৳' + fmtMoney(totalAmount) + ') does not match remaining amount (৳' + fmtMoney(remaining) + '). Auto-adjust last row to match?')) {
        if (rows.length > 0) {
          var diff = remaining - (totalAmount - rows[rows.length - 1].amount);
          rows[rows.length - 1].amount = Math.max(0, diff);
          // Update the UI
          $('#ui_schedule_table tbody tr:last .ui_row_amount').val(rows[rows.length - 1].amount);
          recalcTotals();
        }
      } else {
        return;
      }
    }
    
    var payload = {
      purchase_id: purchaseId, 
      schedule: JSON.stringify(rows),
      mode: $('#ui_mode').val(),
      installments: $('#ui_installments').val(),
      adjustment_type: $('#ui_adjustment_type').val(),
      monthly_amount: $('#ui_monthly_amount').val() || '',
      yearly_adjustment: $('#ui_yearly_adjustment').val() || '',
      start_date: $('#ui_start_date').val(),
      start_option: $('#ui_start_option').val()
    };
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=update_installment', payload)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Schedule saved successfully');
          $('#updateInstallmentModal').modal('hide');
        } else if (data && data.status == 400 && data.remaining !== undefined) {
          alert('Schedule total mismatch. Remaining: ৳' + fmtMoney(data.remaining) + ', Sum: ৳' + fmtMoney(data.sum || 0));
        } else {
          alert((data && data.message) ? data.message : 'Failed to save schedule');
        }
      })
      .fail(function(){ alert('Server error while saving schedule'); });
  });

  // Change plot flow - using same Select2 as add_purchase
  $(document).on('click', '.change_plot_btn', function(e){
    e.preventDefault();
    var purchaseId = $(this).data('id');
    if (!purchaseId) { alert('Invalid purchase id'); return; }
    $('#change_plot_purchase_id').val(purchaseId);
    $('#change_plot_error').addClass('d-none').text('');

    $.get(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_details', { purchase_id: purchaseId })
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (!data || data.error) { alert(data && data.error ? data.error : 'Failed to load purchase'); return; }

        $('#change_plot_project').val(data.project_name || '');
        
        // Initialize Select2 for change plot with AJAX (same as add purchase form)
        $('#change_plot_select').select2({
          dropdownParent: $('#changePlotModal'),
          placeholder: 'Search available plots...',
          allowClear: true,
          minimumInputLength: 0,
          ajax: {
            url: Wo_Ajax_Requests_File() + '?f=manage_inventory&s=search_purchases',
            dataType: 'json',
            delay: 250,
            data: function (params) {
              return {
                q: params.term || '',
                page: params.page || 1,
                per_page: 30,
                project_id: data.project_slug,
                available_only: true
              };
            },
            processResults: function (data, params) {
              params.page = params.page || 1;
              var results = [];
              if (data && data.results) {
                results = data.results.filter(function(item) {
                  return item.available === 1; // Only show available plots
                });
              }
              return {
                results: results,
                pagination: { more: data.more || false }
              };
            }
          }
        });
        
        $('#changePlotModal').modal('show');
      })
      .fail(function(){ alert('Server error while loading purchase'); });
  });

  $('#change_plot_save').on('click', function(){
    var purchaseId = $('#change_plot_purchase_id').val();
    var newPlotId = $('#change_plot_select').val();
    if (!newPlotId) { 
      $('#change_plot_error').removeClass('d-none').text('Please choose a plot'); 
      return; 
    }
    var payload = { s: 'change_plot', purchase_id: purchaseId, new_plot_id: newPlotId };
    $.post( ajaxBase(), payload )
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Plot changed successfully');
          $('#changePlotModal').modal('hide');
          location.reload();
        } else {
          $('#change_plot_error').removeClass('d-none').text((data && data.message) ? data.message : 'Failed to change plot');
        }
      })
      .fail(function(){ 
        $('#change_plot_error').removeClass('d-none').text('Server error'); 
      });
  });

  // Initialize defaults
  $(function(){ 
    refreshModeUI(); 
    $('#ui_adjustment_type').val('year_end'); // Set default to Year - End
  });

});
</script>

 <!-- Additional JS for Purchase Management -->
<script>
jQuery(function($){
  // Move cancel modal out to body to avoid nested-modal/select2/backdrop/focus issues
  (function relocateCancelModalToBody(){
    try {
      var $cancelModal = $('#cancelPurchaseModal');
      if ($cancelModal.length && !$cancelModal.parent().is('body')) {
        $cancelModal.appendTo('body');
      }
    } catch(e){ /* ignore */ }
  })();

  // ensure confirm modal exists (create once)
  if (!document.getElementById('overrideConfirmModal')) {
    $('body').append(
      '\n<div class="modal fade" id="overrideConfirmModal" tabindex="-1" aria-hidden="true">' +
      '<div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content border-0 shadow-lg">' +
      '<div class="modal-header bg-warning text-white border-0"><h5 class="modal-title">Conflict Detected</h5>' +
      '<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button></div>' +
      '<div class="modal-body py-4"><div id="overrideConfirmBody"></div></div>' +
      '<div class="modal-footer border-0 bg-light"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>' +
      '<button type="button" class="btn btn-warning text-white" id="overrideConfirmYes">Yes, Continue</button></div>' +
      '</div></div></div>\n'
    );
  }

  // create single bootstrap.Modal instance for cancel modal (after ensuring it's in body)
  var bsCancelModal = null;
  try {
    var el = document.getElementById('cancelPurchaseModal');
    if (el) bsCancelModal = new bootstrap.Modal(el, { backdrop: 'static' });
  } catch(e){ bsCancelModal = null; }

  // Helper: safe Select2 destroy/init
  function safeInit($el, opts) {
    if (!$el || !$el.length) return;
    opts = opts || {};
    var containerCss = opts.containerCssClass || null;
    try {
      if ($el.data('select2') || $el.hasClass('select2-hidden-accessible')) $el.select2('destroy');
    } catch(e) { /* ignore */ }

    var initOpts = $.extend({}, opts);
    try { delete initOpts.containerCssClass; } catch(e){}

    $el.select2($.extend({ width: '100%' }, initOpts));

    if (containerCss) {
      setTimeout(function(){
        try {
          var sel2 = $el.data('select2');
          if (sel2 && sel2.$container) {
            if (!sel2.$container.hasClass(containerCss)) sel2.$container.addClass(containerCss);
          } else {
            $('#viewClient-modal .select2-container').each(function(){
              var $c = $(this);
              if ($c.hasClass(containerCss)) return;
              if ($c.find('.select2-selection').length > 0) {
                $c.addClass(containerCss);
              }
            });
          }
        } catch(e) { /* ignore */ }
      }, 0);
    }
  }

  function advancedMatcher(params, data) {
    if (!params || !params.term || params.term.trim() === '') return data;

    var blockRaw = (data.block || '') + '';
    var plotRaw  = (data.plot  || '') + '';
    var kathaRaw = (data.katha !== undefined && data.katha !== null) ? data.katha + '' : (data.raw && data.raw.katha ? String(data.raw.katha) : '');
    var roadRaw  = (data.road !== undefined && data.road !== null) ? data.road + '' : (data.raw && data.raw.road ? String(data.raw.road) : '');
    var statusRaw= (data.status_label || data.status || '') + '';
    var textRaw  = (data.text || '') + '';

    var blockNorm = blockRaw.toLowerCase().trim();
    var plotNorm  = plotRaw.toLowerCase().trim();
    var kathaNorm = kathaRaw.toLowerCase().trim();
    var roadNorm  = roadRaw.toLowerCase().trim();
    var statusNorm= statusRaw.toLowerCase().trim();
    var textNorm  = textRaw.toLowerCase().trim();

    function parseNumber(str) {
      if (!str) return NaN;
      var s = String(str).replace(/[,]/g,'').trim();
      var m = s.match(/-?\d+(\.\d+)?/);
      return m ? Number(m[0]) : NaN;
    }
    var kathaNum = parseNumber(kathaNorm);
    var plotNum  = (function(){ var m = plotNorm.match(/-?\d+/); return m ? parseInt(m[0],10) : NaN; })();
    var roadNum  = (function(){ var m = roadNorm.match(/-?\d+/); return m ? parseInt(m[0],10) : NaN; })();

    var hayParts = [blockNorm, plotNorm, kathaNorm, roadNorm, statusNorm, textNorm];
    if (data.raw && typeof data.raw === 'object') {
      if (data.raw.name)  hayParts.push(String(data.raw.name).toLowerCase());
      if (data.raw.label) hayParts.push(String(data.raw.label).toLowerCase());
    }
    var hayNorm = hayParts.join(' ').replace(/[^a-z0-9\s]/g,' ').replace(/\s+/g,' ').trim();

    var typed = params.term.toLowerCase().trim();

    var kathaDirective = null;
    var roadDirective  = null;
    var blockDirective = null;
    var plotDirective  = null;
    var statusDirective= null;

    (function(){
      var m;
      if ((m = typed.match(/(?:^|\s)(\d+(?:\.\d+)?)\s*(?:k(?:atha)?)\b/))) { kathaDirective = Number(m[1]); return; }
      if ((m = typed.match(/\b(?:k(?:atha)?)\s*(\d+(?:\.\d+)?)(?:\b|$)/))) { kathaDirective = Number(m[1]); return; }
      if ((m = typed.match(/\b(\d+(?:\.\d+)?)k\b/))) { kathaDirective = Number(m[1]); return; }
      if ((m = typed.match(/\bk(\d+(?:\.\d+)?)\b/))) { kathaDirective = Number(m[1]); return; }
    })();

    (function(){
      var m;
      if ((m = typed.match(/(?:^|\s)(?:r|rd|road)\s*(\d+)(?:\b|$)/))) { roadDirective = parseInt(m[1],10); return; }
      if ((m = typed.match(/\b(\d+)\s*(?:r|rd|road)(?:\b|$)/))) { roadDirective = parseInt(m[1],10); return; }
      if ((m = typed.match(/\br(\d+)\b/))) { roadDirective = parseInt(m[1],10); return; }
      if ((m = typed.match(/\b(\d+)r\b/))) { roadDirective = parseInt(m[1],10); return; }
    })();

    (function(){
      var m;
      if ((m = typed.match(/(?:^|\s)(?:p|plot)\s*(\w+)(?:\b|$)/))) { plotDirective = String(m[1]).toLowerCase(); return; }
      if ((m = typed.match(/\b(\w+)\s*(?:p|plot)(?:\b|$)/))) { plotDirective = String(m[1]).toLowerCase(); return; }
      if ((m = typed.match(/\bp(\d+)\b/))) { plotDirective = m[1]; return; }
      if ((m = typed.match(/\b(\d+)p\b/))) { plotDirective = m[1]; return; }
    })();

    (function(){
      var m;
      if ((m = typed.match(/(?:^|\s)(?:b|block)\s*[:#-]?\s*([a-z0-9]+)(?:\b|$)/))) { blockDirective = String(m[1]).toLowerCase(); return; }
      var lone = typed.match(/^\s*([a-z])\s*$/);
      if (lone) { blockDirective = lone[1].toLowerCase(); return; }
    })();

    (function(){
      var statuses = ['sold','cancelled','canceled','available','booked','complete','completed','pending'];
      for (var i=0;i<statuses.length;i++){
        var w = statuses[i];
        if ((new RegExp('\\b' + w + '\\b','i')).test(typed)) { statusDirective = w; break; }
      }
    })();

    if (kathaDirective !== null) {
      if (!Number.isFinite(kathaNum) || Math.abs(kathaNum - Number(kathaDirective)) > 1e-9) return null;
    }
    if (roadDirective !== null) {
      if (!Number.isFinite(roadNum) || roadNum !== Number(roadDirective)) return null;
    }
    if (plotDirective !== null) {
      var pd = plotDirective + '';
      var pdNum = (pd.match(/^\d+$/) ? parseInt(pd,10) : NaN);
      if (!isNaN(pdNum) && Number.isFinite(plotNum)) {
        if (plotNum !== pdNum) return null;
      } else {
        var left  = plotNorm.replace(/[^a-z0-9]/g,'');
        var right = pd.replace(/[^a-z0-9]/g,'');
        if (left.indexOf(right) === -1 && right.indexOf(left) === -1) return null;
      }
    }
    if (blockDirective !== null) {
      var b = blockDirective + '';
      var left = blockNorm.replace(/[^a-z0-9]/g,'');
      var right = b.replace(/[^a-z0-9]/g,'');
      if (!(left === right || left.indexOf(right) !== -1 || right.indexOf(left) !== -1)) return null;
    }
    if (statusDirective !== null) {
      if (!(statusNorm.indexOf(statusDirective) !== -1 || hayNorm.indexOf(statusDirective) !== -1)) return null;
    }

    var tokens = typed.split(/\s+/).filter(Boolean);
    function looksLikeKToken(t){
      return /(^|\b)\d+(\.\d+)?\s*(k|katha)\b|\bk\s*\d+(\.\d+)?\b|\d+(\.\d+)?k\b/i.test(t) || /\bk\b/i.test(typed);
    }
    function looksLikeRToken(t){
      return /(^|\b)(r|rd|road)\s*\d+|\d+\s*(r|rd|road)\b|\br\d+\b|\d+r\b/i.test(t) || /\br\b/i.test(typed);
    }
    function looksLikePToken(t){
      return /(^|\b)(p|plot)\s*\w+|\w+\s*(p|plot)\b|\bp\d+\b|\d+p\b/i.test(t) || /\bp\b/i.test(typed);
    }
    function looksLikeBToken(t){
      return /(^|\b)(b|block)\s*[a-z0-9]+|\b[a-z]\b/i.test(t);
    }
    function looksLikeStatusToken(t){
      return /^(sold|cancelled|canceled|available|booked|complete|completed|pending)$/i.test(t);
    }

    var remaining = tokens.filter(function(t){
      if (kathaDirective !== null && looksLikeKToken(t)) return false;
      if (roadDirective  !== null && looksLikeRToken(t)) return false;
      if (plotDirective  !== null && looksLikePToken(t)) return false;
      if (blockDirective !== null && looksLikeBToken(t)) return false;
      if (statusDirective!== null && looksLikeStatusToken(t)) return false;
      return true;
    });

    if (remaining.length === 0) return data;

    var allRemainMatch = remaining.every(function(tok){
      var t = tok.replace(/[^a-z0-9\.\-\/]/g,'').toLowerCase();
      if (/^\d+$/.test(t)) {
        var num = parseInt(t,10);
        if (Number.isFinite(plotNum) && plotNum === num) return true;
        if (Number.isFinite(roadNum) && roadNum === num) return true;
        if (Number.isFinite(kathaNum) && Math.abs(kathaNum - num) < 1e-9) return true;
      }
      var m;
      if ((m = t.match(/^p(\d+)$/))) {
        if (Number.isFinite(plotNum) && plotNum === parseInt(m[1],10)) return true;
      }
      if ((m = t.match(/^(\d+)p$/))) {
        if (Number.isFinite(plotNum) && plotNum === parseInt(m[1],10)) return true;
      }
      if ((m = t.match(/^r(\d+)$/))) {
        if (Number.isFinite(roadNum) && roadNum === parseInt(m[1],10)) return true;
      }
      if ((m = t.match(/^(\d+)r$/))) {
        if (Number.isFinite(roadNum) && roadNum === parseInt(m[1],10)) return true;
      }
      if ((m = t.match(/^(\d+(?:\.\d+)?)k$/))) {
        if (Number.isFinite(kathaNum) && Math.abs(kathaNum - Number(m[1])) < 1e-9) return true;
      }
      if ((m = t.match(/^k(\d+(?:\.\d+)?)$/))) {
        if (Number.isFinite(kathaNum) && Math.abs(kathaNum - Number(m[1])) < 1e-9) return true;
      }
      if (/^[a-z]$/.test(t)) {
        if (blockNorm && (blockNorm === t || blockNorm.indexOf(t) !== -1)) return true;
      }
      if (hayNorm.indexOf(t) !== -1) return true;
      var parts = t.replace(/[\/\-_]/g,' ').split(/\s+/).filter(Boolean);
      if (parts.length > 1) {
        var ok = parts.every(function(p){ return hayNorm.indexOf(p) !== -1; });
        if (ok) return true;
      }
      if (blockNorm.indexOf(t) !== -1) return true;
      if (plotNorm.indexOf(t) !== -1) return true;
      return false;
    });

    return allRemainMatch ? data : null;
  }

  // Normalizer + templates
  function normalizePlotItem(it) {
    if (!it) return null;
    var id    = it.id || it.purchase_id || it.PK || '';
    var plot  = it.plot || it.plot_number || it.name || '';
    var katha = (it.katha !== undefined && it.katha !== null) ? String(it.katha) : '';
    var block = it.block || it.block_name || it.block_label || '';
    var road  = it.road || it.road_name || '';
    var facing  = it.facing || it.facing_name || '';
    var statusRaw = (it.status !== undefined && it.status !== null) ? it.status : (it.status_label !== undefined ? it.status_label : '');
    var statusLabel = '';
    if (it.status_label !== undefined && it.status_label !== null && String(it.status_label) !== '') {
      statusLabel = String(it.status_label);
    } else {
      var s = String(statusRaw).toLowerCase();
      if (s === '0' || s === '1' || s === 'available') statusLabel = 'Available';
      else if (s === '2' || s === 'sold' || s === 'booked') statusLabel = 'Sold';
      else if (s.indexOf('cancel') !== -1) statusLabel = 'Cancelled';
      else statusLabel = (s === '' ? '' : (s.charAt(0).toUpperCase() + s.slice(1)));
    }

    var available = (it.available !== undefined && it.available !== null) ? (Number(it.available) === 1) : (String(statusRaw) === '' || /^(0|1|available)$/i.test(String(statusRaw)));
    var disabledFlag = (it.disabled !== undefined && it.disabled !== null) ? (Number(it.disabled) === 1) : (!available && /^(2|sold|booked)$/i.test(String(statusRaw)));

    var parts = [];
    if (block) parts.push(String(block).toUpperCase());
    if (plot) parts.push('Plot ' + String(plot));
    if (katha) parts.push(String(katha) + ' katha');
    if (road) parts.push('Road ' + String(road));
    if (facing) parts.push('Facing ' + String(facing));
    var baseText = parts.join(' • ');

    return {
      id: id,
      text: baseText || String(id),
      plot: plot,
      katha: katha,
      block: block,
      road: road,
      facing: facing,
      status: statusRaw,
      status_label: statusLabel,
      available: !!available,
      blocked: !!disabledFlag,
      helpers: it.helpers || [],
      conflicts: it.conflicts || [],
      raw: it,
      disabled: false
    };
  }

  function select2TemplateResult(item) {
    if (!item || !item.id) return item && item.text ? item.text : null;
    var $wrap = $('<div class="select2-result-item d-flex justify-content-between"></div>');
    var $label = $('<div class="me-2 select2-main-text"></div>').text(item.text);
    $wrap.append($label);
    var badgeText = (item.status_label !== undefined && item.status_label !== null && String(item.status_label) !== '') ? String(item.status_label) : '';
    if (badgeText !== '') {
      var s = String(item.status || '').toLowerCase();
      var badgeClass = 'other';
      if (/(sold|2|booked)/.test(s)) badgeClass = 'sold';
      else if (/(cancel(ed)?|4)/.test(s)) badgeClass = 'cancelled';
      else if (/(avail|0|1|available)/.test(s)) badgeClass = 'available';
      else if (/(complete|3)/.test(s)) badgeClass = 'completed';
      var $badge = $('<span class="select2-result-badge ' + badgeClass + '"></span>').text(badgeText);
      $wrap.append($badge);
    }
    if (item.blocked) { $wrap.addClass('select2-result--disabled'); }
    return $wrap;
  }

  function select2TemplateSelection(item) {
    if (!item) return null;
    if (typeof item === 'string') return item;
    if (!item.id) return item.text || null;
    var $wrap = $('<span class="select2-selection-item d-flex justify-content-between align-items-center w-100" style="padding: 3px 6px;line-height: 2;"></span>').text(item.text);
    var hasLabel = (item.status_label !== undefined && item.status_label !== null && String(item.status_label) !== '');
    if (hasLabel) {
      var s = String(item.status || '').toLowerCase();
      var badgeClass = 'other';
      if (/(sold|2|booked)/.test(s)) badgeClass = 'sold';
      else if (/(cancel(ed)?|4)/.test(s)) badgeClass = 'cancelled';
      else if (/(avail|0|1|available)/.test(s)) badgeClass = 'available';
      else if (/(complete|3)/.test(s)) badgeClass = 'completed';
      $wrap.append(' ');
      $wrap.append($('<span class="select2-result-badge ' + badgeClass + '"></span>').text(String(item.status_label)));
    }
    return $wrap;
  }

  // Attach mapped objects to <option> elements (robust)
  function attachDataOptions($select, mapped) {
    try {
      $select.find('option').not('[value=""]').remove();
      mapped.forEach(function(m){
        if ($select.find('option[value="'+m.id+'"]').length === 0) {
          var newOpt = new Option(m.text, m.id, false, false);
          newOpt.disabled = false;
          $select.append(newOpt);
          $select.find('option[value="'+m.id+'"]').data('data', m);
        } else {
          $select.find('option[value="'+m.id+'"]').data('data', m);
        }
      });
    } catch (err) {
      console.error('attachDataOptions error', err);
    }
  }

  // DOM helpers for purchase details & calculations
  function getSelectedPlotObject($purchaseSelect) {
    var sel = null;
    try {
      var s2data = $purchaseSelect.select2 ? $purchaseSelect.select2('data') : null;
      if (Array.isArray(s2data) && s2data.length) sel = s2data[0];
      else if (s2data && s2data.id) sel = s2data;
    } catch(e){ /* ignore */ }

    if (!sel) {
      var curVal = $purchaseSelect.val();
      if (!curVal) return null;
      var $opt = $purchaseSelect.find('option[value="'+curVal+'"]');
      if ($opt.length && $opt.data('data')) sel = $opt.data('data');
      else if ($opt.length) sel = normalizePlotItem({ id: curVal, name: $opt.text() });
    }
    return sel || null;
  }

  function formatCurrencyNumber(n) {
    if (isNaN(n) || n === null) return '৳0';
    return '৳' + Number(Math.round(n * 10) / 10).toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 1
    });
  }

  function computeAndUpdateTotals(selItem) {
    var perKatha = parseFloat($('#perKathaPrice').val());
    if (isNaN(perKatha)) perKatha = 0;
    var down = parseFloat($('#downPayment').val());
    if (isNaN(down)) down = 0;
    var booking = parseFloat($('#bookingMoney').val());
    if (isNaN(booking)) booking = 0;

    var katha = 0;
    if (selItem) {
      var rawk = selItem.katha || (selItem.raw && selItem.raw.katha) || '';
      if (typeof rawk === 'string') rawk = rawk.replace(/[^0-9.\-]/g, '');
      katha = parseFloat(rawk);
      if (isNaN(katha)) katha = 0;
    }
    var total = perKatha * katha;
    var due = total - (booking + down); // Updated calculation: total - (booking money + down payment)
    if (due < 0) due = 0;

    $('#totalPrice').val(formatCurrencyNumber(total));
    $('#duePrice').val(formatCurrencyNumber(due));
  }

  // show inline warning for non-available items (but still allow selection)
  function showSelectionWarning(item) {
    var $container = $('#purchaseDetails');
    if (!$container.length) return;
    var $warn = $container.find('.purchase-warning');
    if (!$warn.length) {
      $warn = $('<div class="alert alert-warning purchase-warning mt-2" style="display:none;"></div>');
      $container.prepend($warn);
    }

    if (!item) {
      $warn.hide();
      return;
    }

    if (item.available === false || item.blocked) {
      var msg = '<strong>Note:</strong> This plot is not currently free (status: ' + (item.status_label || item.status || 'unknown') + ').';
      if (Array.isArray(item.conflicts) && item.conflicts.length) {
        msg += '<br><small>Conflicts:</small><ul>';
        item.conflicts.slice(0,5).forEach(function(c){
          msg += '<li>Booking#' + (c.booking_id||'-') + ' — File: ' + (c.file_id||'-') + ' — status: ' + (c.status||'-') + '</li>';
        });
        msg += '</ul>';
      } else if (Array.isArray(item.helpers) && item.helpers.length) {
        msg += '<br><small>Helpers:</small><ul>';
        item.helpers.slice(0,5).forEach(function(h){
          msg += '<li>File: ' + (h.file_id||'-') + ' — status: ' + (h.status||'-') + '</li>';
        });
        msg += '</ul>';
      } else {
        msg += '<br><small>If you continue the system will attempt to force assign on save (you will be asked to confirm).</small>';
      }
      $warn.html(msg).show();
    } else {
      $warn.hide();
    }
  }

  function populateDetailFields(sel) {
    if (!sel) {
      $('#purchaseDetails').hide();
      $('#detailBlock').val('');
      $('#detailPlot').val('');
      $('#detailRoad').val('');
      $('#detailStatus').val('');
      $('#detailFacing').val('');
      computeAndUpdateTotals(null);
      showSelectionWarning(null);
      return;
    }

    $('#purchaseDetails').show();
    $('#detailBlock').val(sel.block ? String(sel.block).toUpperCase() : '');
    $('#detailPlot').val(sel.plot || '');
    $('#detailRoad').val(sel.road || '');
    $('#detailFacing').val(sel.facing || '');

    var statusToShow = (sel.status_label !== undefined && sel.status_label !== null && String(sel.status_label) !== '') ? String(sel.status_label) : (sel.status !== undefined && sel.status !== null ? String(sel.status) : '');
    $('#detailStatus').val(statusToShow);

    var defaultRate = (sel.raw && (sel.raw.default_rate || sel.raw.per_katha || sel.raw.rate)) || null;
    if (defaultRate && ($('#perKathaPrice').val() === '' || $('#perKathaPrice').data('userEdited') !== true)) {
      $('#perKathaPrice').val(defaultRate);
    }

    computeAndUpdateTotals(sel);
    showSelectionWarning(sel);
  }

  // mark per-katha input as user-edited to avoid overwriting
  $(document).on('input', '#perKathaPrice', function(){ $(this).data('userEdited', true); computeAndUpdateTotals(getSelectedPlotObject($('#purchaseSelect'))); });
  $(document).on('input', '#downPayment, #bookingMoney', function(){ computeAndUpdateTotals(getSelectedPlotObject($('#purchaseSelect'))); });

  // focus Select2 search input when opened (all select2)
  $(document).on('select2:open', function(e){
    setTimeout(function(){
      var $search = $('.select2-container--open .select2-search__field').first();
      if ($search && $search.length) {
        try { $search.get(0).focus(); } catch(e) { /* ignore */ }
      }
    }, 0);
  });

  // Printing helpers: clone & print selected booking form(s)
  function _createPrintWrapperForNodes(nodes) {
    var $wrap = $('<div id="print-wrapper-temp"></div>');
    $wrap.css({ position: 'relative', zIndex: 99999 });
    nodes.forEach(function(node){
      var $clone = $(node).clone(true, true);
      $clone.removeClass('d-none');
      $clone.css({ display: 'block', visibility: 'visible', position: 'relative' });
      $wrap.append($clone);
    });
    $('body').append($wrap);
    return $wrap;
  }

  function _cleanupPrintWrapper($wrap) {
    if (!$wrap || !$wrap.length) return;
    try { $wrap.remove(); } catch(e){ /* ignore */ }
  }

  function printBookingFormsByIds(ids) {
    if (!ids) return;
    ids = Array.isArray(ids) ? ids : [ids];

    var nodes = [];
    ids.forEach(function(id){
      var selector = '.print_area[data-purchase-id="' + id + '"]';
      var el = $(selector)[0];
      if (el) nodes.push(el);
    });

    if (!nodes.length) {
      alert('No booking form found for printing.');
      return;
    }

    var $wrap = _createPrintWrapperForNodes(nodes);

    var afterPrintHandler = function(){
      try { _cleanupPrintWrapper($wrap); } catch(e) { }
      try { window.removeEventListener('afterprint', afterPrintHandler); } catch(e) { }
    };

    window.addEventListener('afterprint', afterPrintHandler);

    setTimeout(function(){
      try { window.print(); } catch(e){ console.error('Print error', e); }
      setTimeout(function(){ _cleanupPrintWrapper($wrap); try { window.removeEventListener('afterprint', afterPrintHandler); } catch(e){} }, 3000);
    }, 50);
  }

  // ---------- AJAX-backed Select2 for purchases with robust transport + flexible processResults ----------
  function buildSelect2AjaxOpts(projectId) {
    return {
      dropdownParent: $('#viewClient-modal .modal-content'),
      placeholder: 'Search plots (block/plot/katha/road)...',
      allowClear: true,
      minimumInputLength: 1,
      ajax: {
        // robust transport wrapper so Select2 always gets callbacks (prevents stuck "Searching...")
        transport: function (params, success, failure) {
          var ajaxParams = params;
          // params contains 'url', 'data', 'type' etc. Let jQuery handle it.
          var $req = $.ajax(ajaxParams);
          $req.done(function(data, textStatus, jqXHR){
            success(data, textStatus, jqXHR);
          }).fail(function(jqXHR, textStatus, errorThrown){
            failure();
          });
          return $req;
        },
        url: Wo_Ajax_Requests_File() + '?f=manage_inventory&s=search_purchases',
        dataType: 'json',
        delay: 250,
        cache: true,
        data: function (params) {
          return {
            q: params.term || '',
            page: params.page || 1,
            per_page: 30,
            project_id: projectId
          };
        },
        processResults: function (data, params) {
          params.page = params.page || 1;
          try {
            // Accept raw array, or { results: [...] }, or { data: [...] }, or { items: [...] }
            var rows = [];
            var more = false;
            if (!data) {
              rows = [];
              more = false;
            } else if (Array.isArray(data)) {
              rows = data;
              more = false;
            } else if (Array.isArray(data.results)) {
              rows = data.results;
              more = !!data.more;
            } else if (Array.isArray(data.data)) {
              rows = data.data;
              more = !!data.more;
            } else if (Array.isArray(data.items)) {
              rows = data.items;
              more = !!data.more;
            } else if (data && data.status === 200 && Array.isArray(data.rows)) {
              rows = data.rows;
              more = !!data.more;
            } else {
              // If server returned object where plots are under a key, try to find first array
              for (var k in data) {
                if (Array.isArray(data[k])) { rows = data[k]; break; }
              }
            }

            var mapped = Array.isArray(rows) ? rows.map(normalizePlotItem).filter(Boolean) : [];
            return {
              results: mapped,
              pagination: { more: !!more }
            };
          } catch (e) {
            console.error('processResults error', e);
            return { results: [], pagination: { more: false } };
          }
        }
      },
      templateResult: select2TemplateResult,
      templateSelection: select2TemplateSelection,
      matcher: advancedMatcher,
      escapeMarkup: function(m){ return m; },
      createTag: false
    };
  }

  function initPurchaseSelectAjax(projectId) {
    var $purchaseSelect = $('#purchaseSelect');
    try {
      if ($purchaseSelect.data('select2') || $purchaseSelect.hasClass('select2-hidden-accessible')) {
        $purchaseSelect.select2('destroy');
      }
    } catch(e){}
    $purchaseSelect.find('option').not('[value=""]').remove();
    $purchaseSelect.val(null).trigger('change');

    safeInit($purchaseSelect, buildSelect2AjaxOpts(projectId));

    $purchaseSelect.off('select2:select').on('select2:select', function(e){
      var item = e.params && e.params.data ? e.params.data : null;
      if (!item || !item.id) item = getSelectedPlotObject($purchaseSelect);
      populateDetailFields(item);
    });

    $purchaseSelect.off('change.plotselect').on('change.plotselect', function(){
      var item = getSelectedPlotObject($purchaseSelect);
      populateDetailFields(item);
    });

    return $purchaseSelect;
  }

  // fetch a single item for preselection and attach
  function ensureOptionForSelectedId($select, selectedId, projectId) {
    if (!selectedId) return $.Deferred().resolve().promise();
    return $.getJSON(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_by_id', { id: selectedId, project_id: projectId })
      .then(function(resp){
        if (resp && resp.status === 200 && resp.item) {
          var normalized = normalizePlotItem(resp.item);
          if ($select.find('option[value="' + normalized.id + '"]').length === 0) {
            var opt = new Option(normalized.text, normalized.id, true, true);
            $select.append(opt).trigger('change');
            $select.find('option[value="'+normalized.id+'"]').data('data', normalized);
          } else {
            $select.val(normalized.id).trigger('change');
          }
          populateDetailFields(normalized);
        }
      }).fail(function(){ /* ignore failure */ });
  }

  // ----------------------------
  // Modal lifecycle: initialize Select2 when modal opens
  // ----------------------------
  $('#viewClient-modal').on('shown.bs.modal', function(){
    var $modalContent = $('#viewClient-modal .modal-content');

    safeInit($('#projectSelect'), {
      dropdownParent: $modalContent,
      placeholder: 'Select Project',
      allowClear: true
    });

    safeInit($('#nomineeSelect'), {
      dropdownParent: $modalContent,
      placeholder: 'Select nominee(s)',
      allowClear: true,
      containerCssClass: 'select2-nominee-exclude'
    });

    // purchaseSelect: start empty and will be AJAX-initialized when project changes
    try {
      if ($('#purchaseSelect').data('select2') || $('#purchaseSelect').hasClass('select2-hidden-accessible')) {
        $('#purchaseSelect').select2('destroy');
      }
    } catch(e){}
    $('#purchaseSelect').find('option').not('[value=""]').remove();
    safeInit($('#purchaseSelect'), {
      dropdownParent: $modalContent,
      placeholder: 'Select Plot',
      allowClear: true,
      templateResult: select2TemplateResult,
      templateSelection: select2TemplateSelection,
      matcher: advancedMatcher,
      escapeMarkup: function(m){ return m; }
    });

    $('#purchaseDetails').hide();
  });

  $('#viewClient-modal').on('hidden.bs.modal', function(){
    $('#projectSelect,#purchaseSelect,#nomineeSelect').each(function(){
      try { if ($(this).data('select2')) $(this).select2('destroy'); } catch(e){ }
    });
    $('#purchaseDetails').hide();
  });

  // Add Purchase UI toggle
  $('#addPurchaseBtn').on('click', function(){
    $('#addPurchaseForm').slideDown();
    $(this).hide();

    var $modalContent = $('#viewClient-modal .modal-content');
    safeInit($('#projectSelect'), { dropdownParent: $modalContent, placeholder:'Select Project', allowClear:true });
    // leave purchaseSelect as AJAX (it will init on project change)
    safeInit($('#nomineeSelect'), { dropdownParent: $modalContent, placeholder: 'Select nominee(s)', allowClear: true, containerCssClass: 'select2-nominee-exclude' });

    $('#purchaseDetails').hide();
    $('#perKathaPrice').data('userEdited', false);
  });

  $('#cancelPurchaseBtn').on('click', function(){
    $('#addPurchaseForm').slideUp();
    $('#addPurchaseBtn').show();
    $('#projectSelect,#purchaseSelect,#nomineeSelect').val(null).trigger('change');
    $('#purchaseDetails').hide();
    $('#perKathaPrice').data('userEdited', false);
  });

  // ----------------------------
  // When project changes: initialize AJAX-backed select, but try small fallback to existing endpoint if safe
  // ----------------------------
  $('#projectSelect').off('change').on('change', function(){
    var projectId = $(this).val();
    $('#purchaseDetails').hide();

    var $purchaseSelect = $('#purchaseSelect');

    if (!projectId) {
      try { $purchaseSelect.select2('destroy'); } catch(e){}
      $purchaseSelect.find('option').not('[value=""]').remove();
      $purchaseSelect.val(null).trigger('change');
      return;
    }

    // init AJAX-backed select2 immediately (fast)
    initPurchaseSelectAjax(projectId);

    // Also attempt a *safe* fallback: if your existing endpoint returns a small list, attach it.
    // This helps older servers that expect get_available_purchases. We'll consider it safe if length <= 500.
    // If it returns a large array (>500) we discard to avoid DOM freeze.
    var fallbackUrl = Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_available_purchases&project_id=' + encodeURIComponent(projectId);
    $.getJSON(fallbackUrl, function(data){
      if (!Array.isArray(data)) return;
      try {
        if (data.length > 500) {
          // Too large — skip fallback to avoid DOM bloat. Rely on AJAX search.
          return;
        }
        // small enough -> use as initial page
        var mapped = data.map(normalizePlotItem).filter(Boolean);
        mapped.forEach(function(m){
          if (!m.blocked) {
            var s = (m.status || '').toString().toLowerCase();
            if (/(sold|2|booked)/.test(s)) m.blocked = true;
          }
          m.disabled = false;
        });
        // Attach small set into select so users can open dropdown without typing
        attachDataOptions($purchaseSelect, mapped);

        // re-init select2 with this local dataset (Select2 will still use AJAX for searching)
        try {
          if ($purchaseSelect.data('select2') || $purchaseSelect.hasClass('select2-hidden-accessible')) {
            $purchaseSelect.select2('destroy');
          }
        } catch(e){}
        safeInit($purchaseSelect, {
          dropdownParent: $('#viewClient-modal .modal-content'),
          placeholder: 'Select Plot',
          allowClear: true,
          data: mapped,
          templateResult: select2TemplateResult,
          templateSelection: select2TemplateSelection,
          matcher: advancedMatcher,
          escapeMarkup: function(m){ return m; }
        });

        // ensure selected option(s) get their data attached
        (function ensureSelectedHasData(){
          try {
            var curVal = $purchaseSelect.val();
            if (!curVal) return;
            var values = Array.isArray(curVal) ? curVal.slice() : [curVal];
            values.forEach(function(v){
              var sel = mapped.find(function(m){ return String(m.id) === String(v); });
              if (sel) {
                if (!$purchaseSelect.find('option[value="'+sel.id+'"]').length) {
                  $purchaseSelect.append(new Option(sel.text, sel.id, true, true));
                }
                $purchaseSelect.find('option[value="'+sel.id+'"]').data('data', sel);
              } else {
                var $opt = $purchaseSelect.find('option[value="'+v+'"]');
                if ($opt.length) {
                  var fallback = normalizePlotItem({ id: v, name: $opt.text() });
                  $opt.data('data', fallback);
                }
              }
            });
            $purchaseSelect.trigger('change.select2');
          } catch (err) {
            console.error('ensureSelectedHasData failed', err);
          }
        })();

      } catch(e) {
        // ignore fallback errors and continue with AJAX-only
        console.warn('Fallback processing failed, continuing with AJAX search', e);
      }
    }).fail(function(){ /* ignore fallback failure - rely on AJAX option */ });

    // fetch default_rate for project if available
    $.getJSON(Wo_Ajax_Requests_File() + '?f=manage_clients&s=default_rate&project_id=' + encodeURIComponent(projectId), function(response){
      if (response && response.status == 200) {
        if ($('#perKathaPrice').data('userEdited') !== true) {
          $('#perKathaPrice').val(response.default_rate);
          computeAndUpdateTotals(getSelectedPlotObject($('#purchaseSelect')));
        }
      }
    });
  });

  // Helper: show override modal with HTML content
  function showOverrideModal(htmlContent, onConfirm) {
    $('#overrideConfirmBody').html(htmlContent || '<p>There is an existing active booking for this plot. Continue?</p>');
    var bsModal = new bootstrap.Modal(document.getElementById('overrideConfirmModal'), { backdrop: 'static' });
    $('#overrideConfirmYes').off('click').on('click', function(){
      bsModal.hide();
      if (typeof onConfirm === 'function') onConfirm();
    });
    bsModal.show();
  }

  // Safe append of server HTML / fallback building
  function safeAppendRow(htmlOrSafeFn) {
    try {
      if (typeof htmlOrSafeFn === 'function') {
        var $node = htmlOrSafeFn();
        if ($node && $node.jquery) $('#purchaseTable tbody').append($node);
        else $('#purchaseTable tbody').append('<tr><td colspan="7">Invalid row</td></tr>');
      } else if (typeof htmlOrSafeFn === 'string') {
        var $el = $(htmlOrSafeFn);
        if ($el.length) $('#purchaseTable tbody').append($el);
        else {
          $('#purchaseTable tbody').append('<tr><td colspan="7">' + $('<div>').text(htmlOrSafeFn).html() + '</td></tr>');
        }
      } else {
        $('#purchaseTable tbody').append('<tr><td colspan="7">No content</td></tr>');
      }
    } catch (err) {
      console.error('safeAppendRow failed:', err);
      $('#purchaseTable tbody').append('<tr><td colspan="7">Failed to append row</td></tr>');
    }
  }

  // Register attempt (returns jqXHR)
  function attemptRegister(payload) {
    var ajaxUrl = Wo_Ajax_Requests_File() + '?f=manage_inventory&s=register_purchase';
    return $.ajax({
      url: ajaxUrl,
      method: 'POST',
      data: payload,
      dataType: 'json'
    });
  }

  // Save purchase click -> check server for conflicts, then register or show confirm modal
  $('#savePurchaseBtn').off('click').on('click', function(){
    var project_id    = $('#projectSelect').val();
    var purchase_id   = $('#purchaseSelect').val(); // plot id
    var purchase_date = $('#purchaseDate').val();
    var down_payment_raw = $('#downPayment').val();
    var booking_money_raw = $('#bookingMoney').val();
    var per_katha_raw    = $('#perKathaPrice').val();
    var file_num_raw     = $('#file_num').val();

    // normalize/trim
    per_katha_raw = per_katha_raw ? per_katha_raw.toString().trim() : '';
    down_payment_raw = down_payment_raw ? down_payment_raw.toString().trim() : '';
    booking_money_raw = booking_money_raw ? booking_money_raw.toString().trim() : '';
    file_num_raw = file_num_raw ? file_num_raw.toString().trim() : '';

    // client-side validation
    var errors = [];
    if (!project_id) errors.push('Please select a project.');
    if (!purchase_id) errors.push('Please select a plot.');
    if (!file_num_raw) errors.push('File Number is required.');
    var per_katha_val = per_katha_raw === '' ? NaN : Number(per_katha_raw);
    var down_payment_val = down_payment_raw === '' ? NaN : Number(down_payment_raw);
    var booking_money_val = booking_money_raw === '' ? 0 : Number(booking_money_raw); // Default to 0 if empty
    if (isNaN(per_katha_val)) errors.push('Price per Katha is required and must be a number.');
    if (isNaN(down_payment_val)) errors.push('Down Payment is required (0 allowed).');
    if (isNaN(booking_money_val) || booking_money_val < 0) errors.push('Booking Money must be a valid number >= 0.');

    if (errors.length) {
      var $container = $('#purchaseDetails');
      if (!$container.length) {
        alert(errors.join('\n')); // fallback
        return;
      }
      var $err = $container.find('.client-error');
      if (!$err.length) {
        $err = $('<div class="alert alert-danger client-error mt-2"></div>');
        $container.prepend($err);
      }
      $err.html(errors.join('<br>')).show();
      return;
    } else {
      $('#purchaseDetails .client-error').hide();
    }

    var file_num = file_num_raw;
    var $btn = $(this);
    $btn.prop('disabled', true).addClass('loading');

    // collect nominee ids (array) and csv fallback
    var nominee_ids = $('#nomineeSelect').val() || [];
    var nominee_ids_csv = Array.isArray(nominee_ids) ? nominee_ids.join(',') : (nominee_ids ? String(nominee_ids) : '');

    // Step 1: check booking conflicts (include file_num)
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=check_plot_booking', {
      project_id: project_id,
      purchase_id: purchase_id,
      purchase_date: purchase_date,
      file_num: file_num
    }, function(check){
      $btn.prop('disabled', false).removeClass('loading');

      if (!check || check.status !== 200) {
        alert(check && check.message ? check.message : 'Failed to check booking status');
        return;
      }

      var payload = {
        client_id: <?= (int)$wo['client']['id'] ?>,
        project_id: project_id,
        purchase_id: purchase_id,
        file_num: file_num,
        down_payment: down_payment_val,
        booking_money: booking_money_val, // Add booking money to payload
        per_katha: per_katha_val,
        purchase_date: purchase_date,
        nominee_ids: nominee_ids,         // array -> nominee_ids[]=1&nominee_ids[]=2
        nominee_ids_csv: nominee_ids_csv  // optional fallback
      };

      // register function (will pass force=1 when needed)
      var doRegister = function(force){
        var p = $.extend({}, payload);
        if (force) p.force = 1;
        $btn.prop('disabled', true).addClass('loading');

        attemptRegister(p).done(function(res){
          $btn.prop('disabled', false).removeClass('loading');

          if (res && res.status == 200) {
            safeAppendRow(function(){
              if (res.purchase_id && res.html) {
                try {
                  var $h = $(res.html);
                  if ($h.length) return $h;
                } catch(e){ /* fallback */ }
              }
              if (res.booking) {
                var b = res.booking;
                var $tr = $('<tr>').attr('id', 'purchaseRow_' + (res.purchase_id || 'new'));
                $tr.append($('<td>').text(b.project_name || 'Project'));
                $tr.append($('<td>').text(b.project_id==2 ? (b.block || 'N/A') : 'N/A'));
                $tr.append($('<td>').text(b.katha || ''));
                $tr.append($('<td>').text(b.plot || ''));
                $tr.append($('<td>').text(b.road || ''));
                $tr.append($('<td>').text((new Date()).toLocaleDateString()));
                $tr.append($('<td>').html('<button class="btn btn-sm btn-danger cancel-purchase" data-id="' + (res.purchase_id || '') + '"><i class="lni lni-close" style=" font-size: 10px; "></i> </button>'));
                return $tr;
              }
              return $(res.html || '<tr><td colspan="7">Purchase added</td></tr>');
            });

            $('#addPurchaseForm').slideUp(); $('#addPurchaseBtn').show();
            $('#purchaseDetails').hide();
            $('#projectSelect,#purchaseSelect,#nomineeSelect').val(null).trigger('change');
            $('#file_num').val('');
            $('#perKathaPrice').val('');
            $('#downPayment').val('');
            $('#bookingMoney').val('0');
          } else if (res && res.status == 409) {
            var html = '<p>' + (res.message || 'Conflict detected') + '</p>';
            if (res.conflicts && res.conflicts.length) {
              html += '<ul>';
              res.conflicts.slice(0,10).forEach(function(c){
                html += '<li>Booking#' + (c.booking_id||'-') + ' — File: ' + (c.file_id||'-') + ' — status: ' + (c.status||'-') + '</li>';
              });
              html += '</ul>';
            }
            html += '<p class="text-muted">If you continue the system will force assign this plot to the client.</p>';
            showOverrideModal(html, function(){
              doRegister(true);
            });
          } else {
            alert(res && res.message ? res.message : 'Failed to register purchase');
          }
        }).fail(function(xhr){
          $btn.prop('disabled', false).removeClass('loading');

          var json = null;
          try { json = JSON.parse(xhr.responseText); } catch(e){ }
          if (json && json.status == 409) {
            var html = '<p>' + (json.message || 'Conflict detected') + '</p>';
            if (json.conflicts && json.conflicts.length) {
              html += '<ul>';
              json.conflicts.slice(0,10).forEach(function(c){
                html += '<li>Booking#' + (c.booking_id||'-') + ' — File: ' + (c.file_id||'-') + ' — status: ' + (c.status||'-') + '</li>';
              });
              html += '</ul>';
            }
            html += '<p class="text-muted">If you continue the system will force assign this plot to the client.</p>';
            showOverrideModal(html, function(){
              attemptRegister($.extend({}, payload, { force:1 })).done(function(r2){
                if (r2 && r2.status == 200) {
                  safeAppendRow(r2.html || r2.html);
                  $('#addPurchaseForm').slideUp(); $('#addPurchaseBtn').show();
                  $('#purchaseDetails').hide();
                  $('#projectSelect,#purchaseSelect,#nomineeSelect').val(null).trigger('change');
                  $('#file_num').val('');
                  $('#perKathaPrice').val('');
                  $('#downPayment').val('');
                  $('#bookingMoney').val('0');
                } else {
                  alert(r2 && r2.message ? r2.message : 'Failed to force register purchase');
                }
              }).fail(function(){ alert('Request failed'); });
            });
          } else {
            alert('Failed to register purchase (server error)');
          }
        });
      }; // end doRegister

      // decide to force or not based on check response
      if (check.available === true) {
        doRegister(false);
      } else {
        var content = '<p>' + (check.message || 'Active booking(s) found for this plot.') + '</p>';
        if (check.conflicts && check.conflicts.length) {
          content += '<ul>';
          check.conflicts.slice(0,10).forEach(function(c){
            content += '<li>Booking#' + (c.booking_id||'-') + ' — File: ' + (c.file_id||'-') + ' — status: ' + (c.status||'-') + '</li>';
          });
          content += '</ul>';
        }
        content += '<p class="text-muted">Do you want to continue and force the purchase?</p>';
        showOverrideModal(content, function(){ doRegister(true); });
      }

    }, 'json').fail(function(){
      $btn.prop('disabled', false).removeClass('loading');
      alert('Failed to check booking status (network/server error)');
    });
  });

  // NEW: wire cancel-purchase -> show date modal, then send cancel with date
  // bsCancelModal was created earlier (after relocation); if not available create one now
  if (!bsCancelModal) {
    try { bsCancelModal = new bootstrap.Modal(document.getElementById('cancelPurchaseModal'), { backdrop: 'static' }); } catch(e){ bsCancelModal = null; }
  }

  // open modal and set booking id
  $(document).off('click', '.cancel-purchase').on('click', '.cancel-purchase', function(e){
    e.preventDefault();
    var id = $(this).data('id');
    if (!id) {
      alert('Booking id missing');
      return;
    }
    // set hidden id and default date
    $('#cancel_purchase_id').val(id);
    var $date = $('#cancel_purchase_date');
    // Default to today if empty
    if (!$date.val()) $date.val(new Date().toISOString().slice(0,10));
    // init flatpickr if available (and avoid double-init)
    try {
      if (typeof flatpickr !== 'undefined') {
        if ($date.data('flatpickr')) {
          // already initialised
        } else {
          flatpickr('#cancel_purchase_date', { dateFormat: 'Y-m-d' });
        }
      }
    } catch(e){ /* ignore */ }
    $('#cancelPurchaseError').hide().text('');
    if (bsCancelModal) bsCancelModal.show();
    else $('#cancelPurchaseModal').modal('show'); // fallback (if using jQuery/bootstrap 4)
  });

  // confirm cancel -> send AJAX with booking_helper_id and date
  $('#confirmCancelPurchaseBtn').off('click').on('click', function(){
    var $btn = $(this);
    var id = $('#cancel_purchase_id').val();
    var date = $('#cancel_purchase_date').val();
    if (!id) { $('#cancelPurchaseError').show().text('Missing booking id.'); return; }
    if (!date) { $('#cancelPurchaseError').show().text('Please choose a date.'); return; }

    $btn.prop('disabled', true).addClass('loading');

    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=cancel_purchase', {
      booking_helper_id: id,
      cancel_date: date
    }, function(res){
      $btn.prop('disabled', false).removeClass('loading');
      if (res && res.status == 200) {
        // remove row and hide modal
        $('#purchaseRow_' + id).fadeOut(300, function(){ $(this).remove(); });
        if (bsCancelModal) bsCancelModal.hide();
        else $('#cancelPurchaseModal').modal('hide');
      } else {
        var msg = (res && res.message) ? res.message : 'Failed to cancel purchase';
        $('#cancelPurchaseError').show().text(msg);
      }
    }, 'json').fail(function(xhr){
      $btn.prop('disabled', false).removeClass('loading');
      var json = null;
      try { json = JSON.parse(xhr.responseText); } catch(e){}
      if (json && json.message) $('#cancelPurchaseError').show().text(json.message);
      else $('#cancelPurchaseError').show().text('Request failed (network/server error)');
    });
  });

  // Keep default_rate handler when project changes (populate only if user didn't edit)
  $('#projectSelect').on('change', function(){
    var project_id = $(this).val();
    if (!project_id) return;
    $.getJSON(Wo_Ajax_Requests_File() + '?f=manage_clients&s=default_rate&project_id=' + encodeURIComponent(project_id), function(response){
      if (response && response.status == 200) {
        if ($('#perKathaPrice').data('userEdited') !== true) {
          $('#perKathaPrice').val(response.default_rate);
          computeAndUpdateTotals(getSelectedPlotObject($('#purchaseSelect')));
        }
      }
    });
  });

  // Wire #printButton to print ALL booking forms in this modal
  $('#printButton').off('click').on('click', function(){
    var ids = [];
    $('#viewClient-modal .print_area').each(function(){
      var id = $(this).attr('data-purchase-id');
      if (id) ids.push(id);
    });
    if (!ids.length) {
      alert('No booking forms available to print.');
      return;
    }
    printBookingFormsByIds(ids);
  });

  // Wire individual print button(s) -> print only that booking form
  $(document).off('click', '.print-booking-form').on('click', '.print-booking-form', function(e){
    e.preventDefault();
    var id = $(this).data('id');
    if (!id) { alert('Booking id missing'); return; }
    printBookingFormsByIds([id]);
  });

});
</script>