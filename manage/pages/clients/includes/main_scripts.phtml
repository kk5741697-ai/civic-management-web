<!-- Main JavaScript -->
<script>
jQuery(function($){
  'use strict';

  // Initialize variables
  var isFormVisible = false;
  var select2Instances = {};

  // Helper functions
  function ajaxBase() {
    if (typeof Wo_Ajax_Requests_File === 'function') {
      return Wo_Ajax_Requests_File() + '?f=manage_clients';
    }
    return '/requests.php?f=manage_clients';
  }

  function inventoryBase() {
    if (typeof Wo_Ajax_Requests_File === 'function') {
      return Wo_Ajax_Requests_File() + '?f=manage_inventory';
    }
    return '/requests.php?f=manage_inventory';
  }

  function formatCurrency(n) {
    if (isNaN(n) || n === null) return '৳0';
    return '৳' + Number(Math.round(n * 10) / 10).toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 1
    });
  }

  // Safe Select2 initialization and destruction
  function safeInitSelect2(selector, options) {
    var $el = $(selector);
    if (!$el.length) return null;

    // Destroy existing instance
    if (select2Instances[selector]) {
      try {
        select2Instances[selector].destroy();
      } catch (e) {
        console.warn('Failed to destroy Select2 instance:', e);
      }
      delete select2Instances[selector];
    }

    // Clean up any existing select2 classes
    $el.removeClass('select2-hidden-accessible');
    $el.next('.select2-container').remove();

    try {
      var instance = $el.select2($.extend({
        width: '100%',
        theme: 'bootstrap-5',
        allowClear: true,
        dropdownParent: $('#viewClient-modal')
      }, options || {}));
      
      select2Instances[selector] = instance;
      return instance;
    } catch (e) {
      console.error('Failed to initialize Select2:', e);
      return null;
    }
  }

  function destroyAllSelect2() {
    Object.keys(select2Instances).forEach(function(selector) {
      try {
        if (select2Instances[selector]) {
          select2Instances[selector].destroy();
          delete select2Instances[selector];
        }
      } catch (e) {
        console.warn('Failed to destroy Select2 instance:', e);
      }
    });
  }

  // Plot normalization and templates
  function normalizePlotItem(it) {
    if (!it) return null;
    var id    = it.id || it.purchase_id || it.PK || '';
    var plot  = it.plot || it.plot_number || it.name || '';
    var katha = (it.katha !== undefined && it.katha !== null) ? String(it.katha) : '';
    var block = it.block || it.block_name || it.block_label || '';
    var road  = it.road || it.road_name || '';
    var facing  = it.facing || it.facing_name || '';
    var statusRaw = (it.status !== undefined && it.status !== null) ? it.status : (it.status_label !== undefined ? it.status_label : '');
    var statusLabel = '';
    if (it.status_label !== undefined && it.status_label !== null && String(it.status_label) !== '') {
      statusLabel = String(it.status_label);
    } else {
      var s = String(statusRaw).toLowerCase();
      if (s === '0' || s === '1' || s === 'available') statusLabel = 'Available';
      else if (s === '2' || s === 'sold' || s === 'booked') statusLabel = 'Sold';
      else if (s.indexOf('cancel') !== -1) statusLabel = 'Cancelled';
      else statusLabel = (s === '' ? '' : (s.charAt(0).toUpperCase() + s.slice(1)));
    }

    var available = (it.available !== undefined && it.available !== null) ? (Number(it.available) === 1) : (String(statusRaw) === '' || /^(0|1|available)$/i.test(String(statusRaw)));
    var disabledFlag = (it.disabled !== undefined && it.disabled !== null) ? (Number(it.disabled) === 1) : (!available && /^(2|sold|booked)$/i.test(String(statusRaw)));

    var parts = [];
    if (block) parts.push(String(block).toUpperCase());
    if (plot) parts.push('Plot ' + String(plot));
    if (katha) parts.push(String(katha) + ' katha');
    if (road) parts.push('Road ' + String(road));
    if (facing) parts.push('Facing ' + String(facing));
    var baseText = parts.join(' • ');

    return {
      id: id,
      text: baseText || String(id),
      plot: plot,
      katha: katha,
      block: block,
      road: road,
      facing: facing,
      status: statusRaw,
      status_label: statusLabel,
      available: !!available,
      blocked: !!disabledFlag,
      helpers: it.helpers || [],
      conflicts: it.conflicts || [],
      raw: it,
      disabled: false
    };
  }

  function select2TemplateResult(item) {
    if (!item || !item.id) return item && item.text ? item.text : null;
    var $wrap = $('<div class="select2-result-item d-flex justify-content-between"></div>');
    var $label = $('<div class="me-2 select2-main-text"></div>').text(item.text);
    $wrap.append($label);
    var badgeText = (item.status_label !== undefined && item.status_label !== null && String(item.status_label) !== '') ? String(item.status_label) : '';
    if (badgeText !== '') {
      var s = String(item.status || '').toLowerCase();
      var badgeClass = 'other';
      if (/(sold|2|booked)/.test(s)) badgeClass = 'sold';
      else if (/(cancel(ed)?|4)/.test(s)) badgeClass = 'cancelled';
      else if (/(avail|0|1|available)/.test(s)) badgeClass = 'available';
      else if (/(complete|3)/.test(s)) badgeClass = 'completed';
      var $badge = $('<span class="select2-result-badge ' + badgeClass + '"></span>').text(badgeText);
      $wrap.append($badge);
    }
    if (item.blocked) { $wrap.addClass('select2-result--disabled'); }
    return $wrap;
  }

  function select2TemplateSelection(item) {
    if (!item) return null;
    if (typeof item === 'string') return item;
    if (!item.id) return item.text || null;
    var $wrap = $('<span class="select2-selection-item d-flex justify-content-between align-items-center w-100" style="padding: 3px 6px;line-height: 2;"></span>').text(item.text);
    var hasLabel = (item.status_label !== undefined && item.status_label !== null && String(item.status_label) !== '');
    if (hasLabel) {
      var s = String(item.status || '').toLowerCase();
      var badgeClass = 'other';
      if (/(sold|2|booked)/.test(s)) badgeClass = 'sold';
      else if (/(cancel(ed)?|4)/.test(s)) badgeClass = 'cancelled';
      else if (/(avail|0|1|available)/.test(s)) badgeClass = 'available';
      else if (/(complete|3)/.test(s)) badgeClass = 'completed';
      $wrap.append(' ');
      $wrap.append($('<span class="select2-result-badge ' + badgeClass + '"></span>').text(String(item.status_label)));
    }
    return $wrap;
  }

  // Auto-focus search field when Select2 opens
  $(document).on('select2:open', function() {
    setTimeout(function() {
      var searchField = document.querySelector('.select2-container--open .select2-search__field');
      if (searchField) {
        searchField.focus();
      }
    }, 0);
  });

  // Dropdown actions functions
  window.transferPurchase = function(purchaseId) {
    $('#transfer_purchase_id').val(purchaseId);
    $('#transfer_error').addClass('d-none').text('');
    
    $.get(inventoryBase() + '&s=get_all_clients')
      .done(function(resp){
        var clients = resp;
        try { if (typeof resp === 'string') clients = JSON.parse(resp); } catch(e) {}
        
        var $select = $('#transfer_client_select');
        $select.empty().append('<option value="">Choose client to transfer to...</option>');
        
        if (Array.isArray(clients) && clients.length) {
          clients.forEach(function(c){
            $select.append('<option value="'+c.id+'">'+c.name+' ('+c.phone+')</option>');
          });
        }
        
        safeInitSelect2('#transfer_client_select', {
          placeholder: 'Search clients...',
          dropdownParent: $('#transferPurchaseModal')
        });
        
        $('#transferPurchaseModal').modal('show');
      })
      .fail(function(){
        alert('Failed to load clients');
      });
  };

  window.viewPurchaseHistory = function(purchaseId) {
    $('#history_purchase_id').val(purchaseId);
    $('#history_content').html(`
      <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading purchase history...</p>
      </div>
    `);
    
    $('#purchaseHistoryModal').modal('show');
    
    $.get(inventoryBase() + '&s=get_purchase_history&purchase_id=' + purchaseId)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200) {
          var html = '<div class="timeline">';
          if (data.history && data.history.length) {
            data.history.forEach(function(h){
              html += `
                <div class="card mb-2">
                  <div class="card-body">
                    <div class="d-flex align-items-center">
                      <div class="badge bg-${h.type === 'created' ? 'success' : (h.type === 'payment' ? 'info' : 'warning')} me-2">
                        <i class="lni lni-${h.type === 'created' ? 'checkmark' : (h.type === 'payment' ? 'dollar' : 'warning')}"></i>
                      </div>
                      <div>
                        <h6 class="mb-1">${h.title}</h6>
                        <p class="mb-1 text-muted">${h.description}</p>
                        <small class="text-muted">${h.date}</small>
                      </div>
                    </div>
                  </div>
                </div>
              `;
            });
          } else {
            html += '<p class="text-center text-muted py-4">No history found for this purchase.</p>';
          }
          html += '</div>';
          
          $('#history_content').html(html);
        } else {
          $('#history_content').html('<div class="alert alert-warning">Failed to load purchase history.</div>');
        }
      })
      .fail(function(){
        $('#history_content').html('<div class="alert alert-danger">Server error while loading history.</div>');
      });
  };

  window.generatePurchaseReport = function(purchaseId) {
    if (confirm('Generate detailed purchase report? This may take a few moments.')) {
      $.post(inventoryBase() + '&s=generate_purchase_report', {
        purchase_id: purchaseId,
        format: 'pdf'
      })
        .done(function(resp){
          var data = resp;
          try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
          
          if (data && data.status === 200 && data.download_url) {
            var link = document.createElement('a');
            link.href = data.download_url;
            link.download = data.filename || 'purchase_report.pdf';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          } else {
            alert((data && data.message) ? data.message : 'Failed to generate report');
          }
        })
        .fail(function(){
          alert('Server error while generating report');
        });
    }
  };

  window.exportPurchaseData = function(purchaseId) {
    var format = prompt('Export format (excel/pdf/csv):', 'excel');
    if (!format) return;
    
    if (!['excel', 'pdf', 'csv'].includes(format.toLowerCase())) {
      alert('Invalid format. Please choose excel, pdf, or csv.');
      return;
    }
    
    $.post(inventoryBase() + '&s=export_purchase_data', {
      purchase_id: purchaseId,
      format: format.toLowerCase()
    })
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200 && data.download_url) {
          var link = document.createElement('a');
          link.href = data.download_url;
          link.download = data.filename || 'purchase_data.' + format;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          alert((data && data.message) ? data.message : 'Failed to export data');
        }
      })
      .fail(function(){
        alert('Server error while exporting data');
      });
  };

  window.suspendPurchase = function(purchaseId) {
    $('#suspend_purchase_id').val(purchaseId);
    $('#suspend_error').addClass('d-none').text('');
    $('#suspendPurchaseModal').modal('show');
  };

  window.changePlot = function(purchaseId) {
    $('#change_plot_purchase_id').val(purchaseId);
    $('#change_plot_error').addClass('d-none').text('');
    
    // Load current purchase details
    $.get(inventoryBase() + '&s=get_purchase_details&purchase_id=' + purchaseId)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200) {
          $('#change_plot_project').val(data.project_name || '');
          
          // Load available plots for the same project
          $.get(inventoryBase() + '&s=get_available_plots&project_slug=' + (data.project_slug || ''))
            .done(function(plotResp){
              var plots = plotResp;
              try { if (typeof plotResp === 'string') plots = JSON.parse(plotResp); } catch(e) {}
              
              var $plotSelect = $('#change_plot_select');
              $plotSelect.empty().append('<option value="">Select available plot</option>');
              
              if (Array.isArray(plots) && plots.length) {
                plots.forEach(function(p){
                  var text = 'Block ' + (p.block || '') + ' • Plot ' + (p.plot || '') + ' • ' + (p.katha || '') + ' katha';
                  $plotSelect.append('<option value="'+p.id+'">'+text+'</option>');
                });
              }
              
              safeInitSelect2('#change_plot_select', {
                placeholder: 'Search available plots...',
                dropdownParent: $('#changePlotModal')
              });
              
              $('#changePlotModal').modal('show');
            })
            .fail(function(){
              $('#change_plot_error').removeClass('d-none').text('Failed to load available plots');
            });
        } else {
          $('#change_plot_error').removeClass('d-none').text('Failed to load purchase details');
        }
      })
      .fail(function(){
        $('#change_plot_error').removeClass('d-none').text('Server error');
      });
  };

  // Event handlers
  $('#suspend_duration').on('change', function(){
    if ($(this).val() === 'custom') {
      $('#custom_duration_field').removeClass('d-none');
    } else {
      $('#custom_duration_field').addClass('d-none');
    }
  });

  $('#transfer_purchase_save').on('click', function(){
    var purchaseId = $('#transfer_purchase_id').val();
    var targetClientId = $('#transfer_client_select').val();
    var transferDate = $('#transfer_date').val();
    var reason = $('#transfer_reason').val();
    
    if (!targetClientId) {
      $('#transfer_error').removeClass('d-none').text('Please select target client');
      return;
    }
    
    if (!reason.trim()) {
      $('#transfer_error').removeClass('d-none').text('Please enter transfer reason');
      return;
    }
    
    var payload = {
      s: 'transfer_purchase',
      purchase_id: purchaseId,
      target_client_id: targetClientId,
      transfer_date: transferDate,
      reason: reason
    };
    
    $.post(inventoryBase(), payload)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Purchase transferred successfully');
          $('#transferPurchaseModal').modal('hide');
          location.reload();
        } else {
          $('#transfer_error').removeClass('d-none').text((data && data.message) ? data.message : 'Failed to transfer purchase');
        }
      })
      .fail(function(){
        $('#transfer_error').removeClass('d-none').text('Server error');
      });
  });

  $('#suspend_purchase_save').on('click', function(){
    var purchaseId = $('#suspend_purchase_id').val();
    var suspendDate = $('#suspend_date').val();
    var duration = $('#suspend_duration').val();
    var reason = $('#suspend_reason').val();
    
    if (!reason.trim()) {
      $('#suspend_error').removeClass('d-none').text('Please enter suspension reason');
      return;
    }
    
    var days = duration;
    if (duration === 'custom') {
      days = $('#custom_duration_days').val();
      if (!days || days <= 0) {
        $('#suspend_error').removeClass('d-none').text('Please enter valid custom duration');
        return;
      }
    }
    
    var payload = {
      s: 'suspend_purchase',
      purchase_id: purchaseId,
      suspend_date: suspendDate,
      duration_days: days,
      reason: reason
    };
    
    $.post(inventoryBase(), payload)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Purchase suspended successfully');
          $('#suspendPurchaseModal').modal('hide');
          location.reload();
        } else {
          $('#suspend_error').removeClass('d-none').text((data && data.message) ? data.message : 'Failed to suspend purchase');
        }
      })
      .fail(function(){
        $('#suspend_error').removeClass('d-none').text('Server error');
      });
  });

  $('#change_plot_save').on('click', function(){
    var purchaseId = $('#change_plot_purchase_id').val();
    var newPlotId = $('#change_plot_select').val();
    
    if (!newPlotId) {
      $('#change_plot_error').removeClass('d-none').text('Please select a plot');
      return;
    }
    
    var payload = {
      s: 'change_plot',
      purchase_id: purchaseId,
      new_plot_id: newPlotId
    };
    
    $.post(inventoryBase(), payload)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        if (data && (data.status === 200 || data.status === '200')) {
          alert('Plot changed successfully');
          $('#changePlotModal').modal('hide');
          location.reload();
        } else {
          $('#change_plot_error').removeClass('d-none').text((data && data.message) ? data.message : 'Failed to change plot');
        }
      })
      .fail(function(){
        $('#change_plot_error').removeClass('d-none').text('Server error');
      });
  });

  // Cancel purchase functionality
  $(document).on('click', '.cancel-purchase', function(e){
    e.preventDefault();
    var id = $(this).data('id');
    if (!id) {
      alert('Purchase ID missing');
      return;
    }
    
    $('#cancel_purchase_id').val(id);
    $('#cancel_purchase_date').val(new Date().toISOString().slice(0,10));
    $('#cancelPurchaseError').hide().text('');
    $('#cancelPurchaseModal').modal('show');
  });

  $('#confirmCancelPurchaseBtn').on('click', function(){
    var $btn = $(this);
    var id = $('#cancel_purchase_id').val();
    var date = $('#cancel_purchase_date').val();
    
    if (!id) { 
      $('#cancelPurchaseError').show().text('Missing purchase ID.'); 
      return; 
    }
    if (!date) { 
      $('#cancelPurchaseError').show().text('Please choose a date.'); 
      return; 
    }

    $btn.prop('disabled', true).text('Cancelling...');

    $.post(inventoryBase() + '&s=cancel_purchase', {
      booking_helper_id: id,
      cancel_date: date
    })
      .done(function(res){
        $btn.prop('disabled', false).text('Confirm Cancellation');
        
        var data = res;
        try { if (typeof res === 'string') data = JSON.parse(res); } catch(e) {}
        
        if (data && data.status == 200) {
          $('#purchaseRow_' + id).fadeOut(300, function(){ $(this).remove(); });
          $('#cancelPurchaseModal').modal('hide');
          alert('Purchase cancelled successfully');
        } else {
          var msg = (data && data.message) ? data.message : 'Failed to cancel purchase';
          $('#cancelPurchaseError').show().text(msg);
        }
      })
      .fail(function(xhr){
        $btn.prop('disabled', false).text('Confirm Cancellation');
        
        var json = null;
        try { json = JSON.parse(xhr.responseText); } catch(e){}
        if (json && json.message) {
          $('#cancelPurchaseError').show().text(json.message);
        } else {
          $('#cancelPurchaseError').show().text('Request failed (network/server error)');
        }
      });
  });

  // Payment Schedule functionality
  $(document).on('click', '.update_installment', function(e){
    e.preventDefault();
    var purchaseId = $(this).data('id');
    if (!purchaseId) {
      alert('Purchase ID missing');
      return;
    }
    
    $('#ui_purchase_id').val(purchaseId);
    
    // Load purchase data
    $.get(inventoryBase() + '&s=get_purchase&purchase_id=' + purchaseId)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && !data.error) {
          // Populate modal with purchase data
          $('#ui_project_name').text(data.project_name || '');
          $('#ui_total_price').text(Number(data.total_price || 0).toLocaleString());
          $('#ui_booking_money').text(Number(data.booking_money || 0).toLocaleString());
          $('#ui_down_payment').text(Number(data.down_payment || 0).toLocaleString());
          
          var remaining = (data.total_price || 0) - (data.booking_money || 0) - (data.down_payment || 0);
          $('#ui_remaining').text(Number(remaining).toLocaleString());
          
          // Load existing schedule if any
          if (data.schedule && data.schedule.length) {
            populateScheduleTable(data.schedule);
            $('#ui_configuration_section').hide();
            $('#ui_change_schedule').show();
          } else {
            $('#ui_configuration_section').show();
            $('#ui_change_schedule').hide();
            $('#ui_start_date').val(data.default_start_date || new Date().toISOString().slice(0,10));
          }
          
          $('#updateInstallmentModal').modal('show');
        } else {
          alert('Failed to load purchase data: ' + (data.error || 'Unknown error'));
        }
      })
      .fail(function(){
        alert('Server error while loading purchase data');
      });
  });

  function populateScheduleTable(schedule) {
    var tbody = $('#ui_schedule_table tbody');
    tbody.empty();
    
    var total = 0;
    schedule.forEach(function(item, index) {
      var amount = Number(item.amount || 0);
      total += amount;
      
      var row = `
        <tr>
          <td>${index + 1}</td>
          <td><input type="date" class="form-control form-control-sm" value="${item.date}" data-field="date"></td>
          <td><input type="number" class="form-control form-control-sm" value="${amount}" data-field="amount" min="0"></td>
          <td><input type="number" class="form-control form-control-sm" value="${item.adjustment || 0}" data-field="adjustment"></td>
          <td>
            <select class="form-select form-select-sm" data-field="status">
              <option value="unpaid" ${(item.status === 'unpaid' || !item.status) ? 'selected' : ''}>Unpaid</option>
              <option value="paid" ${item.status === 'paid' ? 'selected' : ''}>Paid</option>
            </select>
          </td>
          <td><button type="button" class="btn btn-sm btn-outline-danger remove-schedule-row">&times;</button></td>
        </tr>
      `;
      tbody.append(row);
    });
    
    $('#ui_total_amount').text(total.toLocaleString());
    updateScheduleTotals();
  }

  function updateScheduleTotals() {
    var total = 0;
    $('#ui_schedule_table tbody tr').each(function() {
      var amount = Number($(this).find('[data-field="amount"]').val() || 0);
      total += amount;
    });
    $('#ui_total_amount').text(total.toLocaleString());
    $('#ui_schedule_total').text(total.toLocaleString());
  }

  // Schedule management
  $('#ui_generate_schedule').on('click', function(){
    var mode = $('#ui_mode').val();
    var installments = Number($('#ui_installments').val()) || 12;
    var startDate = $('#ui_start_date').val();
    var startOption = $('#ui_start_option').val();
    var monthlyAmount = Number($('#ui_monthly_amount').val()) || 0;
    var yearlyAdjustment = Number($('#ui_yearly_adjustment').val()) || 0;
    var adjustmentType = $('#ui_adjustment_type').val();
    
    var remaining = Number($('#ui_remaining').text().replace(/,/g, '')) || 0;
    
    if (mode === '1') {
      // Full payment
      var tbody = $('#ui_schedule_table tbody');
      tbody.empty();
      tbody.append(`
        <tr>
          <td>1</td>
          <td><input type="date" class="form-control form-control-sm" value="${startDate}" data-field="date"></td>
          <td><input type="number" class="form-control form-control-sm" value="${remaining}" data-field="amount" min="0"></td>
          <td><input type="number" class="form-control form-control-sm" value="0" data-field="adjustment"></td>
          <td>
            <select class="form-select form-select-sm" data-field="status">
              <option value="unpaid" selected>Unpaid</option>
              <option value="paid">Paid</option>
            </select>
          </td>
          <td><button type="button" class="btn btn-sm btn-outline-danger remove-schedule-row">&times;</button></td>
        </tr>
      `);
    } else {
      // Installment payment
      generateInstallmentSchedule(remaining, installments, startDate, startOption, monthlyAmount, yearlyAdjustment, adjustmentType);
    }
    
    updateScheduleTotals();
  });

  function generateInstallmentSchedule(totalAmount, installments, startDate, startOption, monthlyAmount, yearlyAdjustment, adjustmentType) {
    var tbody = $('#ui_schedule_table tbody');
    tbody.empty();
    
    var currentDate = new Date(startDate);
    var remainingAmount = totalAmount;
    
    // Calculate monthly amount if not provided
    if (!monthlyAmount) {
      monthlyAmount = Math.floor((totalAmount - (yearlyAdjustment * Math.floor(installments / 12))) / installments);
    }
    
    for (var i = 0; i < installments; i++) {
      var scheduleDate = new Date(currentDate);
      
      // Adjust date based on start option
      if (startOption === 'start') {
        scheduleDate.setDate(1);
      } else if (startOption === 'middle') {
        scheduleDate.setDate(15);
      } else if (startOption === 'end') {
        var lastDay = new Date(scheduleDate.getFullYear(), scheduleDate.getMonth() + 1, 0).getDate();
        scheduleDate.setDate(lastDay);
      }
      
      var amount = monthlyAmount;
      var adjustment = 0;
      
      // Apply yearly adjustment
      if (yearlyAdjustment > 0 && (i + 1) % 12 === 0) {
        if (adjustmentType === 'year_start' && i === 11) {
          adjustment = yearlyAdjustment;
        } else if (adjustmentType === 'year_middle' && i === 5) {
          adjustment = yearlyAdjustment;
        } else if (adjustmentType === 'year_end' && (i + 1) % 12 === 0) {
          adjustment = yearlyAdjustment;
        }
      }
      
      // Last installment gets remaining amount
      if (i === installments - 1) {
        amount = remainingAmount;
      } else {
        remainingAmount -= amount;
      }
      
      var row = `
        <tr>
          <td>${i + 1}</td>
          <td><input type="date" class="form-control form-control-sm" value="${scheduleDate.toISOString().slice(0,10)}" data-field="date"></td>
          <td><input type="number" class="form-control form-control-sm" value="${amount}" data-field="amount" min="0"></td>
          <td><input type="number" class="form-control form-control-sm" value="${adjustment}" data-field="adjustment"></td>
          <td>
            <select class="form-select form-select-sm" data-field="status">
              <option value="unpaid" selected>Unpaid</option>
              <option value="paid">Paid</option>
            </select>
          </td>
          <td><button type="button" class="btn btn-sm btn-outline-danger remove-schedule-row">&times;</button></td>
        </tr>
      `;
      tbody.append(row);
      
      // Move to next month
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
  }

  // Schedule table events
  $(document).on('click', '.remove-schedule-row', function(){
    $(this).closest('tr').remove();
    updateScheduleTotals();
  });

  $(document).on('input', '[data-field="amount"]', updateScheduleTotals);

  $('#ui_save_schedule').on('click', function(){
    var purchaseId = $('#ui_purchase_id').val();
    var schedule = [];
    
    $('#ui_schedule_table tbody tr').each(function(){
      var $row = $(this);
      schedule.push({
        date: $row.find('[data-field="date"]').val(),
        amount: Number($row.find('[data-field="amount"]').val()) || 0,
        adjustment: Number($row.find('[data-field="adjustment"]').val()) || 0,
        status: $row.find('[data-field="status"]').val()
      });
    });
    
    if (!schedule.length) {
      alert('Please generate a schedule first');
      return;
    }
    
    $.post(inventoryBase() + '&s=update_installment', {
      purchase_id: purchaseId,
      schedule: JSON.stringify(schedule)
    })
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200) {
          alert('Payment schedule saved successfully');
          $('#updateInstallmentModal').modal('hide');
        } else {
          alert((data && data.message) ? data.message : 'Failed to save schedule');
        }
      })
      .fail(function(){
        alert('Server error while saving schedule');
      });
  });

  // Print schedule functionality
  $(document).on('click', '.print_payment_schedule', function(e){
    e.preventDefault();
    var purchaseId = $(this).data('id');
    if (!purchaseId) {
      alert('Purchase ID missing');
      return;
    }
    
    // Load purchase data for printing
    $.get(inventoryBase() + '&s=get_purchase&purchase_id=' + purchaseId)
      .done(function(resp){
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && !data.error) {
          // Populate print template
          $('#print_company_name').text('<?= htmlspecialchars($wo['config']['siteTitle'] ?? 'Company Name') ?>');
          $('#print_client_name').text('<?= htmlspecialchars($wo['client']['name']) ?>');
          $('#print_client_phone').text('<?= htmlspecialchars($wo['client']['phone']) ?>');
          $('#print_client_address').text('<?= htmlspecialchars($wo['client']['address']) ?>');
          $('#print_project_name').text(data.project_name || '');
          $('#print_file_number').text(data.file_number || '');
          $('#print_total_price').text(Number(data.total_price || 0).toLocaleString());
          $('#print_booking_money').text(Number(data.booking_money || 0).toLocaleString());
          $('#print_down_payment').text(Number(data.down_payment || 0).toLocaleString());
          
          var remaining = (data.total_price || 0) - (data.booking_money || 0) - (data.down_payment || 0);
          $('#print_remaining').text(Number(remaining).toLocaleString());
          $('#print_date').text(new Date().toLocaleDateString());
          
          // Populate schedule rows
          var scheduleRows = '';
          var scheduleTotal = 0;
          if (data.schedule && data.schedule.length) {
            data.schedule.forEach(function(item, index) {
              var amount = Number(item.amount || 0);
              scheduleTotal += amount;
              scheduleRows += `
                <tr>
                  <td>${index + 1}</td>
                  <td>${item.date}</td>
                  <td>৳${amount.toLocaleString()}</td>
                  <td>${item.status === 'paid' ? 'Paid' : 'Unpaid'}</td>
                  <td>${item.notes || ''}</td>
                </tr>
              `;
            });
          }
          $('#print_schedule_rows').html(scheduleRows);
          $('#print_schedule_total').text(scheduleTotal.toLocaleString());
          
          // Print
          var printContent = $('#printScheduleContent').html();
          var printWindow = window.open('', '_blank');
          printWindow.document.write(`
            <html>
            <head>
              <title>Payment Schedule</title>
              <style>
                body { margin: 20px; font-family: Arial, sans-serif; }
                .print-header { text-align: center; margin-bottom: 30px; }
                .company-name { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
                .document-title { font-size: 18px; color: #666; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .client-info, .purchase-info { margin-bottom: 20px; }
                .signature-area { margin-top: 50px; text-align: center; }
                @media print {
                  body { margin: 0; }
                  .signature-area { page-break-inside: avoid; }
                }
              </style>
            </head>
            <body>
              ${printContent}
            </body>
            </html>
          `);
          
          printWindow.document.close();
          setTimeout(function() {
            printWindow.print();
            setTimeout(function() {
              printWindow.close();
            }, 500);
          }, 250);
        } else {
          alert('Failed to load purchase data for printing');
        }
      })
      .fail(function(){
        alert('Server error while loading purchase data');
      });
  });

  // Change plot functionality
  $(document).on('click', '.change_plot_btn', function(e){
    e.preventDefault();
    var purchaseId = $(this).data('id');
    if (!purchaseId) {
      alert('Purchase ID missing');
      return;
    }
    changePlot(purchaseId);
  });

  // Add Purchase Form Management
  $('#addPurchaseBtn').on('click', function(){
    if (isFormVisible) return;
    
    isFormVisible = true;
    $('#addPurchaseForm').slideDown();
    $(this).hide();
    
    // Initialize selects
    setTimeout(function() {
      safeInitSelect2('#projectSelect', {
        placeholder: 'Select Project',
        dropdownParent: $('#viewClient-modal')
      });
      
      safeInitSelect2('#nomineeSelect', {
        placeholder: 'Select nominee(s)',
        dropdownParent: $('#viewClient-modal')
      });
    }, 100);
    
    $('#purchaseDetails').hide();
  });

  $('#cancelPurchaseBtn').on('click', function(){
    isFormVisible = false;
    $('#addPurchaseForm').slideUp();
    $('#addPurchaseBtn').show();
    $('#purchaseDetails').hide();
    
    // Clear form
    destroyAllSelect2();
    $('#projectSelect, #purchaseSelect, #nomineeSelect').val('').trigger('change');
    $('#file_num, #perKathaPrice, #downPayment, #bookingMoney').val('');
    $('#totalPrice, #duePrice').val('');
  });

  // Project change handler
  $(document).on('change', '#projectSelect', function(){
    var projectId = $(this).val();
    $('#purchaseDetails').hide();
    
    if (!projectId) {
      safeInitSelect2('#purchaseSelect', {
        placeholder: 'Select Plot',
        dropdownParent: $('#viewClient-modal'),
        templateResult: select2TemplateResult,
        templateSelection: select2TemplateSelection
      });
      return;
    }
    
    // Initialize AJAX-powered Select2 for plots
    safeInitSelect2('#purchaseSelect', {
      placeholder: 'Search plots...',
      dropdownParent: $('#viewClient-modal'),
      minimumInputLength: 1,
      templateResult: select2TemplateResult,
      templateSelection: select2TemplateSelection,
      ajax: {
        url: inventoryBase() + '&s=search_purchases',
        dataType: 'json',
        delay: 250,
        data: function (params) {
          return {
            q: params.term || '',
            page: params.page || 1,
            per_page: 30,
            project_id: projectId
          };
        },
        processResults: function (data, params) {
          params.page = params.page || 1;
          var results = [];
          if (data && Array.isArray(data.results)) {
            results = data.results.map(function(item) {
              var normalized = normalizePlotItem(item);
              return {
                id: normalized.id,
                text: normalized.text,
                data: normalized
              };
            });
          }
          return {
            results: results,
            pagination: { more: data.more || false }
          };
        }
      }
    });
  });

  // Plot selection handler
  $(document).on('select2:select', '#purchaseSelect', function(e){
    var data = e.params.data;
    if (data && data.data) {
      populateDetails(data.data);
    }
  });

  function populateDetails(plotData) {
    $('#purchaseDetails').show();
    $('#detailBlock').val(plotData.block || '');
    $('#detailPlot').val(plotData.plot || '');
    $('#detailRoad').val(plotData.road || '');
    $('#detailStatus').val(plotData.status_label || '');
    $('#detailFacing').val(plotData.facing || '');
    
    calculateTotals();
  }

  function calculateTotals() {
    var perKatha = parseFloat($('#perKathaPrice').val()) || 0;
    var bookingMoney = parseFloat($('#bookingMoney').val()) || 0;
    var downPayment = parseFloat($('#downPayment').val()) || 0;
    
    var data = $('#purchaseSelect').select2('data');
    var katha = 0;
    if (data && data.length && data[0].data) {
      katha = parseFloat(data[0].data.katha) || 0;
    }
    
    var total = perKatha * katha;
    var due = Math.max(0, total - (bookingMoney + downPayment));
    
    $('#totalPrice').val(formatCurrency(total));
    $('#duePrice').val(formatCurrency(due));
  }

  // Input handlers for calculations
  $(document).on('input', '#perKathaPrice, #bookingMoney, #downPayment', calculateTotals);

  // Save purchase handler
  $('#savePurchaseBtn').on('click', function(){
    var projectId = $('#projectSelect').val();
    var purchaseId = $('#purchaseSelect').val();
    var fileNum = $('#file_num').val().trim();
    var perKatha = parseFloat($('#perKathaPrice').val()) || 0;
    var bookingMoney = parseFloat($('#bookingMoney').val()) || 0;
    var downPayment = parseFloat($('#downPayment').val()) || 0;
    var purchaseDate = $('#purchaseDate').val();
    var nomineeIds = $('#nomineeSelect').val() || [];
    
    // Validation
    var errors = [];
    if (!projectId) errors.push('Please select a project');
    if (!purchaseId) errors.push('Please select a plot');
    if (!fileNum) errors.push('File Number is required');
    if (perKatha <= 0) errors.push('Price per Katha must be greater than 0');
    if (downPayment < 0) errors.push('Down Payment cannot be negative');
    if (bookingMoney < 0) errors.push('Booking Money cannot be negative');
    
    if (errors.length) {
      alert(errors.join('\n'));
      return;
    }
    
    var $btn = $(this);
    $btn.prop('disabled', true).text('Saving...');
    
    var payload = {
      s: 'register_purchase',
      client_id: <?= (int)$wo['client']['id'] ?>,
      project_id: projectId,
      purchase_id: purchaseId,
      file_num: fileNum,
      per_katha: perKatha,
      booking_money: bookingMoney,
      down_payment: downPayment,
      purchase_date: purchaseDate,
      nominee_ids: nomineeIds
    };
    
    $.post(inventoryBase(), payload)
      .done(function(resp){
        $btn.prop('disabled', false).text('Save');
        
        var data = resp;
        try { if (typeof resp === 'string') data = JSON.parse(resp); } catch(e) {}
        
        if (data && data.status === 200) {
          if (data.html) {
            $('#purchaseTable tbody').append(data.html);
          }
          
          // Reset form
          isFormVisible = false;
          $('#addPurchaseForm').slideUp();
          $('#addPurchaseBtn').show();
          $('#purchaseDetails').hide();
          
          destroyAllSelect2();
          $('#projectSelect, #purchaseSelect, #nomineeSelect').val('');
          $('#file_num, #perKathaPrice, #downPayment, #bookingMoney').val('');
          $('#totalPrice, #duePrice').val('');
          
          alert('Purchase added successfully');
          
        } else if (data && data.status === 409) {
          // Conflict - show confirmation
          if (confirm(data.message + '\n\nDo you want to force assign this plot?')) {
            payload.force = 1;
            $.post(inventoryBase(), payload)
              .done(function(resp2){
                var data2 = resp2;
                try { if (typeof resp2 === 'string') data2 = JSON.parse(resp2); } catch(e) {}
                if (data2 && data2.status === 200) {
                  if (data2.html) {
                    $('#purchaseTable tbody').append(data2.html);
                  }
                  alert('Purchase added successfully (forced)');
                  location.reload();
                } else {
                  alert('Failed to force assign: ' + (data2.message || 'Unknown error'));
                }
              });
          }
        } else {
          alert(data.message || 'Failed to add purchase');
        }
      })
      .fail(function(){
        $btn.prop('disabled', false).text('Save');
        alert('Server error occurred');
      });
  });

  // Print functionality
  $(document).on('click', '.print-booking-form', function(e){
    e.preventDefault();
    var id = $(this).data('id');
    if (!id) {
      alert('Purchase ID missing');
      return;
    }
    printBookingForm(id);
  });

  $('#printButton').on('click', function(){
    var ids = [];
    $('.print_area').each(function(){
      var id = $(this).attr('data-purchase-id');
      if (id) ids.push(id);
    });
    if (!ids.length) {
      alert('No booking forms available to print.');
      return;
    }
    printBookingForms(ids);
  });

  function printBookingForm(id) {
    printBookingForms([id]);
  }

  function printBookingForms(ids) {
    var printContent = '';
    ids.forEach(function(id) {
      var $printArea = $('#print_area_' + id);
      if ($printArea.length) {
        printContent += $printArea.html();
      }
    });
    
    if (!printContent) {
      alert('No content to print');
      return;
    }
    
    var printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
      <head>
        <title>Booking Forms</title>
        <style>
          body { margin: 20px; font-family: Arial, sans-serif; }
          .invoice-layout { page-break-after: always; }
          .changable-content { position: relative; min-height: 500px; }
          @media print {
            body { margin: 0; }
            .invoice-layout { page-break-after: always; }
          }
        </style>
      </head>
      <body>
        ${printContent}
      </body>
      </html>
    `);
    
    printWindow.document.close();
    setTimeout(function() {
      printWindow.print();
      setTimeout(function() {
        printWindow.close();
      }, 500);
    }, 250);
  }

  // Modal event handlers
  $('#viewClient-modal').on('hidden.bs.modal', function(){
    destroyAllSelect2();
    isFormVisible = false;
  });

  // Fix dropdown positioning
  $(document).on('show.bs.dropdown', '.dropdown-actions', function () {
    var $dropdown = $(this);
    var $menu = $dropdown.find('.dropdown-menu');
    var $button = $dropdown.find('.dropdown-toggle');
    
    setTimeout(function() {
      var buttonOffset = $button.offset();
      var buttonHeight = $button.outerHeight();
      var menuWidth = $menu.outerWidth();
      var menuHeight = $menu.outerHeight();
      var windowWidth = $(window).width();
      var windowHeight = $(window).height();
      
      var left = buttonOffset.left - menuWidth + $button.outerWidth();
      var top = buttonOffset.top + buttonHeight + 5;
      
      // Adjust if menu goes off screen
      if (left < 0) left = buttonOffset.left;
      if (left + menuWidth > windowWidth) left = windowWidth - menuWidth - 10;
      if (top + menuHeight > windowHeight) top = buttonOffset.top - menuHeight - 5;
      
      $menu.css({
        position: 'fixed',
        left: left + 'px',
        top: top + 'px',
        right: 'auto',
        bottom: 'auto'
      });
    }, 10);
  });

  // Initialize tooltips
  if (typeof bootstrap !== 'undefined') {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  }

});
</script>