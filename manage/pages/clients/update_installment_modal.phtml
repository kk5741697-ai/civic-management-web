<!-- Update Installment Modal - Complete Payment Schedule Management -->
<div class="modal fade" id="updateInstallmentModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg">
      <div class="modal-header bg-gradient-success text-white border-0">
        <h5 class="modal-title mb-0">
          <i class="lni lni-dollar me-2"></i>Payment Schedule — <span id="ui_project_name"></span>
        </h5>
        <div class="d-flex gap-2">
          <button type="button" class="btn btn-outline-light btn-sm" id="print_schedule_btn" title="Print Schedule">
            <i class="lni lni-printer"></i>
          </button>
          <button type="button" class="btn btn-outline-light btn-sm" id="download_schedule_btn" title="Download PDF">
            <i class="lni lni-download"></i>
          </button>
          <button type="button" class="btn btn-outline-light btn-sm" id="save_schedule_xlsx" title="Save XLSX">
            <i class="lni lni-save"></i>
          </button>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
      </div>

      <div class="modal-body p-4">
        <input type="hidden" id="ui_purchase_id" value="">

        <!-- Summary Section -->
        <div class="row g-3 mb-4">
          <div class="col-md-2">
            <div class="card bg-primary text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Total Price</small>
                <div class="h6 mb-0">৳<span id="ui_total_price">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-info text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Booking Money</small>
                <div class="h6 mb-0">৳<span id="ui_booking_money">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-warning text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Down Payment</small>
                <div class="h6 mb-0">৳<span id="ui_down_payment">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-secondary text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Remaining</small>
                <div class="h6 mb-0">৳<span id="ui_remaining">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-dark text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Schedule Total</small>
                <div class="h6 mb-0">৳<span id="ui_schedule_total">0</span></div>
              </div>
            </div>
          </div>
          <div class="col-md-2">
            <div class="card bg-success text-white h-100">
              <div class="card-body p-3 text-center">
                <small class="opacity-75">Paid Amount</small>
                <div class="h6 mb-0">৳<span id="ui_paid_amount">0</span></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Schedule Status Toggle -->
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="d-flex align-items-center gap-3">
              <label class="form-label mb-0 fw-medium">Schedule Status:</label>
              <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="schedule_status" id="schedule_all" value="all" checked>
                <label class="btn btn-outline-secondary btn-sm" for="schedule_all">
                  <i class="lni lni-list me-1"></i>All
                </label>
                <input type="radio" class="btn-check" name="schedule_status" id="schedule_unpaid" value="unpaid">
                <label class="btn btn-outline-warning btn-sm" for="schedule_unpaid">
                  <i class="lni lni-time me-1"></i>Unpaid
                </label>
                <input type="radio" class="btn-check" name="schedule_status" id="schedule_paid" value="paid">
                <label class="btn btn-outline-success btn-sm" for="schedule_paid">
                  <i class="lni lni-checkmark me-1"></i>Paid
                </label>
              </div>
            </div>
          </div>
          <div class="col-md-6 text-end">
            <button class="btn btn-outline-secondary btn-sm" id="ui_change_schedule" style="display:none;">
              <i class="lni lni-edit me-1"></i>Change Schedule
            </button>
          </div>
        </div>

        <!-- Payment Configuration Section -->
        <div id="ui_configuration_section" class="card border-0 shadow-sm mb-4">
          <div class="card-header bg-light border-0">
            <h6 class="mb-0 fw-semibold">Payment Configuration</h6>
          </div>
          <div class="card-body">
            <div class="row g-3">
              <div class="col-md-3">
                <label class="form-label fw-medium">Mode of Payment</label>
                <select id="ui_mode" class="form-control">
                  <option value="1">Full Payment</option>
                  <option value="2" selected>Installment</option>
                </select>
              </div>

              <!-- installment-specific controls -->
              <div id="ui_installment_controls" class="col-md-9">
                <div class="row g-3">
                  <div class="col-md-2">
                    <label class="form-label fw-medium">Installments</label>
                    <input type="number" id="ui_installments" class="form-control" min="1" value="12" step="1">
                  </div>

                  <div class="col-md-3">
                    <label class="form-label fw-medium">Adjustment Type</label>
                    <select id="ui_adjustment_type" class="form-control">
                      <option value="monthly">Monthly (even split)</option>
                      <option value="year_start">Year — Start</option>
                      <option value="year_middle">Year — Middle</option>
                      <option value="year_end" selected>Year — End</option>
                      <option value="custom">Custom (no yearly auto)</option>
                    </select>
                  </div>

                  <div class="col-md-3">
                    <label class="form-label fw-medium">Monthly Amount <small class="text-muted">(optional)</small></label>
                    <input type="number" id="ui_monthly_amount" class="form-control" placeholder="Auto-calc if empty" step="0.01">
                    <small class="text-muted">If empty, auto-calculated based on remaining amount after yearly adjustments.</small>
                  </div>

                  <div class="col-md-4">
                    <label class="form-label fw-medium">Yearly Adjustment <small class="text-muted">(optional)</small></label>
                    <input type="number" id="ui_yearly_adjustment" class="form-control" placeholder="e.g. 100000" step="0.01">
                    <small class="text-muted">Fixed amount added once per year (not added to monthly).</small>
                  </div>
                </div>
              </div>

              <div class="col-md-12">
                <div class="row g-2">
                  <div class="col-md-4">
                    <label class="form-label fw-medium">Start Date</label>
                    <input type="date" id="ui_start_date" class="form-control">
                  </div>
                  <div class="col-md-4">
                    <label class="form-label fw-medium">Start Option</label>
                    <select id="ui_start_option" class="form-control">
                      <option value="start">Start of month (1st)</option>
                      <option value="middle">Middle (15th)</option>
                      <option value="end">End of month (last day)</option>
                      <option value="exact">Exact (keep chosen day)</option>
                    </select>
                  </div>
                  <div class="col-md-4 d-flex align-items-end">
                    <div class="btn-group w-100" role="group">
                      <button class="btn btn-primary" id="ui_generate_schedule">
                        <i class="lni lni-plus me-1"></i>Generate Schedule
                      </button>
                      <button class="btn btn-outline-secondary" id="ui_reset_schedule">
                        <i class="lni lni-refresh me-1"></i>Reset
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Payment Schedule Table -->
        <div class="card border-0 shadow-sm">
          <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
            <h6 class="mb-0 fw-semibold">Payment Schedule</h6>
            <div class="btn-group btn-group-sm" role="group">
              <button type="button" class="btn btn-outline-success" id="ui_mark_all_paid">
                <i class="lni lni-checkmark me-1"></i>Mark All Paid
              </button>
              <button type="button" class="btn btn-outline-warning" id="ui_mark_all_unpaid">
                <i class="lni lni-time me-1"></i>Mark All Unpaid
              </button>
            </div>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive" style="max-height:420px;overflow:auto;">
              <table class="table table-hover mb-0" id="ui_schedule_table">
                <thead class="table-light sticky-top">
                  <tr>
                    <th style="width:45px">#</th>
                    <th style="width:160px">Date</th>
                    <th>Amount (৳)</th>
                    <th style="width:140px">Adjustment <small>(manual)</small></th>
                    <th style="width:120px">Payment Status</th>
                    <th style="width:90px">Action</th>
                  </tr>
                </thead>
                <tbody></tbody>
                <tfoot class="table-light">
                  <tr class="fw-semibold">
                    <td colspan="1">Total</td>
                    <td id="ui_total_date">-</td>
                    <td>৳<span id="ui_total_amount">0</span></td>
                    <td colspan="3"></td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
        </div>
      </div>

      <div class="modal-footer border-0 bg-light d-flex justify-content-between">
        <div class="text-muted small">
          <strong>Note:</strong> All amounts are in Bangladeshi Taka (৳)
        </div>
        <div class="btn-group" role="group">
          <button id="ui_save_schedule" class="btn btn-success">
            <i class="lni lni-save me-1"></i>Save Schedule
          </button>
          <button id="ui_close" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="lni lni-close me-1"></i>Close
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Hidden Print Template -->
<div id="printScheduleContent" class="d-none">
  <div class="schedule-print-template">
    <div class="print-header text-center mb-4">
      <h2 class="company-name mb-2" id="print_company_name">Civic Real Estate Ltd.</h2>
      <h4 class="document-title">Payment Schedule</h4>
      <hr>
    </div>
    
    <div class="client-info row mb-4">
      <div class="col-6">
        <h5>Client Information</h5>
        <table class="table table-borderless table-sm">
          <tr><td class="fw-bold">Name:</td><td id="print_client_name">-</td></tr>
          <tr><td class="fw-bold">Phone:</td><td id="print_client_phone">-</td></tr>
          <tr><td class="fw-bold">Address:</td><td id="print_client_address">-</td></tr>
        </table>
      </div>
      <div class="col-6">
        <h5>Project Information</h5>
        <table class="table table-borderless table-sm">
          <tr><td class="fw-bold">Project:</td><td id="print_project_name">-</td></tr>
          <tr><td class="fw-bold">Plot:</td><td id="print_plot_info">-</td></tr>
          <tr><td class="fw-bold">File Number:</td><td id="print_file_number">-</td></tr>
        </table>
      </div>
    </div>

    <div class="purchase-info mb-4">
      <h5>Purchase Details</h5>
      <div class="row">
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Total Price</small>
              <div class="fw-bold">৳<span id="print_total_price">0</span></div>
            </div>
          </div>
        </div>
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Booking Money</small>
              <div class="fw-bold">৳<span id="print_booking_money">0</span></div>
            </div>
          </div>
        </div>
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Down Payment</small>
              <div class="fw-bold">৳<span id="print_down_payment">0</span></div>
            </div>
          </div>
        </div>
        <div class="col-3">
          <div class="card text-center">
            <div class="card-body p-2">
              <small>Remaining</small>
              <div class="fw-bold">৳<span id="print_remaining">0</span></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="schedule-table">
      <h5>Payment Schedule</h5>
      <table class="table table-bordered table-sm">
        <thead class="table-light">
          <tr>
            <th width="5%">#</th>
            <th width="15%">Due Date</th>
            <th width="15%">Amount (৳)</th>
            <th width="10%">Status</th>
            <th width="55%">Notes</th>
          </tr>
        </thead>
        <tbody id="print_schedule_rows">
        </tbody>
        <tfoot class="table-light">
          <tr class="fw-bold">
            <td colspan="2">Total</td>
            <td>৳<span id="print_schedule_total">0</span></td>
            <td colspan="2"></td>
          </tr>
        </tfoot>
      </table>
    </div>

    <div class="print-footer mt-4">
      <div class="row">
        <div class="col-4">
          <p><strong>Generated on:</strong> <span id="print_date"></span></p>
          <p><strong>Generated by:</strong> <?= htmlspecialchars($wo['user']['name'] ?? 'System') ?></p>
        </div>
        <div class="col-8">
          <div class="signature-area d-flex justify-content-between">
            <div class="text-center">
              <p class="mb-4">_________________________</p>
              <p>Authorized Officer</p>
            </div>
            <div class="text-center">
              <p class="mb-4">_________________________</p>
              <p>Chairman Signature</p>
            </div>
            <div class="text-center">
              <p class="mb-4">_________________________</p>
              <p>MD Signature</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.schedule-print-template {
  background: white;
  padding: 30px;
  font-family: Arial, sans-serif;
  color: #000;
}

.schedule-print-template .company-name {
  color: #2c3e50;
  font-weight: bold;
}

.schedule-print-template .document-title {
  color: #34495e;
  margin-bottom: 10px;
}

.schedule-print-template .card {
  border: 1px solid #dee2e6;
  margin-bottom: 5px;
}

.schedule-print-template .signature-area {
  margin-top: 40px;
}

.schedule-print-template table {
  width: 100%;
  border-collapse: collapse;
}

.schedule-print-template th,
.schedule-print-template td {
  border: 1px solid #dee2e6;
  padding: 8px;
  text-align: left;
}

.schedule-print-template .table-light {
  background-color: #f8f9fa;
}

@media print {
  .schedule-print-template {
    padding: 20px;
  }
  
  .schedule-print-template .card {
    border: 1px solid #000;
    box-shadow: none;
  }
  
  .schedule-print-template .signature-area p {
    margin-bottom: 60px;
  }
}
</style>

<script>
jQuery(function($){
  'use strict';

  // Core utilities
  function moneyVal(v){
    if (v === undefined || v === null) return 0;
    var s = String(v).replace(/,/g,'').trim();
    if (s === '') return 0;
    var n = Number(s);
    return isNaN(n) ? 0 : n;
  }

  function fmtMoney(v){
    if (v === undefined || v === null) v = 0;
    return Number(Math.round(v * 100) / 100).toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    });
  }

  // Global variables
  var currentPurchaseData = null;
  var currentSchedule = [];
  var originalScheduleConfig = null;

  // Initialize update installment functionality
  function initUpdateInstallment() {
    // Global function to open payment schedule modal
    window.openPaymentSchedule = function(purchaseId) {
      $('#ui_purchase_id').val(purchaseId);
      loadPurchaseData(purchaseId);
      $('#updateInstallmentModal').modal('show');
    };

    // Make update_installment available for dropdown menu
    $(document).off('click.updateInstallment', '.update_installment').on('click.updateInstallment', '.update_installment', function(e){
      e.preventDefault();
      var purchaseId = $(this).data('id');
      if (purchaseId) {
        openPaymentSchedule(purchaseId);
      }
    });

    // Mode change handler
    $('#ui_mode').off('change').on('change', function(){
      var mode = $(this).val();
      if (mode === '2') {
        $('#ui_installment_controls').removeClass('d-none');
        $('#ui_configuration_section').show();
      } else {
        $('#ui_installment_controls').addClass('d-none');
        if (currentPurchaseData) {
          generateFullPaymentSchedule();
        }
      }
    });

    // Generate schedule handler
    $('#ui_generate_schedule').off('click').on('click', function(){
      generateSchedule();
    });

    // Reset schedule handler
    $('#ui_reset_schedule').off('click').on('click', function(){
      if (confirm('Are you sure you want to reset the schedule?')) {
        currentSchedule = [];
        renderScheduleTable();
        updateTotals();
      }
    });

    // Mark all paid/unpaid handlers
    $('#ui_mark_all_paid').off('click').on('click', function(){
      if (confirm('Mark all installments as paid?')) {
        currentSchedule.forEach(function(item, index){
          item.paid = true;
        });
        renderScheduleTable();
        updateTotals();
      }
    });

    $('#ui_mark_all_unpaid').off('click').on('click', function(){
      if (confirm('Mark all installments as unpaid?')) {
        currentSchedule.forEach(function(item, index){
          item.paid = false;
        });
        renderScheduleTable();
        updateTotals();
      }
    });

    // Save schedule handler
    $('#ui_save_schedule').off('click').on('click', function(){
      saveSchedule();
    });

    // Print schedule handler
    $('#print_schedule_btn').off('click').on('click', function(){
      printSchedule();
    });

    // Download schedule handler
    $('#download_schedule_btn').off('click').on('click', function(){
      downloadSchedule();
    });

    // Save XLSX handler
    $('#save_schedule_xlsx').off('click').on('click', function(){
      saveScheduleXLSX();
    });

    // Schedule status filter
    $('input[name="schedule_status"]').off('change').on('change', function(){
      renderScheduleTable();
    });

    // Change schedule toggle
    $('#ui_change_schedule').off('click').on('click', function(){
      var isVisible = $('#ui_configuration_section').is(':visible');
      if (isVisible) {
        $('#ui_configuration_section').slideUp();
        $(this).html('<i class="lni lni-edit me-1"></i>Change Schedule');
      } else {
        $('#ui_configuration_section').slideDown();
        $(this).html('<i class="lni lni-eye-close me-1"></i>Hide Configuration');
      }
    });
  }

  function loadPurchaseData(purchaseId) {
    $('#ui_project_name').text('Loading...');
    
    $.get(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=get_purchase_details&purchase_id=' + purchaseId)
      .done(function(response){
        var data = typeof response === 'string' ? JSON.parse(response) : response;

        if (data && data.status == 200) {
          currentPurchaseData = data;
          populatePurchaseData(data);
          
          // Load existing schedule if available
          if (data.schedule && data.schedule.length > 0) {
            currentSchedule = data.schedule;
            
            // Load configuration from existing schedule
            loadConfigurationFromSchedule(data.schedule);
            
            renderScheduleTable();
            updateTotals();
            $('#ui_change_schedule').show();
            $('#ui_configuration_section').hide();
          } else {
            currentSchedule = [];
            setDefaultConfiguration();
            $('#ui_change_schedule').hide();
            $('#ui_configuration_section').show();
          }
        } else {
          alert('Failed to load purchase data: ' + (data.message || 'Unknown error'));
        }
      })
      .fail(function(){
        alert('Server error occurred while loading purchase data.');
      });
  }

  function loadConfigurationFromSchedule(schedule) {
    if (!schedule || schedule.length === 0) {
      setDefaultConfiguration();
      return;
    }

    // Analyze schedule to determine configuration
    var totalInstallments = schedule.length;
    var adjustmentCount = schedule.filter(function(item) { return item.adjustment; }).length;
    var firstDate = schedule[0].date;
    var regularAmount = null;
    var yearlyAmount = null;

    // Find regular and yearly amounts
    for (var i = 0; i < schedule.length; i++) {
      if (schedule[i].adjustment) {
        if (yearlyAmount === null) yearlyAmount = schedule[i].amount;
      } else {
        if (regularAmount === null) regularAmount = schedule[i].amount;
      }
    }

    // Determine adjustment type based on yearly adjustment positions
    var adjustmentType = 'monthly';
    if (adjustmentCount > 0) {
      var firstAdjustmentIndex = schedule.findIndex(function(item) { return item.adjustment; });
      var monthInYear = firstAdjustmentIndex % 12;
      
      if (monthInYear === 11) adjustmentType = 'year_end';
      else if (monthInYear === 0) adjustmentType = 'year_start';
      else if (monthInYear === 6) adjustmentType = 'year_middle';
      else adjustmentType = 'custom';
    }

    // Determine start option based on first date
    var startDate = new Date(firstDate);
    var dayOfMonth = startDate.getDate();
    var startOption = 'exact';
    if (dayOfMonth === 1) startOption = 'start';
    else if (dayOfMonth === 15) startOption = 'middle';
    else if (dayOfMonth >= 28) startOption = 'end';

    // Set configuration values
    $('#ui_mode').val(totalInstallments === 1 ? '1' : '2');
    $('#ui_installments').val(totalInstallments);
    $('#ui_adjustment_type').val(adjustmentType);
    $('#ui_monthly_amount').val(regularAmount || '');
    $('#ui_yearly_adjustment').val(yearlyAmount || '');
    $('#ui_start_date').val(firstDate);
    $('#ui_start_option').val(startOption);

    // Show/hide installment controls
    if (totalInstallments === 1) {
      $('#ui_installment_controls').addClass('d-none');
    } else {
      $('#ui_installment_controls').removeClass('d-none');
    }

    originalScheduleConfig = {
      mode: totalInstallments === 1 ? '1' : '2',
      installments: totalInstallments,
      adjustmentType: adjustmentType,
      monthlyAmount: regularAmount,
      yearlyAdjustment: yearlyAmount,
      startDate: firstDate,
      startOption: startOption
    };
  }

  function setDefaultConfiguration() {
    $('#ui_mode').val('2');
    $('#ui_installments').val(currentPurchaseData ? currentPurchaseData.default_installments || 12 : 12);
    $('#ui_adjustment_type').val('year_end');
    $('#ui_monthly_amount').val('');
    $('#ui_yearly_adjustment').val('');
    $('#ui_start_date').val(currentPurchaseData ? currentPurchaseData.default_start_date || new Date().toISOString().slice(0, 10) : new Date().toISOString().slice(0, 10));
    $('#ui_start_option').val('start');
    $('#ui_installment_controls').removeClass('d-none');
    
    originalScheduleConfig = null;
  }

  function populatePurchaseData(data) {
    $('#ui_project_name').text(data.project_name || 'Unknown Project');
    $('#ui_total_price').text(fmtMoney(data.total_price || 0));
    $('#ui_down_payment').text(fmtMoney(data.down_payment || 0));
    $('#ui_booking_money').text(fmtMoney(data.booking_money || 0));
    
    var remaining = (data.total_price || 0) - (data.down_payment || 0) - (data.booking_money || 0);
    $('#ui_remaining').text(fmtMoney(remaining));
  }

  function generateSchedule() {
    if (!currentPurchaseData) {
      alert('Purchase data not loaded');
      return;
    }

    var mode = $('#ui_mode').val();
    
    if (mode === '1') {
      generateFullPaymentSchedule();
    } else {
      generateInstallmentSchedule();
    }
  }

  function generateFullPaymentSchedule() {
    var remaining = (currentPurchaseData.total_price || 0) - 
                   (currentPurchaseData.down_payment || 0) - 
                   (currentPurchaseData.booking_money || 0);
    var startDate = $('#ui_start_date').val() || new Date().toISOString().slice(0, 10);
    
    currentSchedule = [{
      date: startDate,
      amount: Math.round(remaining * 100) / 100,
      adjustment: false,
      paid: false
    }];
    
    renderScheduleTable();
    updateTotals();
  }

  function generateInstallmentSchedule() {
    var installments = parseInt($('#ui_installments').val()) || 12;
    var adjustmentType = $('#ui_adjustment_type').val();
    var monthlyAmount = moneyVal($('#ui_monthly_amount').val());
    var yearlyAdjustment = moneyVal($('#ui_yearly_adjustment').val());
    var startDate = $('#ui_start_date').val() || new Date().toISOString().slice(0, 10);
    var startOption = $('#ui_start_option').val();
    
    var remaining = (currentPurchaseData.total_price || 0) - 
                   (currentPurchaseData.down_payment || 0) - 
                   (currentPurchaseData.booking_money || 0);
    
    currentSchedule = [];
    var currentDate = new Date(startDate);
    
    // Adjust start date based on option
    if (startOption === 'start') {
      currentDate.setDate(1);
    } else if (startOption === 'middle') {
      currentDate.setDate(15);
    } else if (startOption === 'end') {
      currentDate.setDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate());
    }
    
    var totalYearlyAdjustments = 0;
    var yearlyAdjustmentMonths = [];
    
    // Calculate yearly adjustment positions
    if (yearlyAdjustment > 0 && adjustmentType !== 'custom') {
      var yearsInSchedule = Math.ceil(installments / 12);
      for (var year = 0; year < yearsInSchedule; year++) {
        var adjustmentMonth = 0;
        if (adjustmentType === 'year_start') {
          adjustmentMonth = year * 12;
        } else if (adjustmentType === 'year_middle') {
          adjustmentMonth = year * 12 + 6;
        } else if (adjustmentType === 'year_end') {
          adjustmentMonth = year * 12 + 11;
        }
        
        if (adjustmentMonth < installments) {
          yearlyAdjustmentMonths.push(adjustmentMonth);
          totalYearlyAdjustments += yearlyAdjustment;
        }
      }
    }
    
    // Calculate monthly amount
    var remainingAfterAdjustments = remaining - totalYearlyAdjustments;
    var regularInstallments = installments - yearlyAdjustmentMonths.length;
    var calculatedMonthlyAmount = regularInstallments > 0 ? remainingAfterAdjustments / regularInstallments : 0;
    
    if (monthlyAmount <= 0) {
      monthlyAmount = calculatedMonthlyAmount;
    }
    
    // Generate schedule
    for (var i = 0; i < installments; i++) {
      var isAdjustmentMonth = yearlyAdjustmentMonths.includes(i);
      var amount = isAdjustmentMonth ? yearlyAdjustment : monthlyAmount;
      
      currentSchedule.push({
        date: new Date(currentDate).toISOString().slice(0, 10),
        amount: Math.round(amount * 100) / 100,
        adjustment: isAdjustmentMonth,
        paid: false
      });
      
      // Move to next month
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
    
    renderScheduleTable();
    updateTotals();
  }

  function renderScheduleTable() {
    var $tbody = $('#ui_schedule_table tbody');
    $tbody.empty();
    
    var statusFilter = $('input[name="schedule_status"]:checked').val();
    var filteredSchedule = currentSchedule.filter(function(item) {
      if (statusFilter === 'paid') return item.paid;
      if (statusFilter === 'unpaid') return !item.paid;
      return true; // 'all'
    });
    
    filteredSchedule.forEach(function(item, index) {
      var actualIndex = currentSchedule.indexOf(item);
      var statusBadge = item.paid 
        ? '<span class="badge bg-success">Paid</span>'
        : '<span class="badge bg-warning">Unpaid</span>';
      
      var actionBtn = item.paid
        ? '<button class="btn btn-sm btn-outline-danger" onclick="togglePayment(' + actualIndex + ')">Mark Unpaid</button>'
        : '<button class="btn btn-sm btn-outline-success" onclick="togglePayment(' + actualIndex + ')">Mark Paid</button>';
      
      var adjustmentIcon = item.adjustment ? '<i class="lni lni-star text-warning" title="Yearly adjustment"></i>' : '';
      
      var row = `
        <tr class="${item.paid ? 'payment-status-paid' : 'payment-status-unpaid'}">
          <td class="text-center fw-medium">${actualIndex + 1}</td>
          <td>${item.date} ${adjustmentIcon}</td>
          <td class="text-end fw-medium">৳${fmtMoney(item.amount)}</td>
          <td class="text-center">${item.adjustment ? 'Yes' : 'No'}</td>
          <td class="text-center">${statusBadge}</td>
          <td class="text-center">${actionBtn}</td>
        </tr>
      `;
      
      $tbody.append(row);
    });
    
    if (filteredSchedule.length === 0) {
      $tbody.append(`
        <tr>
          <td colspan="6" class="text-center text-muted py-4">
            <i class="lni lni-calendar me-2"></i>No schedule items match the current filter
          </td>
        </tr>
      `);
    }
  }

  function updateTotals() {
    var totalAmount = currentSchedule.reduce(function(sum, item) {
      return sum + (item.amount || 0);
    }, 0);
    
    var paidAmount = currentSchedule.reduce(function(sum, item) {
      return sum + (item.paid ? (item.amount || 0) : 0);
    }, 0);
    
    $('#ui_schedule_total').text(fmtMoney(totalAmount));
    $('#ui_paid_amount').text(fmtMoney(paidAmount));
    $('#ui_total_amount').text(fmtMoney(totalAmount));
    
    // Update total date range
    if (currentSchedule.length > 0) {
      var firstDate = currentSchedule[0].date;
      var lastDate = currentSchedule[currentSchedule.length - 1].date;
      $('#ui_total_date').text(firstDate + ' to ' + lastDate);
    } else {
      $('#ui_total_date').text('-');
    }
  }

  // Global function for payment toggle
  window.togglePayment = function(index) {
    if (index < 0 || index >= currentSchedule.length) return;
    
    currentSchedule[index].paid = !currentSchedule[index].paid;
    renderScheduleTable();
    updateTotals();
  };

  function saveSchedule() {
    var purchaseId = $('#ui_purchase_id').val();
    if (!purchaseId) {
      alert('Purchase ID missing');
      return;
    }

    // Validate schedule total matches remaining amount
    var expectedTotal = (currentPurchaseData.total_price || 0) - 
                       (currentPurchaseData.down_payment || 0) - 
                       (currentPurchaseData.booking_money || 0);
    
    var scheduleTotal = currentSchedule.reduce(function(sum, item) {
      return sum + (item.amount || 0);
    }, 0);

    var tolerance = 1; // Allow 1 taka difference for rounding
    if (Math.abs(scheduleTotal - expectedTotal) > tolerance) {
      if (!confirm('Schedule total (৳' + fmtMoney(scheduleTotal) + ') does not match expected amount (৳' + fmtMoney(expectedTotal) + '). Continue anyway?')) {
        return;
      }
    }
    
    var $btn = $('#ui_save_schedule');
    $btn.prop('disabled', true).html('<i class="spinner-border spinner-border-sm me-1"></i>Saving...');
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=update_installment', {
      purchase_id: purchaseId,
      schedule: JSON.stringify(currentSchedule)
    })
      .done(function(response){
        var data = typeof response === 'string' ? JSON.parse(response) : response;
        
        if (data && data.status === 200) {
          alert('Payment schedule saved successfully!');
          $('#updateInstallmentModal').modal('hide');
          
          // Refresh the main view if needed
          if (typeof DataTableRefresh === 'function') {
            DataTableRefresh();
          }
        } else {
          alert('Failed to save schedule: ' + (data.message || 'Unknown error'));
        }
      })
      .fail(function(){
        alert('Server error occurred while saving schedule.');
      })
      .always(function(){
        $btn.prop('disabled', false).html('<i class="lni lni-save me-1"></i>Save Schedule');
      });
  }

  function populatePrintTemplate() {
    if (!currentPurchaseData) return;
    
    // Populate print template
    $('#print_company_name').text(currentPurchaseData.company_name || 'Civic Real Estate Ltd.');
    $('#print_client_name').text(currentPurchaseData.client_name || '-');
    $('#print_client_phone').text(currentPurchaseData.client_phone || '-');
    $('#print_client_address').text(currentPurchaseData.client_address || '-');
    $('#print_project_name').text(currentPurchaseData.project_name || '-');
    $('#print_plot_info').text(currentPurchaseData.plot_info || '-');
    $('#print_file_number').text(currentPurchaseData.file_number || '-');
    $('#print_total_price').text(fmtMoney(currentPurchaseData.total_price || 0));
    $('#print_booking_money').text(fmtMoney(currentPurchaseData.booking_money || 0));
    $('#print_down_payment').text(fmtMoney(currentPurchaseData.down_payment || 0));
    
    var remaining = (currentPurchaseData.total_price || 0) - (currentPurchaseData.down_payment || 0) - (currentPurchaseData.booking_money || 0);
    $('#print_remaining').text(fmtMoney(remaining));
    $('#print_date').text(new Date().toLocaleDateString());
    
    // Populate schedule rows
    var $tbody = $('#print_schedule_rows');
    $tbody.empty();
    
    var totalAmount = 0;
    currentSchedule.forEach(function(item, index) {
      totalAmount += item.amount || 0;
      
      var statusText = item.paid ? 'Paid' : 'Unpaid';
      var notes = item.adjustment ? 'Yearly Adjustment' : 'Regular Payment';
      
      var row = `
        <tr class="${item.paid ? 'payment-status-paid' : 'payment-status-unpaid'}">
          <td class="text-center">${index + 1}</td>
          <td>${item.date}</td>
          <td class="text-end">৳${fmtMoney(item.amount)}</td>
          <td class="text-center">${statusText}</td>
          <td>${notes}</td>
        </tr>
      `;
      
      $tbody.append(row);
    });
    
    $('#print_schedule_total').text(fmtMoney(totalAmount));
  }

  function printSchedule() {
    populatePrintTemplate();
    
    var printContent = document.getElementById('printScheduleContent').innerHTML;
    var printWindow = window.open('', '_blank', 'width=800,height=600');
    
    if (!printWindow) {
      alert('Please allow popups to print the schedule.');
      return;
    }

    var printDocument = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Payment Schedule</title>
        <style>
          body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            color: #333; 
            background: white;
          }
          .schedule-print-template { 
            background: white; 
            max-width: 800px;
            margin: 0 auto;
          }
          .company-header { 
            text-align: center; 
            margin-bottom: 30px; 
            border-bottom: 3px solid #007bff; 
            padding-bottom: 20px; 
          }
          .company-name { 
            font-size: 28px; 
            font-weight: bold; 
            color: #007bff; 
            margin-bottom: 5px; 
          }
          .document-title { 
            font-size: 20px; 
            color: #666; 
            margin-bottom: 20px; 
          }
          .client-info, .purchase-info { 
            margin-bottom: 25px; 
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
          }
          .client-info h5, .purchase-info h5 { 
            font-weight: bold; 
            color: #333; 
            margin-bottom: 15px; 
            border-bottom: 2px solid #eee; 
            padding-bottom: 8px; 
            font-size: 16px;
          }
          .card { 
            padding: 12px; 
            background: white; 
            border-radius: 6px; 
            border: 1px solid #e9ecef;
          }
          table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 20px; 
            font-size: 13px;
          }
          th, td { 
            border: 1px solid #ddd; 
            padding: 10px 8px; 
            text-align: left; 
          }
          th { 
            background-color: #f8f9fa; 
            font-weight: 600; 
            color: #495057;
          }
          .text-center { text-align: center; }
          .text-end { text-align: right; }
          .fw-bold { font-weight: bold; }
          .signature-area { 
            margin-top: 60px; 
            display: flex; 
            justify-content: space-between; 
          }
          .signature-area > div { 
            text-align: center; 
            width: 200px; 
          }
          .signature-area p { 
            border-top: 2px solid #333; 
            margin-top: 60px; 
            padding-top: 8px; 
            font-weight: 600;
          }
          .payment-status-paid { background-color: rgba(40, 167, 69, 0.1); }
          .payment-status-unpaid { background-color: rgba(255, 193, 7, 0.1); }
          @media print {
            body { margin: 0; padding: 15px; }
            .no-print { display: none !important; }
            .page-break { page-break-after: always; }
          }
        </style>
      </head>
      <body>
        ${printContent}
      </body>
      </html>
    `;

    printWindow.document.write(printDocument);
    printWindow.document.close();
    
    setTimeout(function(){
      printWindow.focus();
      printWindow.print();
      setTimeout(function(){
        printWindow.close();
      }, 1000);
    }, 500);
  }

  function downloadSchedule() {
    var purchaseId = $('#ui_purchase_id').val();
    if (!purchaseId) {
      alert('Purchase ID missing');
      return;
    }
    
    populatePrintTemplate();
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=download_schedule_pdf', {
      purchase_id: purchaseId,
      schedule: JSON.stringify(currentSchedule),
      client_data: JSON.stringify(currentPurchaseData)
    })
      .done(function(response){
        var data = typeof response === 'string' ? JSON.parse(response) : response;
        
        if (data && data.status === 200 && data.download_url) {
          var link = document.createElement('a');
          link.href = data.download_url;
          link.download = data.filename || 'payment_schedule.pdf';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          alert('Failed to download schedule: ' + (data.message || 'Unknown error'));
        }
      })
      .fail(function(){
        alert('Server error while downloading schedule');
      });
  }

  function saveScheduleXLSX() {
    var purchaseId = $('#ui_purchase_id').val();
    if (!purchaseId) {
      alert('Purchase ID missing');
      return;
    }
    
    var $btn = $('#save_schedule_xlsx');
    $btn.prop('disabled', true).html('<i class="spinner-border spinner-border-sm me-1"></i>Saving...');
    
    $.post(Wo_Ajax_Requests_File() + '?f=manage_inventory&s=save_schedule_xlsx', {
      purchase_id: purchaseId,
      schedule: JSON.stringify(currentSchedule),
      client_data: JSON.stringify(currentPurchaseData)
    })
      .done(function(response){
        var data = typeof response === 'string' ? JSON.parse(response) : response;
        
        if (data && data.status === 200) {
          alert('Payment schedule saved to server successfully!');
          if (data.file_path) {
            // Optionally provide download link
            var link = document.createElement('a');
            link.href = data.download_url || data.file_path;
            link.download = data.filename || 'payment_schedule.xlsx';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          }
        } else {
          alert('Failed to save schedule: ' + (data.message || 'Unknown error'));
        }
      })
      .fail(function(){
        alert('Server error while saving schedule');
      })
      .always(function(){
        $btn.prop('disabled', false).html('<i class="lni lni-save me-1"></i>Save XLSX');
      });
  }

  // Add to global initialization
  if (typeof window.initViewClientComponents !== 'function') {
    window.initViewClientComponents = function() {
      initUpdateInstallment();
    };
  } else {
    var originalInit = window.initViewClientComponents;
    window.initViewClientComponents = function() {
      originalInit();
      initUpdateInstallment();
    };
  }

  // Cleanup
  $('#viewClient-modal').on('hidden.bs.modal.updateInstallment', function(){
    currentPurchaseData = null;
    currentSchedule = [];
    originalScheduleConfig = null;
    $(document).off('.updateInstallment');
  });

});
</script>